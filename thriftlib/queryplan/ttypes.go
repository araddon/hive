/* Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package queryplan;

import (
        "github.com/araddon/thrift4go/lib/go/thrift"
        "fmt"
)



type AdjacencyType int
const (
  CONJUNCTIVE AdjacencyType = 0
  DISJUNCTIVE AdjacencyType = 1
)
func (p AdjacencyType) String() string {
  switch p {
  case CONJUNCTIVE: return "CONJUNCTIVE"
  case DISJUNCTIVE: return "DISJUNCTIVE"
  }
  return ""
}

func FromAdjacencyTypeString(s string) AdjacencyType {
  switch s {
  case "CONJUNCTIVE": return CONJUNCTIVE
  case "DISJUNCTIVE": return DISJUNCTIVE
  }
  return AdjacencyType(-10000)
}

func (p AdjacencyType) Value() int {
  return int(p)
}

func (p AdjacencyType) IsEnum() bool {
  return true
}

type NodeType int
const (
  OPERATOR NodeType = 0
  STAGE NodeType = 1
)
func (p NodeType) String() string {
  switch p {
  case OPERATOR: return "OPERATOR"
  case STAGE: return "STAGE"
  }
  return ""
}

func FromNodeTypeString(s string) NodeType {
  switch s {
  case "OPERATOR": return OPERATOR
  case "STAGE": return STAGE
  }
  return NodeType(-10000)
}

func (p NodeType) Value() int {
  return int(p)
}

func (p NodeType) IsEnum() bool {
  return true
}

type OperatorType int
const (
  JOIN OperatorType = 0
  MAPJOIN OperatorType = 1
  EXTRACT OperatorType = 2
  FILTER OperatorType = 3
  FORWARD OperatorType = 4
  GROUPBY OperatorType = 5
  LIMIT OperatorType = 6
  SCRIPT OperatorType = 7
  SELECT OperatorType = 8
  TABLESCAN OperatorType = 9
  FILESINK OperatorType = 10
  REDUCESINK OperatorType = 11
  UNION OperatorType = 12
  UDTF OperatorType = 13
  LATERALVIEWJOIN OperatorType = 14
  LATERALVIEWFORWARD OperatorType = 15
  HASHTABLESINK OperatorType = 16
  HASHTABLEDUMMY OperatorType = 17
)
func (p OperatorType) String() string {
  switch p {
  case JOIN: return "JOIN"
  case MAPJOIN: return "MAPJOIN"
  case EXTRACT: return "EXTRACT"
  case FILTER: return "FILTER"
  case FORWARD: return "FORWARD"
  case GROUPBY: return "GROUPBY"
  case LIMIT: return "LIMIT"
  case SCRIPT: return "SCRIPT"
  case SELECT: return "SELECT"
  case TABLESCAN: return "TABLESCAN"
  case FILESINK: return "FILESINK"
  case REDUCESINK: return "REDUCESINK"
  case UNION: return "UNION"
  case UDTF: return "UDTF"
  case LATERALVIEWJOIN: return "LATERALVIEWJOIN"
  case LATERALVIEWFORWARD: return "LATERALVIEWFORWARD"
  case HASHTABLESINK: return "HASHTABLESINK"
  case HASHTABLEDUMMY: return "HASHTABLEDUMMY"
  }
  return ""
}

func FromOperatorTypeString(s string) OperatorType {
  switch s {
  case "JOIN": return JOIN
  case "MAPJOIN": return MAPJOIN
  case "EXTRACT": return EXTRACT
  case "FILTER": return FILTER
  case "FORWARD": return FORWARD
  case "GROUPBY": return GROUPBY
  case "LIMIT": return LIMIT
  case "SCRIPT": return SCRIPT
  case "SELECT": return SELECT
  case "TABLESCAN": return TABLESCAN
  case "FILESINK": return FILESINK
  case "REDUCESINK": return REDUCESINK
  case "UNION": return UNION
  case "UDTF": return UDTF
  case "LATERALVIEWJOIN": return LATERALVIEWJOIN
  case "LATERALVIEWFORWARD": return LATERALVIEWFORWARD
  case "HASHTABLESINK": return HASHTABLESINK
  case "HASHTABLEDUMMY": return HASHTABLEDUMMY
  }
  return OperatorType(-10000)
}

func (p OperatorType) Value() int {
  return int(p)
}

func (p OperatorType) IsEnum() bool {
  return true
}

type TaskType int
const (
  MAP TaskType = 0
  REDUCE TaskType = 1
  OTHER TaskType = 2
)
func (p TaskType) String() string {
  switch p {
  case MAP: return "MAP"
  case REDUCE: return "REDUCE"
  case OTHER: return "OTHER"
  }
  return ""
}

func FromTaskTypeString(s string) TaskType {
  switch s {
  case "MAP": return MAP
  case "REDUCE": return REDUCE
  case "OTHER": return OTHER
  }
  return TaskType(-10000)
}

func (p TaskType) Value() int {
  return int(p)
}

func (p TaskType) IsEnum() bool {
  return true
}

type StageType int
const (
  CONDITIONAL StageType = 0
  COPY StageType = 1
  DDL StageType = 2
  MAPRED StageType = 3
  EXPLAIN StageType = 4
  FETCH StageType = 5
  FUNC StageType = 6
  MAPREDLOCAL StageType = 7
  MOVE StageType = 8
  STATS StageType = 9
)
func (p StageType) String() string {
  switch p {
  case CONDITIONAL: return "CONDITIONAL"
  case COPY: return "COPY"
  case DDL: return "DDL"
  case MAPRED: return "MAPRED"
  case EXPLAIN: return "EXPLAIN"
  case FETCH: return "FETCH"
  case FUNC: return "FUNC"
  case MAPREDLOCAL: return "MAPREDLOCAL"
  case MOVE: return "MOVE"
  case STATS: return "STATS"
  }
  return ""
}

func FromStageTypeString(s string) StageType {
  switch s {
  case "CONDITIONAL": return CONDITIONAL
  case "COPY": return COPY
  case "DDL": return DDL
  case "MAPRED": return MAPRED
  case "EXPLAIN": return EXPLAIN
  case "FETCH": return FETCH
  case "FUNC": return FUNC
  case "MAPREDLOCAL": return MAPREDLOCAL
  case "MOVE": return MOVE
  case "STATS": return STATS
  }
  return StageType(-10000)
}

func (p StageType) Value() int {
  return int(p)
}

func (p StageType) IsEnum() bool {
  return true
}

/**
 * Attributes:
 *  - Node
 *  - Children
 *  - AdjacencyType
 */
type Adjacency struct {
  thrift.TStruct
  Node string "node"; // 1
  Children thrift.TList "children"; // 2
  AdjacencyType AdjacencyType "adjacencyType"; // 3
}

func NewAdjacency() *Adjacency {
  output := &Adjacency{
    TStruct:thrift.NewTStruct("Adjacency", []thrift.TField{
    thrift.NewTField("node", thrift.STRING, 1),
    thrift.NewTField("children", thrift.LIST, 2),
    thrift.NewTField("adjacencyType", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *Adjacency) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "node" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "children" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "adjacencyType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Adjacency) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadString()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "node", p.ThriftName(), err1); }
  p.Node = v0
  return err
}

func (p *Adjacency) ReadFieldNode(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Adjacency) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype7, _size4, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Children", "", err)
  }
  p.Children = thrift.NewTList(_etype7, _size4)
  for _i8:= 0; _i8 < _size4; _i8++ {
    v10, err11 := iprot.ReadString()
    if err11 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem9", "", err11); }
    _elem9 := v10
    p.Children.Push(_elem9)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Adjacency) ReadFieldChildren(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Adjacency) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v12, err13 := iprot.ReadI32()
  if err13 != nil { return thrift.NewTProtocolExceptionReadField(3, "adjacencyType", p.ThriftName(), err13); }
  p.AdjacencyType = AdjacencyType(v12)
  return err
}

func (p *Adjacency) ReadFieldAdjacencyType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Adjacency) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Adjacency")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Adjacency) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Node) < 1 { return nil}
  err = oprot.WriteFieldBegin("node", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "node", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Node))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "node", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "node", p.ThriftName(), err); }
  return err
}

func (p *Adjacency) WriteFieldNode(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Adjacency) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Children != nil {
    err = oprot.WriteFieldBegin("children", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "children", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Children.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter14 := range p.Children.Iter() {
      Iter15 := Iter14.(string)
      err = oprot.WriteString(string(Iter15))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter15", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "children", p.ThriftName(), err); }
  }
  return err
}

func (p *Adjacency) WriteFieldChildren(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Adjacency) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("adjacencyType", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "adjacencyType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.AdjacencyType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "adjacencyType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "adjacencyType", p.ThriftName(), err); }
  return err
}

func (p *Adjacency) WriteFieldAdjacencyType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Adjacency) TStructName() string {
  return "Adjacency"
}

func (p *Adjacency) ThriftName() string {
  return "Adjacency"
}

func (p *Adjacency) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Adjacency(%+v)", *p)
}

func (p *Adjacency) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Adjacency)
  if !ok {
    return 0, false
  }
  if p.Node != data.Node {
    if p.Node < data.Node {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Children.CompareTo(data.Children); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.AdjacencyType != data.AdjacencyType {
    if p.AdjacencyType < data.AdjacencyType {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *Adjacency) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Node
  case 2: return p.Children
  case 3: return p.AdjacencyType
  }
  return nil
}

func (p *Adjacency) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("node", thrift.STRING, 1),
    thrift.NewTField("children", thrift.LIST, 2),
    thrift.NewTField("adjacencyType", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - NodeType
 *  - Roots
 *  - AdjacencyList
 */
type Graph struct {
  thrift.TStruct
  NodeType NodeType "nodeType"; // 1
  Roots thrift.TList "roots"; // 2
  AdjacencyList thrift.TList "adjacencyList"; // 3
}

func NewGraph() *Graph {
  output := &Graph{
    TStruct:thrift.NewTStruct("Graph", []thrift.TField{
    thrift.NewTField("nodeType", thrift.I32, 1),
    thrift.NewTField("roots", thrift.LIST, 2),
    thrift.NewTField("adjacencyList", thrift.LIST, 3),
    }),
  }
  {
  }
  return output
}

func (p *Graph) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "nodeType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "roots" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "adjacencyList" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Graph) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v16, err17 := iprot.ReadI32()
  if err17 != nil { return thrift.NewTProtocolExceptionReadField(1, "nodeType", p.ThriftName(), err17); }
  p.NodeType = NodeType(v16)
  return err
}

func (p *Graph) ReadFieldNodeType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Graph) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype23, _size20, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Roots", "", err)
  }
  p.Roots = thrift.NewTList(_etype23, _size20)
  for _i24:= 0; _i24 < _size20; _i24++ {
    v26, err27 := iprot.ReadString()
    if err27 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem25", "", err27); }
    _elem25 := v26
    p.Roots.Push(_elem25)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Graph) ReadFieldRoots(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Graph) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype33, _size30, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.AdjacencyList", "", err)
  }
  p.AdjacencyList = thrift.NewTList(_etype33, _size30)
  for _i34:= 0; _i34 < _size30; _i34++ {
    _elem35 := NewAdjacency()
    err38 := _elem35.Read(iprot)
    if err38 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem35Adjacency", err38); }
    p.AdjacencyList.Push(_elem35)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Graph) ReadFieldAdjacencyList(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Graph) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Graph")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Graph) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("nodeType", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "nodeType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NodeType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "nodeType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "nodeType", p.ThriftName(), err); }
  return err
}

func (p *Graph) WriteFieldNodeType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Graph) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Roots != nil {
    err = oprot.WriteFieldBegin("roots", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "roots", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Roots.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter39 := range p.Roots.Iter() {
      Iter40 := Iter39.(string)
      err = oprot.WriteString(string(Iter40))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter40", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "roots", p.ThriftName(), err); }
  }
  return err
}

func (p *Graph) WriteFieldRoots(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Graph) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.AdjacencyList != nil {
    err = oprot.WriteFieldBegin("adjacencyList", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "adjacencyList", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.AdjacencyList.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter41 := range p.AdjacencyList.Iter() {
      Iter42 := Iter41.(*Adjacency)
      err = Iter42.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Adjacency", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "adjacencyList", p.ThriftName(), err); }
  }
  return err
}

func (p *Graph) WriteFieldAdjacencyList(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Graph) TStructName() string {
  return "Graph"
}

func (p *Graph) ThriftName() string {
  return "Graph"
}

func (p *Graph) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Graph(%+v)", *p)
}

func (p *Graph) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Graph)
  if !ok {
    return 0, false
  }
  if p.NodeType != data.NodeType {
    if p.NodeType < data.NodeType {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Roots.CompareTo(data.Roots); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.AdjacencyList.CompareTo(data.AdjacencyList); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *Graph) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.NodeType
  case 2: return p.Roots
  case 3: return p.AdjacencyList
  }
  return nil
}

func (p *Graph) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("nodeType", thrift.I32, 1),
    thrift.NewTField("roots", thrift.LIST, 2),
    thrift.NewTField("adjacencyList", thrift.LIST, 3),
    })
}

/**
 * Attributes:
 *  - OperatorId
 *  - OperatorType
 *  - OperatorAttributes
 *  - OperatorCounters
 *  - Done
 *  - Started
 */
type Operator struct {
  thrift.TStruct
  OperatorId string "operatorId"; // 1
  OperatorType OperatorType "operatorType"; // 2
  OperatorAttributes thrift.TMap "operatorAttributes"; // 3
  OperatorCounters thrift.TMap "operatorCounters"; // 4
  Done bool "done"; // 5
  Started bool "started"; // 6
}

func NewOperator() *Operator {
  output := &Operator{
    TStruct:thrift.NewTStruct("Operator", []thrift.TField{
    thrift.NewTField("operatorId", thrift.STRING, 1),
    thrift.NewTField("operatorType", thrift.I32, 2),
    thrift.NewTField("operatorAttributes", thrift.MAP, 3),
    thrift.NewTField("operatorCounters", thrift.MAP, 4),
    thrift.NewTField("done", thrift.BOOL, 5),
    thrift.NewTField("started", thrift.BOOL, 6),
    }),
  }
  {
  }
  return output
}

func (p *Operator) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "operatorId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "operatorType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "operatorAttributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "operatorCounters" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "done" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "started" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Operator) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v43, err44 := iprot.ReadString()
  if err44 != nil { return thrift.NewTProtocolExceptionReadField(1, "operatorId", p.ThriftName(), err44); }
  p.OperatorId = v43
  return err
}

func (p *Operator) ReadFieldOperatorId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Operator) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v45, err46 := iprot.ReadI32()
  if err46 != nil { return thrift.NewTProtocolExceptionReadField(2, "operatorType", p.ThriftName(), err46); }
  p.OperatorType = OperatorType(v45)
  return err
}

func (p *Operator) ReadFieldOperatorType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Operator) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype50, _vtype51, _size49, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.OperatorAttributes", "", err)
  }
  p.OperatorAttributes = thrift.NewTMap(_ktype50, _vtype51, _size49)
  for _i53:= 0; _i53 < _size49; _i53++ {
    v56, err57 := iprot.ReadString()
    if err57 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key54", "", err57); }
    _key54 := v56
    v58, err59 := iprot.ReadString()
    if err59 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val55", "", err59); }
    _val55 := v58
    p.OperatorAttributes.Set(_key54, _val55)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Operator) ReadFieldOperatorAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Operator) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype63, _vtype64, _size62, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.OperatorCounters", "", err)
  }
  p.OperatorCounters = thrift.NewTMap(_ktype63, _vtype64, _size62)
  for _i66:= 0; _i66 < _size62; _i66++ {
    v69, err70 := iprot.ReadString()
    if err70 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key67", "", err70); }
    _key67 := v69
    v71, err72 := iprot.ReadI64()
    if err72 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val68", "", err72); }
    _val68 := v71
    p.OperatorCounters.Set(_key67, _val68)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Operator) ReadFieldOperatorCounters(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Operator) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v73, err74 := iprot.ReadBool()
  if err74 != nil { return thrift.NewTProtocolExceptionReadField(5, "done", p.ThriftName(), err74); }
  p.Done = v73
  return err
}

func (p *Operator) ReadFieldDone(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *Operator) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v75, err76 := iprot.ReadBool()
  if err76 != nil { return thrift.NewTProtocolExceptionReadField(6, "started", p.ThriftName(), err76); }
  p.Started = v75
  return err
}

func (p *Operator) ReadFieldStarted(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *Operator) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Operator")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Operator) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.OperatorId) < 1 { return nil}
  err = oprot.WriteFieldBegin("operatorId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "operatorId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.OperatorId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "operatorId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "operatorId", p.ThriftName(), err); }
  return err
}

func (p *Operator) WriteFieldOperatorId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Operator) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("operatorType", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "operatorType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.OperatorType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "operatorType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "operatorType", p.ThriftName(), err); }
  return err
}

func (p *Operator) WriteFieldOperatorType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Operator) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.OperatorAttributes != nil {
    err = oprot.WriteFieldBegin("operatorAttributes", thrift.MAP, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "operatorAttributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.OperatorAttributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter77 := range p.OperatorAttributes.Iter() {
      Kiter78, Viter79 := Miter77.Key().(string), Miter77.Value().(string)
      err = oprot.WriteString(string(Kiter78))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter78", "", err); }
      err = oprot.WriteString(string(Viter79))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter79", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "operatorAttributes", p.ThriftName(), err); }
  }
  return err
}

func (p *Operator) WriteFieldOperatorAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Operator) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.OperatorCounters != nil {
    err = oprot.WriteFieldBegin("operatorCounters", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "operatorCounters", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.I64, p.OperatorCounters.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter80 := range p.OperatorCounters.Iter() {
      Kiter81, Viter82 := Miter80.Key().(string), Miter80.Value().(int64)
      err = oprot.WriteString(string(Kiter81))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter81", "", err); }
      err = oprot.WriteI64(int64(Viter82))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter82", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "operatorCounters", p.ThriftName(), err); }
  }
  return err
}

func (p *Operator) WriteFieldOperatorCounters(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Operator) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("done", thrift.BOOL, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "done", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Done))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "done", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "done", p.ThriftName(), err); }
  return err
}

func (p *Operator) WriteFieldDone(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *Operator) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("started", thrift.BOOL, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "started", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Started))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "started", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "started", p.ThriftName(), err); }
  return err
}

func (p *Operator) WriteFieldStarted(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *Operator) TStructName() string {
  return "Operator"
}

func (p *Operator) ThriftName() string {
  return "Operator"
}

func (p *Operator) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Operator(%+v)", *p)
}

func (p *Operator) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Operator)
  if !ok {
    return 0, false
  }
  if p.OperatorId != data.OperatorId {
    if p.OperatorId < data.OperatorId {
      return -1, true
    }
    return 1, true
  }
  if p.OperatorType != data.OperatorType {
    if p.OperatorType < data.OperatorType {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.OperatorAttributes.CompareTo(data.OperatorAttributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.OperatorCounters.CompareTo(data.OperatorCounters); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.Done, data.Done); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.Started, data.Started); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *Operator) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.OperatorId
  case 2: return p.OperatorType
  case 3: return p.OperatorAttributes
  case 4: return p.OperatorCounters
  case 5: return p.Done
  case 6: return p.Started
  }
  return nil
}

func (p *Operator) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("operatorId", thrift.STRING, 1),
    thrift.NewTField("operatorType", thrift.I32, 2),
    thrift.NewTField("operatorAttributes", thrift.MAP, 3),
    thrift.NewTField("operatorCounters", thrift.MAP, 4),
    thrift.NewTField("done", thrift.BOOL, 5),
    thrift.NewTField("started", thrift.BOOL, 6),
    })
}

/**
 * Attributes:
 *  - TaskId
 *  - TaskType
 *  - TaskAttributes
 *  - TaskCounters
 *  - OperatorGraph
 *  - OperatorList
 *  - Done
 *  - Started
 */
type Task struct {
  thrift.TStruct
  TaskId string "taskId"; // 1
  TaskType TaskType "taskType"; // 2
  TaskAttributes thrift.TMap "taskAttributes"; // 3
  TaskCounters thrift.TMap "taskCounters"; // 4
  OperatorGraph *Graph "operatorGraph"; // 5
  OperatorList thrift.TList "operatorList"; // 6
  Done bool "done"; // 7
  Started bool "started"; // 8
}

func NewTask() *Task {
  output := &Task{
    TStruct:thrift.NewTStruct("Task", []thrift.TField{
    thrift.NewTField("taskId", thrift.STRING, 1),
    thrift.NewTField("taskType", thrift.I32, 2),
    thrift.NewTField("taskAttributes", thrift.MAP, 3),
    thrift.NewTField("taskCounters", thrift.MAP, 4),
    thrift.NewTField("operatorGraph", thrift.STRUCT, 5),
    thrift.NewTField("operatorList", thrift.LIST, 6),
    thrift.NewTField("done", thrift.BOOL, 7),
    thrift.NewTField("started", thrift.BOOL, 8),
    }),
  }
  {
  }
  return output
}

func (p *Task) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "taskId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "taskType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "taskAttributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "taskCounters" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "operatorGraph" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "operatorList" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "done" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "started" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Task) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v83, err84 := iprot.ReadString()
  if err84 != nil { return thrift.NewTProtocolExceptionReadField(1, "taskId", p.ThriftName(), err84); }
  p.TaskId = v83
  return err
}

func (p *Task) ReadFieldTaskId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Task) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v85, err86 := iprot.ReadI32()
  if err86 != nil { return thrift.NewTProtocolExceptionReadField(2, "taskType", p.ThriftName(), err86); }
  p.TaskType = TaskType(v85)
  return err
}

func (p *Task) ReadFieldTaskType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Task) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype90, _vtype91, _size89, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.TaskAttributes", "", err)
  }
  p.TaskAttributes = thrift.NewTMap(_ktype90, _vtype91, _size89)
  for _i93:= 0; _i93 < _size89; _i93++ {
    v96, err97 := iprot.ReadString()
    if err97 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key94", "", err97); }
    _key94 := v96
    v98, err99 := iprot.ReadString()
    if err99 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val95", "", err99); }
    _val95 := v98
    p.TaskAttributes.Set(_key94, _val95)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Task) ReadFieldTaskAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Task) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype103, _vtype104, _size102, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.TaskCounters", "", err)
  }
  p.TaskCounters = thrift.NewTMap(_ktype103, _vtype104, _size102)
  for _i106:= 0; _i106 < _size102; _i106++ {
    v109, err110 := iprot.ReadString()
    if err110 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key107", "", err110); }
    _key107 := v109
    v111, err112 := iprot.ReadI64()
    if err112 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val108", "", err112); }
    _val108 := v111
    p.TaskCounters.Set(_key107, _val108)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Task) ReadFieldTaskCounters(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Task) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.OperatorGraph = NewGraph()
  err115 := p.OperatorGraph.Read(iprot)
  if err115 != nil { return thrift.NewTProtocolExceptionReadStruct("p.OperatorGraphGraph", err115); }
  return err
}

func (p *Task) ReadFieldOperatorGraph(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *Task) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype121, _size118, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.OperatorList", "", err)
  }
  p.OperatorList = thrift.NewTList(_etype121, _size118)
  for _i122:= 0; _i122 < _size118; _i122++ {
    _elem123 := NewOperator()
    err126 := _elem123.Read(iprot)
    if err126 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem123Operator", err126); }
    p.OperatorList.Push(_elem123)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Task) ReadFieldOperatorList(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *Task) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v127, err128 := iprot.ReadBool()
  if err128 != nil { return thrift.NewTProtocolExceptionReadField(7, "done", p.ThriftName(), err128); }
  p.Done = v127
  return err
}

func (p *Task) ReadFieldDone(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *Task) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v129, err130 := iprot.ReadBool()
  if err130 != nil { return thrift.NewTProtocolExceptionReadField(8, "started", p.ThriftName(), err130); }
  p.Started = v129
  return err
}

func (p *Task) ReadFieldStarted(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *Task) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Task")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Task) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TaskId) < 1 { return nil}
  err = oprot.WriteFieldBegin("taskId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "taskId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TaskId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "taskId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "taskId", p.ThriftName(), err); }
  return err
}

func (p *Task) WriteFieldTaskId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Task) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("taskType", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "taskType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.TaskType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "taskType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "taskType", p.ThriftName(), err); }
  return err
}

func (p *Task) WriteFieldTaskType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Task) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.TaskAttributes != nil {
    err = oprot.WriteFieldBegin("taskAttributes", thrift.MAP, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "taskAttributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.TaskAttributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter131 := range p.TaskAttributes.Iter() {
      Kiter132, Viter133 := Miter131.Key().(string), Miter131.Value().(string)
      err = oprot.WriteString(string(Kiter132))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter132", "", err); }
      err = oprot.WriteString(string(Viter133))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter133", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "taskAttributes", p.ThriftName(), err); }
  }
  return err
}

func (p *Task) WriteFieldTaskAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Task) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.TaskCounters != nil {
    err = oprot.WriteFieldBegin("taskCounters", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "taskCounters", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.I64, p.TaskCounters.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter134 := range p.TaskCounters.Iter() {
      Kiter135, Viter136 := Miter134.Key().(string), Miter134.Value().(int64)
      err = oprot.WriteString(string(Kiter135))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter135", "", err); }
      err = oprot.WriteI64(int64(Viter136))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter136", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "taskCounters", p.ThriftName(), err); }
  }
  return err
}

func (p *Task) WriteFieldTaskCounters(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Task) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.OperatorGraph != nil {
    err = oprot.WriteFieldBegin("operatorGraph", thrift.STRUCT, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "operatorGraph", p.ThriftName(), err); }
    err = p.OperatorGraph.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Graph", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "operatorGraph", p.ThriftName(), err); }
  }
  return err
}

func (p *Task) WriteFieldOperatorGraph(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *Task) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.OperatorList != nil {
    err = oprot.WriteFieldBegin("operatorList", thrift.LIST, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "operatorList", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.OperatorList.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter137 := range p.OperatorList.Iter() {
      Iter138 := Iter137.(*Operator)
      err = Iter138.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Operator", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "operatorList", p.ThriftName(), err); }
  }
  return err
}

func (p *Task) WriteFieldOperatorList(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *Task) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("done", thrift.BOOL, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "done", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Done))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "done", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "done", p.ThriftName(), err); }
  return err
}

func (p *Task) WriteFieldDone(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *Task) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("started", thrift.BOOL, 8)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "started", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Started))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "started", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "started", p.ThriftName(), err); }
  return err
}

func (p *Task) WriteFieldStarted(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *Task) TStructName() string {
  return "Task"
}

func (p *Task) ThriftName() string {
  return "Task"
}

func (p *Task) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Task(%+v)", *p)
}

func (p *Task) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Task)
  if !ok {
    return 0, false
  }
  if p.TaskId != data.TaskId {
    if p.TaskId < data.TaskId {
      return -1, true
    }
    return 1, true
  }
  if p.TaskType != data.TaskType {
    if p.TaskType < data.TaskType {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.TaskAttributes.CompareTo(data.TaskAttributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.TaskCounters.CompareTo(data.TaskCounters); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.OperatorGraph.CompareTo(data.OperatorGraph); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.OperatorList.CompareTo(data.OperatorList); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.Done, data.Done); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.Started, data.Started); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *Task) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TaskId
  case 2: return p.TaskType
  case 3: return p.TaskAttributes
  case 4: return p.TaskCounters
  case 5: return p.OperatorGraph
  case 6: return p.OperatorList
  case 7: return p.Done
  case 8: return p.Started
  }
  return nil
}

func (p *Task) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("taskId", thrift.STRING, 1),
    thrift.NewTField("taskType", thrift.I32, 2),
    thrift.NewTField("taskAttributes", thrift.MAP, 3),
    thrift.NewTField("taskCounters", thrift.MAP, 4),
    thrift.NewTField("operatorGraph", thrift.STRUCT, 5),
    thrift.NewTField("operatorList", thrift.LIST, 6),
    thrift.NewTField("done", thrift.BOOL, 7),
    thrift.NewTField("started", thrift.BOOL, 8),
    })
}

/**
 * Attributes:
 *  - StageId
 *  - StageType
 *  - StageAttributes
 *  - StageCounters
 *  - TaskList
 *  - Done
 *  - Started
 */
type Stage struct {
  thrift.TStruct
  StageId string "stageId"; // 1
  StageType StageType "stageType"; // 2
  StageAttributes thrift.TMap "stageAttributes"; // 3
  StageCounters thrift.TMap "stageCounters"; // 4
  TaskList thrift.TList "taskList"; // 5
  Done bool "done"; // 6
  Started bool "started"; // 7
}

func NewStage() *Stage {
  output := &Stage{
    TStruct:thrift.NewTStruct("Stage", []thrift.TField{
    thrift.NewTField("stageId", thrift.STRING, 1),
    thrift.NewTField("stageType", thrift.I32, 2),
    thrift.NewTField("stageAttributes", thrift.MAP, 3),
    thrift.NewTField("stageCounters", thrift.MAP, 4),
    thrift.NewTField("taskList", thrift.LIST, 5),
    thrift.NewTField("done", thrift.BOOL, 6),
    thrift.NewTField("started", thrift.BOOL, 7),
    }),
  }
  {
  }
  return output
}

func (p *Stage) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "stageId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "stageType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "stageAttributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "stageCounters" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "taskList" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "done" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "started" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Stage) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v139, err140 := iprot.ReadString()
  if err140 != nil { return thrift.NewTProtocolExceptionReadField(1, "stageId", p.ThriftName(), err140); }
  p.StageId = v139
  return err
}

func (p *Stage) ReadFieldStageId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Stage) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v141, err142 := iprot.ReadI32()
  if err142 != nil { return thrift.NewTProtocolExceptionReadField(2, "stageType", p.ThriftName(), err142); }
  p.StageType = StageType(v141)
  return err
}

func (p *Stage) ReadFieldStageType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Stage) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype146, _vtype147, _size145, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.StageAttributes", "", err)
  }
  p.StageAttributes = thrift.NewTMap(_ktype146, _vtype147, _size145)
  for _i149:= 0; _i149 < _size145; _i149++ {
    v152, err153 := iprot.ReadString()
    if err153 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key150", "", err153); }
    _key150 := v152
    v154, err155 := iprot.ReadString()
    if err155 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val151", "", err155); }
    _val151 := v154
    p.StageAttributes.Set(_key150, _val151)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Stage) ReadFieldStageAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Stage) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype159, _vtype160, _size158, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.StageCounters", "", err)
  }
  p.StageCounters = thrift.NewTMap(_ktype159, _vtype160, _size158)
  for _i162:= 0; _i162 < _size158; _i162++ {
    v165, err166 := iprot.ReadString()
    if err166 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key163", "", err166); }
    _key163 := v165
    v167, err168 := iprot.ReadI64()
    if err168 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val164", "", err168); }
    _val164 := v167
    p.StageCounters.Set(_key163, _val164)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Stage) ReadFieldStageCounters(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Stage) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype174, _size171, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.TaskList", "", err)
  }
  p.TaskList = thrift.NewTList(_etype174, _size171)
  for _i175:= 0; _i175 < _size171; _i175++ {
    _elem176 := NewTask()
    err179 := _elem176.Read(iprot)
    if err179 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem176Task", err179); }
    p.TaskList.Push(_elem176)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Stage) ReadFieldTaskList(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *Stage) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v180, err181 := iprot.ReadBool()
  if err181 != nil { return thrift.NewTProtocolExceptionReadField(6, "done", p.ThriftName(), err181); }
  p.Done = v180
  return err
}

func (p *Stage) ReadFieldDone(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *Stage) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v182, err183 := iprot.ReadBool()
  if err183 != nil { return thrift.NewTProtocolExceptionReadField(7, "started", p.ThriftName(), err183); }
  p.Started = v182
  return err
}

func (p *Stage) ReadFieldStarted(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *Stage) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Stage")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Stage) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.StageId) < 1 { return nil}
  err = oprot.WriteFieldBegin("stageId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "stageId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StageId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "stageId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "stageId", p.ThriftName(), err); }
  return err
}

func (p *Stage) WriteFieldStageId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Stage) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("stageType", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "stageType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.StageType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "stageType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "stageType", p.ThriftName(), err); }
  return err
}

func (p *Stage) WriteFieldStageType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Stage) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.StageAttributes != nil {
    err = oprot.WriteFieldBegin("stageAttributes", thrift.MAP, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "stageAttributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.StageAttributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter184 := range p.StageAttributes.Iter() {
      Kiter185, Viter186 := Miter184.Key().(string), Miter184.Value().(string)
      err = oprot.WriteString(string(Kiter185))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter185", "", err); }
      err = oprot.WriteString(string(Viter186))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter186", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "stageAttributes", p.ThriftName(), err); }
  }
  return err
}

func (p *Stage) WriteFieldStageAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Stage) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.StageCounters != nil {
    err = oprot.WriteFieldBegin("stageCounters", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "stageCounters", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.I64, p.StageCounters.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter187 := range p.StageCounters.Iter() {
      Kiter188, Viter189 := Miter187.Key().(string), Miter187.Value().(int64)
      err = oprot.WriteString(string(Kiter188))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter188", "", err); }
      err = oprot.WriteI64(int64(Viter189))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter189", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "stageCounters", p.ThriftName(), err); }
  }
  return err
}

func (p *Stage) WriteFieldStageCounters(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Stage) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.TaskList != nil {
    err = oprot.WriteFieldBegin("taskList", thrift.LIST, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "taskList", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.TaskList.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter190 := range p.TaskList.Iter() {
      Iter191 := Iter190.(*Task)
      err = Iter191.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Task", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "taskList", p.ThriftName(), err); }
  }
  return err
}

func (p *Stage) WriteFieldTaskList(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *Stage) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("done", thrift.BOOL, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "done", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Done))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "done", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "done", p.ThriftName(), err); }
  return err
}

func (p *Stage) WriteFieldDone(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *Stage) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("started", thrift.BOOL, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "started", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Started))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "started", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "started", p.ThriftName(), err); }
  return err
}

func (p *Stage) WriteFieldStarted(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *Stage) TStructName() string {
  return "Stage"
}

func (p *Stage) ThriftName() string {
  return "Stage"
}

func (p *Stage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Stage(%+v)", *p)
}

func (p *Stage) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Stage)
  if !ok {
    return 0, false
  }
  if p.StageId != data.StageId {
    if p.StageId < data.StageId {
      return -1, true
    }
    return 1, true
  }
  if p.StageType != data.StageType {
    if p.StageType < data.StageType {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.StageAttributes.CompareTo(data.StageAttributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.StageCounters.CompareTo(data.StageCounters); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.TaskList.CompareTo(data.TaskList); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.Done, data.Done); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.Started, data.Started); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *Stage) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.StageId
  case 2: return p.StageType
  case 3: return p.StageAttributes
  case 4: return p.StageCounters
  case 5: return p.TaskList
  case 6: return p.Done
  case 7: return p.Started
  }
  return nil
}

func (p *Stage) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("stageId", thrift.STRING, 1),
    thrift.NewTField("stageType", thrift.I32, 2),
    thrift.NewTField("stageAttributes", thrift.MAP, 3),
    thrift.NewTField("stageCounters", thrift.MAP, 4),
    thrift.NewTField("taskList", thrift.LIST, 5),
    thrift.NewTField("done", thrift.BOOL, 6),
    thrift.NewTField("started", thrift.BOOL, 7),
    })
}

/**
 * Attributes:
 *  - QueryId
 *  - QueryType
 *  - QueryAttributes
 *  - QueryCounters
 *  - StageGraph
 *  - StageList
 *  - Done
 *  - Started
 */
type Query struct {
  thrift.TStruct
  QueryId string "queryId"; // 1
  QueryType string "queryType"; // 2
  QueryAttributes thrift.TMap "queryAttributes"; // 3
  QueryCounters thrift.TMap "queryCounters"; // 4
  StageGraph *Graph "stageGraph"; // 5
  StageList thrift.TList "stageList"; // 6
  Done bool "done"; // 7
  Started bool "started"; // 8
}

func NewQuery() *Query {
  output := &Query{
    TStruct:thrift.NewTStruct("Query", []thrift.TField{
    thrift.NewTField("queryId", thrift.STRING, 1),
    thrift.NewTField("queryType", thrift.STRING, 2),
    thrift.NewTField("queryAttributes", thrift.MAP, 3),
    thrift.NewTField("queryCounters", thrift.MAP, 4),
    thrift.NewTField("stageGraph", thrift.STRUCT, 5),
    thrift.NewTField("stageList", thrift.LIST, 6),
    thrift.NewTField("done", thrift.BOOL, 7),
    thrift.NewTField("started", thrift.BOOL, 8),
    }),
  }
  {
  }
  return output
}

func (p *Query) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "queryId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "queryType" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "queryAttributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "queryCounters" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "stageGraph" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "stageList" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "done" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "started" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Query) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v192, err193 := iprot.ReadString()
  if err193 != nil { return thrift.NewTProtocolExceptionReadField(1, "queryId", p.ThriftName(), err193); }
  p.QueryId = v192
  return err
}

func (p *Query) ReadFieldQueryId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Query) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v194, err195 := iprot.ReadString()
  if err195 != nil { return thrift.NewTProtocolExceptionReadField(2, "queryType", p.ThriftName(), err195); }
  p.QueryType = v194
  return err
}

func (p *Query) ReadFieldQueryType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Query) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype199, _vtype200, _size198, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.QueryAttributes", "", err)
  }
  p.QueryAttributes = thrift.NewTMap(_ktype199, _vtype200, _size198)
  for _i202:= 0; _i202 < _size198; _i202++ {
    v205, err206 := iprot.ReadString()
    if err206 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key203", "", err206); }
    _key203 := v205
    v207, err208 := iprot.ReadString()
    if err208 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val204", "", err208); }
    _val204 := v207
    p.QueryAttributes.Set(_key203, _val204)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Query) ReadFieldQueryAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Query) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype212, _vtype213, _size211, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.QueryCounters", "", err)
  }
  p.QueryCounters = thrift.NewTMap(_ktype212, _vtype213, _size211)
  for _i215:= 0; _i215 < _size211; _i215++ {
    v218, err219 := iprot.ReadString()
    if err219 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key216", "", err219); }
    _key216 := v218
    v220, err221 := iprot.ReadI64()
    if err221 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val217", "", err221); }
    _val217 := v220
    p.QueryCounters.Set(_key216, _val217)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Query) ReadFieldQueryCounters(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Query) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.StageGraph = NewGraph()
  err224 := p.StageGraph.Read(iprot)
  if err224 != nil { return thrift.NewTProtocolExceptionReadStruct("p.StageGraphGraph", err224); }
  return err
}

func (p *Query) ReadFieldStageGraph(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *Query) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype230, _size227, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.StageList", "", err)
  }
  p.StageList = thrift.NewTList(_etype230, _size227)
  for _i231:= 0; _i231 < _size227; _i231++ {
    _elem232 := NewStage()
    err235 := _elem232.Read(iprot)
    if err235 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem232Stage", err235); }
    p.StageList.Push(_elem232)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Query) ReadFieldStageList(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *Query) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v236, err237 := iprot.ReadBool()
  if err237 != nil { return thrift.NewTProtocolExceptionReadField(7, "done", p.ThriftName(), err237); }
  p.Done = v236
  return err
}

func (p *Query) ReadFieldDone(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *Query) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v238, err239 := iprot.ReadBool()
  if err239 != nil { return thrift.NewTProtocolExceptionReadField(8, "started", p.ThriftName(), err239); }
  p.Started = v238
  return err
}

func (p *Query) ReadFieldStarted(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *Query) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Query")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Query) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.QueryId) < 1 { return nil}
  err = oprot.WriteFieldBegin("queryId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "queryId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.QueryId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "queryId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "queryId", p.ThriftName(), err); }
  return err
}

func (p *Query) WriteFieldQueryId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Query) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.QueryType) < 1 { return nil}
  err = oprot.WriteFieldBegin("queryType", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "queryType", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.QueryType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "queryType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "queryType", p.ThriftName(), err); }
  return err
}

func (p *Query) WriteFieldQueryType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Query) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.QueryAttributes != nil {
    err = oprot.WriteFieldBegin("queryAttributes", thrift.MAP, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "queryAttributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.QueryAttributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter240 := range p.QueryAttributes.Iter() {
      Kiter241, Viter242 := Miter240.Key().(string), Miter240.Value().(string)
      err = oprot.WriteString(string(Kiter241))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter241", "", err); }
      err = oprot.WriteString(string(Viter242))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter242", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "queryAttributes", p.ThriftName(), err); }
  }
  return err
}

func (p *Query) WriteFieldQueryAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Query) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.QueryCounters != nil {
    err = oprot.WriteFieldBegin("queryCounters", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "queryCounters", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.I64, p.QueryCounters.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter243 := range p.QueryCounters.Iter() {
      Kiter244, Viter245 := Miter243.Key().(string), Miter243.Value().(int64)
      err = oprot.WriteString(string(Kiter244))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter244", "", err); }
      err = oprot.WriteI64(int64(Viter245))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter245", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "queryCounters", p.ThriftName(), err); }
  }
  return err
}

func (p *Query) WriteFieldQueryCounters(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Query) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.StageGraph != nil {
    err = oprot.WriteFieldBegin("stageGraph", thrift.STRUCT, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "stageGraph", p.ThriftName(), err); }
    err = p.StageGraph.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Graph", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "stageGraph", p.ThriftName(), err); }
  }
  return err
}

func (p *Query) WriteFieldStageGraph(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *Query) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.StageList != nil {
    err = oprot.WriteFieldBegin("stageList", thrift.LIST, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "stageList", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.StageList.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter246 := range p.StageList.Iter() {
      Iter247 := Iter246.(*Stage)
      err = Iter247.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Stage", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "stageList", p.ThriftName(), err); }
  }
  return err
}

func (p *Query) WriteFieldStageList(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *Query) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("done", thrift.BOOL, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "done", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Done))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "done", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "done", p.ThriftName(), err); }
  return err
}

func (p *Query) WriteFieldDone(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *Query) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("started", thrift.BOOL, 8)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "started", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Started))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "started", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "started", p.ThriftName(), err); }
  return err
}

func (p *Query) WriteFieldStarted(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *Query) TStructName() string {
  return "Query"
}

func (p *Query) ThriftName() string {
  return "Query"
}

func (p *Query) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Query(%+v)", *p)
}

func (p *Query) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Query)
  if !ok {
    return 0, false
  }
  if p.QueryId != data.QueryId {
    if p.QueryId < data.QueryId {
      return -1, true
    }
    return 1, true
  }
  if p.QueryType != data.QueryType {
    if p.QueryType < data.QueryType {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.QueryAttributes.CompareTo(data.QueryAttributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.QueryCounters.CompareTo(data.QueryCounters); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.StageGraph.CompareTo(data.StageGraph); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.StageList.CompareTo(data.StageList); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.Done, data.Done); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.Started, data.Started); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *Query) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.QueryId
  case 2: return p.QueryType
  case 3: return p.QueryAttributes
  case 4: return p.QueryCounters
  case 5: return p.StageGraph
  case 6: return p.StageList
  case 7: return p.Done
  case 8: return p.Started
  }
  return nil
}

func (p *Query) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("queryId", thrift.STRING, 1),
    thrift.NewTField("queryType", thrift.STRING, 2),
    thrift.NewTField("queryAttributes", thrift.MAP, 3),
    thrift.NewTField("queryCounters", thrift.MAP, 4),
    thrift.NewTField("stageGraph", thrift.STRUCT, 5),
    thrift.NewTField("stageList", thrift.LIST, 6),
    thrift.NewTField("done", thrift.BOOL, 7),
    thrift.NewTField("started", thrift.BOOL, 8),
    })
}

/**
 * Attributes:
 *  - Queries
 *  - Done
 *  - Started
 */
type QueryPlan struct {
  thrift.TStruct
  Queries thrift.TList "queries"; // 1
  Done bool "done"; // 2
  Started bool "started"; // 3
}

func NewQueryPlan() *QueryPlan {
  output := &QueryPlan{
    TStruct:thrift.NewTStruct("QueryPlan", []thrift.TField{
    thrift.NewTField("queries", thrift.LIST, 1),
    thrift.NewTField("done", thrift.BOOL, 2),
    thrift.NewTField("started", thrift.BOOL, 3),
    }),
  }
  {
  }
  return output
}

func (p *QueryPlan) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "queries" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "done" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "started" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *QueryPlan) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype253, _size250, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Queries", "", err)
  }
  p.Queries = thrift.NewTList(_etype253, _size250)
  for _i254:= 0; _i254 < _size250; _i254++ {
    _elem255 := NewQuery()
    err258 := _elem255.Read(iprot)
    if err258 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem255Query", err258); }
    p.Queries.Push(_elem255)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *QueryPlan) ReadFieldQueries(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *QueryPlan) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v259, err260 := iprot.ReadBool()
  if err260 != nil { return thrift.NewTProtocolExceptionReadField(2, "done", p.ThriftName(), err260); }
  p.Done = v259
  return err
}

func (p *QueryPlan) ReadFieldDone(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *QueryPlan) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v261, err262 := iprot.ReadBool()
  if err262 != nil { return thrift.NewTProtocolExceptionReadField(3, "started", p.ThriftName(), err262); }
  p.Started = v261
  return err
}

func (p *QueryPlan) ReadFieldStarted(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *QueryPlan) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("QueryPlan")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *QueryPlan) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Queries != nil {
    err = oprot.WriteFieldBegin("queries", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "queries", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Queries.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter263 := range p.Queries.Iter() {
      Iter264 := Iter263.(*Query)
      err = Iter264.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Query", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "queries", p.ThriftName(), err); }
  }
  return err
}

func (p *QueryPlan) WriteFieldQueries(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *QueryPlan) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("done", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "done", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Done))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "done", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "done", p.ThriftName(), err); }
  return err
}

func (p *QueryPlan) WriteFieldDone(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *QueryPlan) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("started", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "started", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Started))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "started", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "started", p.ThriftName(), err); }
  return err
}

func (p *QueryPlan) WriteFieldStarted(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *QueryPlan) TStructName() string {
  return "QueryPlan"
}

func (p *QueryPlan) ThriftName() string {
  return "QueryPlan"
}

func (p *QueryPlan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryPlan(%+v)", *p)
}

func (p *QueryPlan) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*QueryPlan)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Queries.CompareTo(data.Queries); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.Done, data.Done); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.Started, data.Started); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *QueryPlan) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Queries
  case 2: return p.Done
  case 3: return p.Started
  }
  return nil
}

func (p *QueryPlan) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("queries", thrift.LIST, 1),
    thrift.NewTField("done", thrift.BOOL, 2),
    thrift.NewTField("started", thrift.BOOL, 3),
    })
}

func init() {
}

