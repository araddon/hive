/* Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cdh3u3;

import (
        "thrift"
        "fmt"
)

import "github.com/araddon/hive/thriftlib/hive_metastore"
import "github.com/araddon/hive/thriftlib/queryplan"

type IThriftHive interface {
  hive_metastore.IThriftHiveMetastore

  /**
   * Parameters:
   *  - Query
   */
  Execute(query string) (ex *HiveServerException, err error)
  FetchOne() (retval19 string, ex *HiveServerException, err error)
  /**
   * Parameters:
   *  - NumRows
   */
  FetchN(numRows int32) (retval20 thrift.TList, ex *HiveServerException, err error)
  FetchAll() (retval21 thrift.TList, ex *HiveServerException, err error)
  GetSchema2() (retval22 *hive_metastore.Schema, ex *HiveServerException, err error)
  GetThriftSchema() (retval23 *hive_metastore.Schema, ex *HiveServerException, err error)
  GetClusterStatus() (retval24 *HiveClusterStatus, ex *HiveServerException, err error)
  GetQueryPlan() (retval25 *queryplan.QueryPlan, ex *HiveServerException, err error)
  Clean() (err error)
}

type ThriftHiveClient struct {
  *hive_metastore.ThriftHiveMetastoreClient
}

func NewThriftHiveClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftHiveClient {
  return &ThriftHiveClient{hive_metastore.ThriftHiveMetastoreClient: hive_metastore.NewThriftHiveMetastoreClientFactory(t, f)}
}

func NewThriftHiveClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftHiveClient {
  return &ThriftHiveClient{hive_metastore.ThriftHiveMetastoreClient: hive_metastore.NewThriftHiveMetastoreClientProtocol(t, iprot, oprot)}
}

/**
 * Parameters:
 *  - Query
 */
func (p *ThriftHiveClient) Execute(query string) (ex *HiveServerException, err error) {
  err = p.SendExecute(query)
  if err != nil { return }
  return p.RecvExecute()
}

func (p *ThriftHiveClient) SendExecute(query string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("execute", thrift.CALL, p.SeqId)
  args28 := NewExecuteArgs()
  args28.Query = query
  err = args28.Write(oprot)
  oprot.WriteMessageEnd()
  fmt.Println("about to send transport flush on execuite in thrifthive.go 71")
  oprot.Transport().Flush()
  fmt.Println("after send transport flush on execuite in thrifthive.go 73")
  return
}


func (p *ThriftHiveClient) RecvExecute() (ex *HiveServerException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  fmt.Println("before read message begin in thrifthive.go 84")
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  fmt.Println("after read message begin in thrifthive.go 86")
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error30 := thrift.NewTApplicationExceptionDefault()
    error31, er := error30.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error31
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result29 := NewExecuteResult()
  err = result29.Read(iprot)
  iprot.ReadMessageEnd()
  if result29.Ex != nil {
    ex = result29.Ex
  }
  return
}

func (p *ThriftHiveClient) FetchOne() (retval32 string, ex *HiveServerException, err error) {
  err = p.SendFetchOne()
  if err != nil { return }
  return p.RecvFetchOne()
}

func (p *ThriftHiveClient) SendFetchOne()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("fetchOne", thrift.CALL, p.SeqId)
  args33 := NewFetchOneArgs()
  err = args33.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveClient) RecvFetchOne() (value string, ex *HiveServerException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error35 := thrift.NewTApplicationExceptionDefault()
    error36, er := error35.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error36
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result34 := NewFetchOneResult()
  err = result34.Read(iprot)
  iprot.ReadMessageEnd()
  value = result34.Success
  if result34.Ex != nil {
    ex = result34.Ex
  }
  return
}

/**
 * Parameters:
 *  - NumRows
 */
func (p *ThriftHiveClient) FetchN(numRows int32) (retval37 thrift.TList, ex *HiveServerException, err error) {
  err = p.SendFetchN(numRows)
  if err != nil { return }
  return p.RecvFetchN()
}

func (p *ThriftHiveClient) SendFetchN(numRows int32)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("fetchN", thrift.CALL, p.SeqId)
  args38 := NewFetchNArgs()
  args38.NumRows = numRows
  err = args38.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveClient) RecvFetchN() (value thrift.TList, ex *HiveServerException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewTApplicationExceptionDefault()
    error41, er := error40.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error41
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result39 := NewFetchNResult()
  err = result39.Read(iprot)
  iprot.ReadMessageEnd()
  value = result39.Success
  if result39.Ex != nil {
    ex = result39.Ex
  }
  return
}

func (p *ThriftHiveClient) FetchAll() (retval42 thrift.TList, ex *HiveServerException, err error) {
  err = p.SendFetchAll()
  if err != nil { return }
  return p.RecvFetchAll()
}

func (p *ThriftHiveClient) SendFetchAll()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("fetchAll", thrift.CALL, p.SeqId)
  args43 := NewFetchAllArgs()
  err = args43.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveClient) RecvFetchAll() (value thrift.TList, ex *HiveServerException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error45 := thrift.NewTApplicationExceptionDefault()
    error46, er := error45.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error46
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result44 := NewFetchAllResult()
  err = result44.Read(iprot)
  iprot.ReadMessageEnd()
  value = result44.Success
  if result44.Ex != nil {
    ex = result44.Ex
  }
  return
}

func (p *ThriftHiveClient) GetSchema2() (retval47 *hive_metastore.Schema, ex *HiveServerException, err error) {
  err = p.SendGetSchema()
  if err != nil { return }
  return p.RecvGetSchema()
}

func (p *ThriftHiveClient) SendGetSchema()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getSchema", thrift.CALL, p.SeqId)
  args48 := NewGetSchemaArgs()
  err = args48.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveClient) RecvGetSchema() (value *hive_metastore.Schema, ex *HiveServerException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error50 := thrift.NewTApplicationExceptionDefault()
    error51, er := error50.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error51
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result49 := NewGetSchemaResult()
  err = result49.Read(iprot)
  iprot.ReadMessageEnd()
  value = result49.Success
  if result49.Ex != nil {
    ex = result49.Ex
  }
  return
}

func (p *ThriftHiveClient) GetThriftSchema() (retval52 *hive_metastore.Schema, ex *HiveServerException, err error) {
  err = p.SendGetThriftSchema()
  if err != nil { return }
  return p.RecvGetThriftSchema()
}

func (p *ThriftHiveClient) SendGetThriftSchema()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getThriftSchema", thrift.CALL, p.SeqId)
  args53 := NewGetThriftSchemaArgs()
  err = args53.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveClient) RecvGetThriftSchema() (value *hive_metastore.Schema, ex *HiveServerException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error55 := thrift.NewTApplicationExceptionDefault()
    error56, er := error55.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error56
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result54 := NewGetThriftSchemaResult()
  err = result54.Read(iprot)
  iprot.ReadMessageEnd()
  value = result54.Success
  if result54.Ex != nil {
    ex = result54.Ex
  }
  return
}

func (p *ThriftHiveClient) GetClusterStatus() (retval57 *HiveClusterStatus, ex *HiveServerException, err error) {
  err = p.SendGetClusterStatus()
  if err != nil { return }
  return p.RecvGetClusterStatus()
}

func (p *ThriftHiveClient) SendGetClusterStatus()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getClusterStatus", thrift.CALL, p.SeqId)
  args58 := NewGetClusterStatusArgs()
  err = args58.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveClient) RecvGetClusterStatus() (value *HiveClusterStatus, ex *HiveServerException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error60 := thrift.NewTApplicationExceptionDefault()
    error61, er := error60.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error61
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result59 := NewGetClusterStatusResult()
  err = result59.Read(iprot)
  iprot.ReadMessageEnd()
  value = result59.Success
  if result59.Ex != nil {
    ex = result59.Ex
  }
  return
}

func (p *ThriftHiveClient) GetQueryPlan() (retval62 *queryplan.QueryPlan, ex *HiveServerException, err error) {
  err = p.SendGetQueryPlan()
  if err != nil { return }
  return p.RecvGetQueryPlan()
}

func (p *ThriftHiveClient) SendGetQueryPlan()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getQueryPlan", thrift.CALL, p.SeqId)
  args63 := NewGetQueryPlanArgs()
  err = args63.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveClient) RecvGetQueryPlan() (value *queryplan.QueryPlan, ex *HiveServerException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error65 := thrift.NewTApplicationExceptionDefault()
    error66, er := error65.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error66
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result64 := NewGetQueryPlanResult()
  err = result64.Read(iprot)
  iprot.ReadMessageEnd()
  value = result64.Success
  if result64.Ex != nil {
    ex = result64.Ex
  }
  return
}

func (p *ThriftHiveClient) Clean() (err error) {
  err = p.SendClean()
  if err != nil { return }
  return p.RecvClean()
}

func (p *ThriftHiveClient) SendClean()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("clean", thrift.CALL, p.SeqId)
  args68 := NewCleanArgs()
  err = args68.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveClient) RecvClean() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error70 := thrift.NewTApplicationExceptionDefault()
    error71, er := error70.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error71
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result69 := NewCleanResult()
  err = result69.Read(iprot)
  iprot.ReadMessageEnd()
  return
}


type ThriftHiveProcessor struct {
  super *hive_metastore.ThriftHiveMetastoreProcessor
}

func (p *ThriftHiveProcessor) Handler() IThriftHive {
  return p.super.Handler().(IThriftHive)
}

func (p *ThriftHiveProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.super.AddToProcessorMap(key, processor)
}

func (p *ThriftHiveProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  return p.super.GetProcessorFunction(key)
}

func (p *ThriftHiveProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.super.ProcessorMap()
}

func NewThriftHiveProcessor(handler IThriftHive) *ThriftHiveProcessor {
  self72 := &ThriftHiveProcessor{super: hive_metastore.NewThriftHiveMetastoreProcessor(handler)}
  self72.AddToProcessorMap("execute", &thriftHiveProcessorExecute{handler:handler})
  self72.AddToProcessorMap("fetchOne", &thriftHiveProcessorFetchOne{handler:handler})
  self72.AddToProcessorMap("fetchN", &thriftHiveProcessorFetchN{handler:handler})
  self72.AddToProcessorMap("fetchAll", &thriftHiveProcessorFetchAll{handler:handler})
  self72.AddToProcessorMap("getSchema", &thriftHiveProcessorGetSchema{handler:handler})
  self72.AddToProcessorMap("getThriftSchema", &thriftHiveProcessorGetThriftSchema{handler:handler})
  self72.AddToProcessorMap("getClusterStatus", &thriftHiveProcessorGetClusterStatus{handler:handler})
  self72.AddToProcessorMap("getQueryPlan", &thriftHiveProcessorGetQueryPlan{handler:handler})
  self72.AddToProcessorMap("clean", &thriftHiveProcessorClean{handler:handler})
  return self72
}

func (p *ThriftHiveProcessor) Process(iprot, oprot thrift.TProtocol) (bool, thrift.TException) {
  return p.super.Process(iprot, oprot)
}

type thriftHiveProcessorExecute struct {
  handler IThriftHive
}

func (p *thriftHiveProcessorExecute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewExecuteArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewExecuteResult()
  if result.Ex, err = p.handler.Execute(args.Query); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: " + err.Error())
    oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("execute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorFetchOne struct {
  handler IThriftHive
}

func (p *thriftHiveProcessorFetchOne) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewFetchOneArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchOne", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewFetchOneResult()
  if result.Success, result.Ex, err = p.handler.FetchOne(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOne: " + err.Error())
    oprot.WriteMessageBegin("fetchOne", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("fetchOne", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorFetchN struct {
  handler IThriftHive
}

func (p *thriftHiveProcessorFetchN) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewFetchNArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchN", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewFetchNResult()
  if result.Success, result.Ex, err = p.handler.FetchN(args.NumRows); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchN: " + err.Error())
    oprot.WriteMessageBegin("fetchN", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("fetchN", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorFetchAll struct {
  handler IThriftHive
}

func (p *thriftHiveProcessorFetchAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewFetchAllArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewFetchAllResult()
  if result.Success, result.Ex, err = p.handler.FetchAll(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchAll: " + err.Error())
    oprot.WriteMessageBegin("fetchAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("fetchAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorGetSchema struct {
  handler IThriftHive
}

func (p *thriftHiveProcessorGetSchema) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSchemaArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSchemaResult()
  if result.Success, result.Ex, err = p.handler.GetSchema2(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSchema: " + err.Error())
    oprot.WriteMessageBegin("getSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getSchema", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorGetThriftSchema struct {
  handler IThriftHive
}

func (p *thriftHiveProcessorGetThriftSchema) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetThriftSchemaArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getThriftSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetThriftSchemaResult()
  if result.Success, result.Ex, err = p.handler.GetThriftSchema(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getThriftSchema: " + err.Error())
    oprot.WriteMessageBegin("getThriftSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getThriftSchema", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorGetClusterStatus struct {
  handler IThriftHive
}

func (p *thriftHiveProcessorGetClusterStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetClusterStatusArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getClusterStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetClusterStatusResult()
  if result.Success, result.Ex, err = p.handler.GetClusterStatus(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClusterStatus: " + err.Error())
    oprot.WriteMessageBegin("getClusterStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getClusterStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorGetQueryPlan struct {
  handler IThriftHive
}

func (p *thriftHiveProcessorGetQueryPlan) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetQueryPlanArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getQueryPlan", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetQueryPlanResult()
  if result.Success, result.Ex, err = p.handler.GetQueryPlan(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueryPlan: " + err.Error())
    oprot.WriteMessageBegin("getQueryPlan", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getQueryPlan", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorClean struct {
  handler IThriftHive
}

func (p *thriftHiveProcessorClean) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCleanArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clean", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCleanResult()
  if err = p.handler.Clean(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clean: " + err.Error())
    oprot.WriteMessageBegin("clean", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("clean", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - Query
 */
type ExecuteArgs struct {
  thrift.TStruct
  Query string "query"; // 1
}

func NewExecuteArgs() *ExecuteArgs {
  output := &ExecuteArgs{
    TStruct:thrift.NewTStruct("execute_args", []thrift.TField{
    thrift.NewTField("query", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *ExecuteArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "query" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ExecuteArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v73, err74 := iprot.ReadString()
  if err74 != nil { return thrift.NewTProtocolExceptionReadField(1, "query", p.ThriftName(), err74); }
  p.Query = v73
  return err
}

func (p *ExecuteArgs) ReadFieldQuery(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ExecuteArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("execute_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ExecuteArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Query) < 1 { return nil}
  err = oprot.WriteFieldBegin("query", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Query))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "query", p.ThriftName(), err); }
  return err
}

func (p *ExecuteArgs) WriteFieldQuery(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ExecuteArgs) TStructName() string {
  return "ExecuteArgs"
}

func (p *ExecuteArgs) ThriftName() string {
  return "execute_args"
}

func (p *ExecuteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecuteArgs(%+v)", *p)
}

func (p *ExecuteArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ExecuteArgs)
  if !ok {
    return 0, false
  }
  if p.Query != data.Query {
    if p.Query < data.Query {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ExecuteArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Query
  }
  return nil
}

func (p *ExecuteArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("query", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Ex
 */
type ExecuteResult struct {
  thrift.TStruct
  Ex *HiveServerException "ex"; // 1
}

func NewExecuteResult() *ExecuteResult {
  output := &ExecuteResult{
    TStruct:thrift.NewTStruct("execute_result", []thrift.TField{
    thrift.NewTField("ex", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ExecuteResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ex" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ExecuteResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex = NewHiveServerException()
  err77 := p.Ex.Read(iprot)
  if err77 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExHiveServerException", err77); }
  return err
}

func (p *ExecuteResult) ReadFieldEx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ExecuteResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("execute_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ExecuteResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex != nil {
    err = oprot.WriteFieldBegin("ex", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
    err = p.Ex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveServerException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
  }
  return err
}

func (p *ExecuteResult) WriteFieldEx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ExecuteResult) TStructName() string {
  return "ExecuteResult"
}

func (p *ExecuteResult) ThriftName() string {
  return "execute_result"
}

func (p *ExecuteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecuteResult(%+v)", *p)
}

func (p *ExecuteResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ExecuteResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ex.CompareTo(data.Ex); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ExecuteResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ex
  }
  return nil
}

func (p *ExecuteResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ex", thrift.STRUCT, 1),
    })
}

type FetchOneArgs struct {
  thrift.TStruct
}

func NewFetchOneArgs() *FetchOneArgs {
  output := &FetchOneArgs{
    TStruct:thrift.NewTStruct("fetchOne_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *FetchOneArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchOneArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("fetchOne_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchOneArgs) TStructName() string {
  return "FetchOneArgs"
}

func (p *FetchOneArgs) ThriftName() string {
  return "fetchOne_args"
}

func (p *FetchOneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchOneArgs(%+v)", *p)
}

func (p *FetchOneArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*FetchOneArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *FetchOneArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *FetchOneArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex
 */
type FetchOneResult struct {
  thrift.TStruct
  Success string "success"; // 0
  Ex *HiveServerException "ex"; // 1
}

func NewFetchOneResult() *FetchOneResult {
  output := &FetchOneResult{
    TStruct:thrift.NewTStruct("fetchOne_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *FetchOneResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchOneResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v78, err79 := iprot.ReadString()
  if err79 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err79); }
  p.Success = v78
  return err
}

func (p *FetchOneResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *FetchOneResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex = NewHiveServerException()
  err82 := p.Ex.Read(iprot)
  if err82 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExHiveServerException", err82); }
  return err
}

func (p *FetchOneResult) ReadFieldEx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *FetchOneResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("fetchOne_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchOneResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Success) < 1 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *FetchOneResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *FetchOneResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex != nil {
    err = oprot.WriteFieldBegin("ex", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
    err = p.Ex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveServerException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
  }
  return err
}

func (p *FetchOneResult) WriteFieldEx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *FetchOneResult) TStructName() string {
  return "FetchOneResult"
}

func (p *FetchOneResult) ThriftName() string {
  return "fetchOne_result"
}

func (p *FetchOneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchOneResult(%+v)", *p)
}

func (p *FetchOneResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*FetchOneResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Ex.CompareTo(data.Ex); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *FetchOneResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex
  }
  return nil
}

func (p *FetchOneResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - NumRows
 */
type FetchNArgs struct {
  thrift.TStruct
  NumRows int32 "numRows"; // 1
}

func NewFetchNArgs() *FetchNArgs {
  output := &FetchNArgs{
    TStruct:thrift.NewTStruct("fetchN_args", []thrift.TField{
    thrift.NewTField("numRows", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *FetchNArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "numRows" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchNArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v83, err84 := iprot.ReadI32()
  if err84 != nil { return thrift.NewTProtocolExceptionReadField(1, "numRows", p.ThriftName(), err84); }
  p.NumRows = v83
  return err
}

func (p *FetchNArgs) ReadFieldNumRows(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *FetchNArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("fetchN_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchNArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.NumRows) == 0 { return nil}
  err = oprot.WriteFieldBegin("numRows", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "numRows", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NumRows))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "numRows", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "numRows", p.ThriftName(), err); }
  return err
}

func (p *FetchNArgs) WriteFieldNumRows(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *FetchNArgs) TStructName() string {
  return "FetchNArgs"
}

func (p *FetchNArgs) ThriftName() string {
  return "fetchN_args"
}

func (p *FetchNArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchNArgs(%+v)", *p)
}

func (p *FetchNArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*FetchNArgs)
  if !ok {
    return 0, false
  }
  if p.NumRows != data.NumRows {
    if p.NumRows < data.NumRows {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *FetchNArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.NumRows
  }
  return nil
}

func (p *FetchNArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("numRows", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex
 */
type FetchNResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Ex *HiveServerException "ex"; // 1
}

func NewFetchNResult() *FetchNResult {
  output := &FetchNResult{
    TStruct:thrift.NewTStruct("fetchN_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *FetchNResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchNResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype90, _size87, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype90, _size87)
  for _i91:= 0; _i91 < _size87; _i91++ {
    v93, err94 := iprot.ReadString()
    if err94 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem92", "", err94); }
    _elem92 := v93
    p.Success.Push(_elem92)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *FetchNResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *FetchNResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex = NewHiveServerException()
  err97 := p.Ex.Read(iprot)
  if err97 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExHiveServerException", err97); }
  return err
}

func (p *FetchNResult) ReadFieldEx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *FetchNResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("fetchN_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchNResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter98 := range p.Success.Iter() {
      Iter99 := Iter98.(string)
      err = oprot.WriteString(string(Iter99))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter99", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *FetchNResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *FetchNResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex != nil {
    err = oprot.WriteFieldBegin("ex", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
    err = p.Ex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveServerException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
  }
  return err
}

func (p *FetchNResult) WriteFieldEx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *FetchNResult) TStructName() string {
  return "FetchNResult"
}

func (p *FetchNResult) ThriftName() string {
  return "fetchN_result"
}

func (p *FetchNResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchNResult(%+v)", *p)
}

func (p *FetchNResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*FetchNResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex.CompareTo(data.Ex); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *FetchNResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex
  }
  return nil
}

func (p *FetchNResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    })
}

type FetchAllArgs struct {
  thrift.TStruct
}

func NewFetchAllArgs() *FetchAllArgs {
  output := &FetchAllArgs{
    TStruct:thrift.NewTStruct("fetchAll_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *FetchAllArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchAllArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("fetchAll_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchAllArgs) TStructName() string {
  return "FetchAllArgs"
}

func (p *FetchAllArgs) ThriftName() string {
  return "fetchAll_args"
}

func (p *FetchAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchAllArgs(%+v)", *p)
}

func (p *FetchAllArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*FetchAllArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *FetchAllArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *FetchAllArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex
 */
type FetchAllResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Ex *HiveServerException "ex"; // 1
}

func NewFetchAllResult() *FetchAllResult {
  output := &FetchAllResult{
    TStruct:thrift.NewTStruct("fetchAll_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *FetchAllResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchAllResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype105, _size102, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype105, _size102)
  for _i106:= 0; _i106 < _size102; _i106++ {
    v108, err109 := iprot.ReadString()
    if err109 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem107", "", err109); }
    _elem107 := v108
    p.Success.Push(_elem107)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *FetchAllResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *FetchAllResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex = NewHiveServerException()
  err112 := p.Ex.Read(iprot)
  if err112 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExHiveServerException", err112); }
  return err
}

func (p *FetchAllResult) ReadFieldEx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *FetchAllResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("fetchAll_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *FetchAllResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter113 := range p.Success.Iter() {
      Iter114 := Iter113.(string)
      err = oprot.WriteString(string(Iter114))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter114", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *FetchAllResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *FetchAllResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex != nil {
    err = oprot.WriteFieldBegin("ex", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
    err = p.Ex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveServerException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
  }
  return err
}

func (p *FetchAllResult) WriteFieldEx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *FetchAllResult) TStructName() string {
  return "FetchAllResult"
}

func (p *FetchAllResult) ThriftName() string {
  return "fetchAll_result"
}

func (p *FetchAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchAllResult(%+v)", *p)
}

func (p *FetchAllResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*FetchAllResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex.CompareTo(data.Ex); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *FetchAllResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex
  }
  return nil
}

func (p *FetchAllResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    })
}

type GetSchemaArgs struct {
  thrift.TStruct
}

func NewGetSchemaArgs() *GetSchemaArgs {
  output := &GetSchemaArgs{
    TStruct:thrift.NewTStruct("getSchema_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetSchemaArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSchemaArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getSchema_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSchemaArgs) TStructName() string {
  return "GetSchemaArgs"
}

func (p *GetSchemaArgs) ThriftName() string {
  return "getSchema_args"
}

func (p *GetSchemaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSchemaArgs(%+v)", *p)
}

func (p *GetSchemaArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetSchemaArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetSchemaArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetSchemaArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex
 */
type GetSchemaResult struct {
  thrift.TStruct
  Success *hive_metastore.Schema "success"; // 0
  Ex *HiveServerException "ex"; // 1
}

func NewGetSchemaResult() *GetSchemaResult {
  output := &GetSchemaResult{
    TStruct:thrift.NewTStruct("getSchema_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetSchemaResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSchemaResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = hive_metastore.NewSchema()
  err117 := p.Success.Read(iprot)
  if err117 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessSchema", err117); }
  return err
}

func (p *GetSchemaResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSchemaResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex = NewHiveServerException()
  err120 := p.Ex.Read(iprot)
  if err120 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExHiveServerException", err120); }
  return err
}

func (p *GetSchemaResult) ReadFieldEx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSchemaResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getSchema_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSchemaResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Schema", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSchemaResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSchemaResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex != nil {
    err = oprot.WriteFieldBegin("ex", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
    err = p.Ex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveServerException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSchemaResult) WriteFieldEx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSchemaResult) TStructName() string {
  return "GetSchemaResult"
}

func (p *GetSchemaResult) ThriftName() string {
  return "getSchema_result"
}

func (p *GetSchemaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSchemaResult(%+v)", *p)
}

func (p *GetSchemaResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSchemaResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex.CompareTo(data.Ex); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetSchemaResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex
  }
  return nil
}

func (p *GetSchemaResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    })
}

type GetThriftSchemaArgs struct {
  thrift.TStruct
}

func NewGetThriftSchemaArgs() *GetThriftSchemaArgs {
  output := &GetThriftSchemaArgs{
    TStruct:thrift.NewTStruct("getThriftSchema_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetThriftSchemaArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetThriftSchemaArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getThriftSchema_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetThriftSchemaArgs) TStructName() string {
  return "GetThriftSchemaArgs"
}

func (p *GetThriftSchemaArgs) ThriftName() string {
  return "getThriftSchema_args"
}

func (p *GetThriftSchemaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetThriftSchemaArgs(%+v)", *p)
}

func (p *GetThriftSchemaArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetThriftSchemaArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetThriftSchemaArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetThriftSchemaArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex
 */
type GetThriftSchemaResult struct {
  thrift.TStruct
  Success *hive_metastore.Schema "success"; // 0
  Ex *HiveServerException "ex"; // 1
}

func NewGetThriftSchemaResult() *GetThriftSchemaResult {
  output := &GetThriftSchemaResult{
    TStruct:thrift.NewTStruct("getThriftSchema_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetThriftSchemaResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetThriftSchemaResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = hive_metastore.NewSchema()
  err123 := p.Success.Read(iprot)
  if err123 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessSchema", err123); }
  return err
}

func (p *GetThriftSchemaResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetThriftSchemaResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex = NewHiveServerException()
  err126 := p.Ex.Read(iprot)
  if err126 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExHiveServerException", err126); }
  return err
}

func (p *GetThriftSchemaResult) ReadFieldEx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetThriftSchemaResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getThriftSchema_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetThriftSchemaResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Schema", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetThriftSchemaResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetThriftSchemaResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex != nil {
    err = oprot.WriteFieldBegin("ex", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
    err = p.Ex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveServerException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
  }
  return err
}

func (p *GetThriftSchemaResult) WriteFieldEx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetThriftSchemaResult) TStructName() string {
  return "GetThriftSchemaResult"
}

func (p *GetThriftSchemaResult) ThriftName() string {
  return "getThriftSchema_result"
}

func (p *GetThriftSchemaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetThriftSchemaResult(%+v)", *p)
}

func (p *GetThriftSchemaResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetThriftSchemaResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex.CompareTo(data.Ex); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetThriftSchemaResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex
  }
  return nil
}

func (p *GetThriftSchemaResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    })
}

type GetClusterStatusArgs struct {
  thrift.TStruct
}

func NewGetClusterStatusArgs() *GetClusterStatusArgs {
  output := &GetClusterStatusArgs{
    TStruct:thrift.NewTStruct("getClusterStatus_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetClusterStatusArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetClusterStatusArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getClusterStatus_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetClusterStatusArgs) TStructName() string {
  return "GetClusterStatusArgs"
}

func (p *GetClusterStatusArgs) ThriftName() string {
  return "getClusterStatus_args"
}

func (p *GetClusterStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetClusterStatusArgs(%+v)", *p)
}

func (p *GetClusterStatusArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetClusterStatusArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetClusterStatusArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetClusterStatusArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex
 */
type GetClusterStatusResult struct {
  thrift.TStruct
  Success *HiveClusterStatus "success"; // 0
  Ex *HiveServerException "ex"; // 1
}

func NewGetClusterStatusResult() *GetClusterStatusResult {
  output := &GetClusterStatusResult{
    TStruct:thrift.NewTStruct("getClusterStatus_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetClusterStatusResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetClusterStatusResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewHiveClusterStatus()
  err129 := p.Success.Read(iprot)
  if err129 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessHiveClusterStatus", err129); }
  return err
}

func (p *GetClusterStatusResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetClusterStatusResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex = NewHiveServerException()
  err132 := p.Ex.Read(iprot)
  if err132 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExHiveServerException", err132); }
  return err
}

func (p *GetClusterStatusResult) ReadFieldEx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetClusterStatusResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getClusterStatus_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetClusterStatusResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveClusterStatus", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetClusterStatusResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetClusterStatusResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex != nil {
    err = oprot.WriteFieldBegin("ex", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
    err = p.Ex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveServerException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
  }
  return err
}

func (p *GetClusterStatusResult) WriteFieldEx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetClusterStatusResult) TStructName() string {
  return "GetClusterStatusResult"
}

func (p *GetClusterStatusResult) ThriftName() string {
  return "getClusterStatus_result"
}

func (p *GetClusterStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetClusterStatusResult(%+v)", *p)
}

func (p *GetClusterStatusResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetClusterStatusResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex.CompareTo(data.Ex); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetClusterStatusResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex
  }
  return nil
}

func (p *GetClusterStatusResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    })
}

type GetQueryPlanArgs struct {
  thrift.TStruct
}

func NewGetQueryPlanArgs() *GetQueryPlanArgs {
  output := &GetQueryPlanArgs{
    TStruct:thrift.NewTStruct("getQueryPlan_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetQueryPlanArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetQueryPlanArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getQueryPlan_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetQueryPlanArgs) TStructName() string {
  return "GetQueryPlanArgs"
}

func (p *GetQueryPlanArgs) ThriftName() string {
  return "getQueryPlan_args"
}

func (p *GetQueryPlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetQueryPlanArgs(%+v)", *p)
}

func (p *GetQueryPlanArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetQueryPlanArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetQueryPlanArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetQueryPlanArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 *  - Ex
 */
type GetQueryPlanResult struct {
  thrift.TStruct
  Success *queryplan.QueryPlan "success"; // 0
  Ex *HiveServerException "ex"; // 1
}

func NewGetQueryPlanResult() *GetQueryPlanResult {
  output := &GetQueryPlanResult{
    TStruct:thrift.NewTStruct("getQueryPlan_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetQueryPlanResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "ex" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetQueryPlanResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = queryplan.NewQueryPlan()
  err135 := p.Success.Read(iprot)
  if err135 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessQueryPlan", err135); }
  return err
}

func (p *GetQueryPlanResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetQueryPlanResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ex = NewHiveServerException()
  err138 := p.Ex.Read(iprot)
  if err138 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExHiveServerException", err138); }
  return err
}

func (p *GetQueryPlanResult) ReadFieldEx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetQueryPlanResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getQueryPlan_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ex != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetQueryPlanResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("QueryPlan", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetQueryPlanResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetQueryPlanResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ex != nil {
    err = oprot.WriteFieldBegin("ex", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
    err = p.Ex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveServerException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ex", p.ThriftName(), err); }
  }
  return err
}

func (p *GetQueryPlanResult) WriteFieldEx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetQueryPlanResult) TStructName() string {
  return "GetQueryPlanResult"
}

func (p *GetQueryPlanResult) ThriftName() string {
  return "getQueryPlan_result"
}

func (p *GetQueryPlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetQueryPlanResult(%+v)", *p)
}

func (p *GetQueryPlanResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetQueryPlanResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ex.CompareTo(data.Ex); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetQueryPlanResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Ex
  }
  return nil
}

func (p *GetQueryPlanResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("ex", thrift.STRUCT, 1),
    })
}

type CleanArgs struct {
  thrift.TStruct
}

func NewCleanArgs() *CleanArgs {
  output := &CleanArgs{
    TStruct:thrift.NewTStruct("clean_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *CleanArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CleanArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("clean_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CleanArgs) TStructName() string {
  return "CleanArgs"
}

func (p *CleanArgs) ThriftName() string {
  return "clean_args"
}

func (p *CleanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CleanArgs(%+v)", *p)
}

func (p *CleanArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*CleanArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *CleanArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *CleanArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

type CleanResult struct {
  thrift.TStruct
}

func NewCleanResult() *CleanResult {
  output := &CleanResult{
    TStruct:thrift.NewTStruct("clean_result", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *CleanResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CleanResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("clean_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CleanResult) TStructName() string {
  return "CleanResult"
}

func (p *CleanResult) ThriftName() string {
  return "clean_result"
}

func (p *CleanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CleanResult(%+v)", *p)
}

func (p *CleanResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*CleanResult)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *CleanResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *CleanResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}


