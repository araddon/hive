/* Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package hive_metastore;

import (
        "thrift"
        "fmt"
)

//import "thriftlib/fb303"



type HiveObjectType int
const (
  GLOBAL HiveObjectType = 1
  DATABASE HiveObjectType = 2
  TABLE HiveObjectType = 3
  PARTITION HiveObjectType = 4
  COLUMN HiveObjectType = 5
)
func (p HiveObjectType) String() string {
  switch p {
  case GLOBAL: return "GLOBAL"
  case DATABASE: return "DATABASE"
  case TABLE: return "TABLE"
  case PARTITION: return "PARTITION"
  case COLUMN: return "COLUMN"
  }
  return ""
}

func FromHiveObjectTypeString(s string) HiveObjectType {
  switch s {
  case "GLOBAL": return GLOBAL
  case "DATABASE": return DATABASE
  case "TABLE": return TABLE
  case "PARTITION": return PARTITION
  case "COLUMN": return COLUMN
  }
  return HiveObjectType(-10000)
}

func (p HiveObjectType) Value() int {
  return int(p)
}

func (p HiveObjectType) IsEnum() bool {
  return true
}

type PrincipalType int
const (
  USER PrincipalType = 1
  ROLE PrincipalType = 2
  GROUP PrincipalType = 3
)
func (p PrincipalType) String() string {
  switch p {
  case USER: return "USER"
  case ROLE: return "ROLE"
  case GROUP: return "GROUP"
  }
  return ""
}

func FromPrincipalTypeString(s string) PrincipalType {
  switch s {
  case "USER": return USER
  case "ROLE": return ROLE
  case "GROUP": return GROUP
  }
  return PrincipalType(-10000)
}

func (p PrincipalType) Value() int {
  return int(p)
}

func (p PrincipalType) IsEnum() bool {
  return true
}

/**
 * Attributes:
 *  - Version
 *  - Comments
 */
type Version struct {
  thrift.TStruct
  Version string "version"; // 1
  Comments string "comments"; // 2
}

func NewVersion() *Version {
  output := &Version{
    TStruct:thrift.NewTStruct("Version", []thrift.TField{
    thrift.NewTField("version", thrift.STRING, 1),
    thrift.NewTField("comments", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *Version) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "version" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "comments" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Version) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadString()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "version", p.ThriftName(), err1); }
  p.Version = v0
  return err
}

func (p *Version) ReadFieldVersion(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Version) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadString()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "comments", p.ThriftName(), err3); }
  p.Comments = v2
  return err
}

func (p *Version) ReadFieldComments(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Version) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Version")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Version) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Version) < 1 { return nil}
  err = oprot.WriteFieldBegin("version", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Version))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err); }
  return err
}

func (p *Version) WriteFieldVersion(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Version) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Comments) < 1 { return nil}
  err = oprot.WriteFieldBegin("comments", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "comments", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Comments))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "comments", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "comments", p.ThriftName(), err); }
  return err
}

func (p *Version) WriteFieldComments(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Version) TStructName() string {
  return "Version"
}

func (p *Version) ThriftName() string {
  return "Version"
}

func (p *Version) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Version(%+v)", *p)
}

func (p *Version) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Version)
  if !ok {
    return 0, false
  }
  if p.Version != data.Version {
    if p.Version < data.Version {
      return -1, true
    }
    return 1, true
  }
  if p.Comments != data.Comments {
    if p.Comments < data.Comments {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *Version) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Version
  case 2: return p.Comments
  }
  return nil
}

func (p *Version) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("version", thrift.STRING, 1),
    thrift.NewTField("comments", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Name
 *  - TypeA1
 *  - Comment
 */
type FieldSchema struct {
  thrift.TStruct
  Name string "name"; // 1
  TypeA1 string "type"; // 2
  Comment string "comment"; // 3
}

func NewFieldSchema() *FieldSchema {
  output := &FieldSchema{
    TStruct:thrift.NewTStruct("FieldSchema", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("type", thrift.STRING, 2),
    thrift.NewTField("comment", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *FieldSchema) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "type" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "comment" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *FieldSchema) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v4, err5 := iprot.ReadString()
  if err5 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err5); }
  p.Name = v4
  return err
}

func (p *FieldSchema) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *FieldSchema) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v6, err7 := iprot.ReadString()
  if err7 != nil { return thrift.NewTProtocolExceptionReadField(2, "type", p.ThriftName(), err7); }
  p.TypeA1 = v6
  return err
}

func (p *FieldSchema) ReadFieldType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *FieldSchema) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v8, err9 := iprot.ReadString()
  if err9 != nil { return thrift.NewTProtocolExceptionReadField(3, "comment", p.ThriftName(), err9); }
  p.Comment = v8
  return err
}

func (p *FieldSchema) ReadFieldComment(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *FieldSchema) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("FieldSchema")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *FieldSchema) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *FieldSchema) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *FieldSchema) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TypeA1) < 1 { return nil}
  err = oprot.WriteFieldBegin("type", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "type", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TypeA1))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "type", p.ThriftName(), err); }
  return err
}

func (p *FieldSchema) WriteFieldType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *FieldSchema) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Comment) < 1 { return nil}
  err = oprot.WriteFieldBegin("comment", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "comment", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Comment))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "comment", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "comment", p.ThriftName(), err); }
  return err
}

func (p *FieldSchema) WriteFieldComment(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *FieldSchema) TStructName() string {
  return "FieldSchema"
}

func (p *FieldSchema) ThriftName() string {
  return "FieldSchema"
}

func (p *FieldSchema) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FieldSchema(%+v)", *p)
}

func (p *FieldSchema) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*FieldSchema)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  if p.TypeA1 != data.TypeA1 {
    if p.TypeA1 < data.TypeA1 {
      return -1, true
    }
    return 1, true
  }
  if p.Comment != data.Comment {
    if p.Comment < data.Comment {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *FieldSchema) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  case 2: return p.TypeA1
  case 3: return p.Comment
  }
  return nil
}

func (p *FieldSchema) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("type", thrift.STRING, 2),
    thrift.NewTField("comment", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Name
 *  - Type1
 *  - Type2
 *  - Fields
 */
type Type struct {
  thrift.TStruct
  Name string "name"; // 1
  Type1 string "type1"; // 2
  Type2 string "type2"; // 3
  Fields thrift.TList "fields"; // 4
}

func NewType() *Type {
  output := &Type{
    TStruct:thrift.NewTStruct("Type", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("type1", thrift.STRING, 2),
    thrift.NewTField("type2", thrift.STRING, 3),
    thrift.NewTField("fields", thrift.LIST, 4),
    }),
  }
  {
  }
  return output
}

func (p *Type) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "type1" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "type2" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "fields" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Type) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v10, err11 := iprot.ReadString()
  if err11 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err11); }
  p.Name = v10
  return err
}

func (p *Type) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Type) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v12, err13 := iprot.ReadString()
  if err13 != nil { return thrift.NewTProtocolExceptionReadField(2, "type1", p.ThriftName(), err13); }
  p.Type1 = v12
  return err
}

func (p *Type) ReadFieldType1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Type) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v14, err15 := iprot.ReadString()
  if err15 != nil { return thrift.NewTProtocolExceptionReadField(3, "type2", p.ThriftName(), err15); }
  p.Type2 = v14
  return err
}

func (p *Type) ReadFieldType2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Type) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype21, _size18, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Fields", "", err)
  }
  p.Fields = thrift.NewTList(_etype21, _size18)
  for _i22:= 0; _i22 < _size18; _i22++ {
    _elem23 := NewFieldSchema()
    err26 := _elem23.Read(iprot)
    if err26 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem23FieldSchema", err26); }
    p.Fields.Push(_elem23)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Type) ReadFieldFields(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Type) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Type")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Type) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *Type) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Type) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Type1) < 1 { return nil}
  err = oprot.WriteFieldBegin("type1", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "type1", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Type1))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "type1", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "type1", p.ThriftName(), err); }
  return err
}

func (p *Type) WriteFieldType1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Type) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Type2) < 1 { return nil}
  err = oprot.WriteFieldBegin("type2", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "type2", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Type2))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "type2", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "type2", p.ThriftName(), err); }
  return err
}

func (p *Type) WriteFieldType2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Type) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Fields != nil {
    err = oprot.WriteFieldBegin("fields", thrift.LIST, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "fields", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Fields.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter27 := range p.Fields.Iter() {
      Iter28 := Iter27.(*FieldSchema)
      err = Iter28.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("FieldSchema", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "fields", p.ThriftName(), err); }
  }
  return err
}

func (p *Type) WriteFieldFields(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Type) TStructName() string {
  return "Type"
}

func (p *Type) ThriftName() string {
  return "Type"
}

func (p *Type) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Type(%+v)", *p)
}

func (p *Type) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Type)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  if p.Type1 != data.Type1 {
    if p.Type1 < data.Type1 {
      return -1, true
    }
    return 1, true
  }
  if p.Type2 != data.Type2 {
    if p.Type2 < data.Type2 {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Fields.CompareTo(data.Fields); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *Type) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  case 2: return p.Type1
  case 3: return p.Type2
  case 4: return p.Fields
  }
  return nil
}

func (p *Type) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("type1", thrift.STRING, 2),
    thrift.NewTField("type2", thrift.STRING, 3),
    thrift.NewTField("fields", thrift.LIST, 4),
    })
}

/**
 * Attributes:
 *  - ObjectType
 *  - DbName
 *  - ObjectName
 *  - PartValues
 *  - ColumnName
 */
type HiveObjectRef struct {
  thrift.TStruct
  ObjectType HiveObjectType "objectType"; // 1
  DbName string "dbName"; // 2
  ObjectName string "objectName"; // 3
  PartValues thrift.TList "partValues"; // 4
  ColumnName string "columnName"; // 5
}

func NewHiveObjectRef() *HiveObjectRef {
  output := &HiveObjectRef{
    TStruct:thrift.NewTStruct("HiveObjectRef", []thrift.TField{
    thrift.NewTField("objectType", thrift.I32, 1),
    thrift.NewTField("dbName", thrift.STRING, 2),
    thrift.NewTField("objectName", thrift.STRING, 3),
    thrift.NewTField("partValues", thrift.LIST, 4),
    thrift.NewTField("columnName", thrift.STRING, 5),
    }),
  }
  {
  }
  return output
}

func (p *HiveObjectRef) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "objectType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "dbName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "objectName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "partValues" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "columnName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *HiveObjectRef) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v29, err30 := iprot.ReadI32()
  if err30 != nil { return thrift.NewTProtocolExceptionReadField(1, "objectType", p.ThriftName(), err30); }
  p.ObjectType = HiveObjectType(v29)
  return err
}

func (p *HiveObjectRef) ReadFieldObjectType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *HiveObjectRef) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v31, err32 := iprot.ReadString()
  if err32 != nil { return thrift.NewTProtocolExceptionReadField(2, "dbName", p.ThriftName(), err32); }
  p.DbName = v31
  return err
}

func (p *HiveObjectRef) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *HiveObjectRef) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v33, err34 := iprot.ReadString()
  if err34 != nil { return thrift.NewTProtocolExceptionReadField(3, "objectName", p.ThriftName(), err34); }
  p.ObjectName = v33
  return err
}

func (p *HiveObjectRef) ReadFieldObjectName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *HiveObjectRef) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype40, _size37, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PartValues", "", err)
  }
  p.PartValues = thrift.NewTList(_etype40, _size37)
  for _i41:= 0; _i41 < _size37; _i41++ {
    v43, err44 := iprot.ReadString()
    if err44 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem42", "", err44); }
    _elem42 := v43
    p.PartValues.Push(_elem42)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *HiveObjectRef) ReadFieldPartValues(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *HiveObjectRef) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v45, err46 := iprot.ReadString()
  if err46 != nil { return thrift.NewTProtocolExceptionReadField(5, "columnName", p.ThriftName(), err46); }
  p.ColumnName = v45
  return err
}

func (p *HiveObjectRef) ReadFieldColumnName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *HiveObjectRef) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("HiveObjectRef")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *HiveObjectRef) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("objectType", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "objectType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.ObjectType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "objectType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "objectType", p.ThriftName(), err); }
  return err
}

func (p *HiveObjectRef) WriteFieldObjectType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *HiveObjectRef) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("dbName", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dbName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dbName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dbName", p.ThriftName(), err); }
  return err
}

func (p *HiveObjectRef) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *HiveObjectRef) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.ObjectName) < 1 { return nil}
  err = oprot.WriteFieldBegin("objectName", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "objectName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ObjectName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "objectName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "objectName", p.ThriftName(), err); }
  return err
}

func (p *HiveObjectRef) WriteFieldObjectName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *HiveObjectRef) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PartValues != nil {
    err = oprot.WriteFieldBegin("partValues", thrift.LIST, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "partValues", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.PartValues.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter47 := range p.PartValues.Iter() {
      Iter48 := Iter47.(string)
      err = oprot.WriteString(string(Iter48))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter48", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "partValues", p.ThriftName(), err); }
  }
  return err
}

func (p *HiveObjectRef) WriteFieldPartValues(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *HiveObjectRef) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.ColumnName) < 1 { return nil}
  err = oprot.WriteFieldBegin("columnName", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "columnName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ColumnName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "columnName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "columnName", p.ThriftName(), err); }
  return err
}

func (p *HiveObjectRef) WriteFieldColumnName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *HiveObjectRef) TStructName() string {
  return "HiveObjectRef"
}

func (p *HiveObjectRef) ThriftName() string {
  return "HiveObjectRef"
}

func (p *HiveObjectRef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HiveObjectRef(%+v)", *p)
}

func (p *HiveObjectRef) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*HiveObjectRef)
  if !ok {
    return 0, false
  }
  if p.ObjectType != data.ObjectType {
    if p.ObjectType < data.ObjectType {
      return -1, true
    }
    return 1, true
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.ObjectName != data.ObjectName {
    if p.ObjectName < data.ObjectName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.PartValues.CompareTo(data.PartValues); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.ColumnName != data.ColumnName {
    if p.ColumnName < data.ColumnName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *HiveObjectRef) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ObjectType
  case 2: return p.DbName
  case 3: return p.ObjectName
  case 4: return p.PartValues
  case 5: return p.ColumnName
  }
  return nil
}

func (p *HiveObjectRef) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("objectType", thrift.I32, 1),
    thrift.NewTField("dbName", thrift.STRING, 2),
    thrift.NewTField("objectName", thrift.STRING, 3),
    thrift.NewTField("partValues", thrift.LIST, 4),
    thrift.NewTField("columnName", thrift.STRING, 5),
    })
}

/**
 * Attributes:
 *  - Privilege
 *  - CreateTime
 *  - Grantor
 *  - GrantorType
 *  - GrantOption
 */
type PrivilegeGrantInfo struct {
  thrift.TStruct
  Privilege string "privilege"; // 1
  CreateTime int32 "createTime"; // 2
  Grantor string "grantor"; // 3
  GrantorType PrincipalType "grantorType"; // 4
  GrantOption bool "grantOption"; // 5
}

func NewPrivilegeGrantInfo() *PrivilegeGrantInfo {
  output := &PrivilegeGrantInfo{
    TStruct:thrift.NewTStruct("PrivilegeGrantInfo", []thrift.TField{
    thrift.NewTField("privilege", thrift.STRING, 1),
    thrift.NewTField("createTime", thrift.I32, 2),
    thrift.NewTField("grantor", thrift.STRING, 3),
    thrift.NewTField("grantorType", thrift.I32, 4),
    thrift.NewTField("grantOption", thrift.BOOL, 5),
    }),
  }
  {
  }
  return output
}

func (p *PrivilegeGrantInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "privilege" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "createTime" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "grantor" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "grantorType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "grantOption" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PrivilegeGrantInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v49, err50 := iprot.ReadString()
  if err50 != nil { return thrift.NewTProtocolExceptionReadField(1, "privilege", p.ThriftName(), err50); }
  p.Privilege = v49
  return err
}

func (p *PrivilegeGrantInfo) ReadFieldPrivilege(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PrivilegeGrantInfo) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v51, err52 := iprot.ReadI32()
  if err52 != nil { return thrift.NewTProtocolExceptionReadField(2, "createTime", p.ThriftName(), err52); }
  p.CreateTime = v51
  return err
}

func (p *PrivilegeGrantInfo) ReadFieldCreateTime(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PrivilegeGrantInfo) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v53, err54 := iprot.ReadString()
  if err54 != nil { return thrift.NewTProtocolExceptionReadField(3, "grantor", p.ThriftName(), err54); }
  p.Grantor = v53
  return err
}

func (p *PrivilegeGrantInfo) ReadFieldGrantor(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *PrivilegeGrantInfo) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v55, err56 := iprot.ReadI32()
  if err56 != nil { return thrift.NewTProtocolExceptionReadField(4, "grantorType", p.ThriftName(), err56); }
  p.GrantorType = PrincipalType(v55)
  return err
}

func (p *PrivilegeGrantInfo) ReadFieldGrantorType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *PrivilegeGrantInfo) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v57, err58 := iprot.ReadBool()
  if err58 != nil { return thrift.NewTProtocolExceptionReadField(5, "grantOption", p.ThriftName(), err58); }
  p.GrantOption = v57
  return err
}

func (p *PrivilegeGrantInfo) ReadFieldGrantOption(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *PrivilegeGrantInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("PrivilegeGrantInfo")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PrivilegeGrantInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Privilege) < 1 { return nil}
  err = oprot.WriteFieldBegin("privilege", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "privilege", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Privilege))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "privilege", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "privilege", p.ThriftName(), err); }
  return err
}

func (p *PrivilegeGrantInfo) WriteFieldPrivilege(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PrivilegeGrantInfo) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.CreateTime) == 0 { return nil}
  err = oprot.WriteFieldBegin("createTime", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "createTime", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.CreateTime))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "createTime", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "createTime", p.ThriftName(), err); }
  return err
}

func (p *PrivilegeGrantInfo) WriteFieldCreateTime(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PrivilegeGrantInfo) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Grantor) < 1 { return nil}
  err = oprot.WriteFieldBegin("grantor", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "grantor", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Grantor))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "grantor", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "grantor", p.ThriftName(), err); }
  return err
}

func (p *PrivilegeGrantInfo) WriteFieldGrantor(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *PrivilegeGrantInfo) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("grantorType", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "grantorType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.GrantorType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "grantorType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "grantorType", p.ThriftName(), err); }
  return err
}

func (p *PrivilegeGrantInfo) WriteFieldGrantorType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *PrivilegeGrantInfo) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("grantOption", thrift.BOOL, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "grantOption", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.GrantOption))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "grantOption", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "grantOption", p.ThriftName(), err); }
  return err
}

func (p *PrivilegeGrantInfo) WriteFieldGrantOption(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *PrivilegeGrantInfo) TStructName() string {
  return "PrivilegeGrantInfo"
}

func (p *PrivilegeGrantInfo) ThriftName() string {
  return "PrivilegeGrantInfo"
}

func (p *PrivilegeGrantInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrivilegeGrantInfo(%+v)", *p)
}

func (p *PrivilegeGrantInfo) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PrivilegeGrantInfo)
  if !ok {
    return 0, false
  }
  if p.Privilege != data.Privilege {
    if p.Privilege < data.Privilege {
      return -1, true
    }
    return 1, true
  }
  if p.CreateTime != data.CreateTime {
    if p.CreateTime < data.CreateTime {
      return -1, true
    }
    return 1, true
  }
  if p.Grantor != data.Grantor {
    if p.Grantor < data.Grantor {
      return -1, true
    }
    return 1, true
  }
  if p.GrantorType != data.GrantorType {
    if p.GrantorType < data.GrantorType {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.GrantOption, data.GrantOption); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *PrivilegeGrantInfo) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Privilege
  case 2: return p.CreateTime
  case 3: return p.Grantor
  case 4: return p.GrantorType
  case 5: return p.GrantOption
  }
  return nil
}

func (p *PrivilegeGrantInfo) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("privilege", thrift.STRING, 1),
    thrift.NewTField("createTime", thrift.I32, 2),
    thrift.NewTField("grantor", thrift.STRING, 3),
    thrift.NewTField("grantorType", thrift.I32, 4),
    thrift.NewTField("grantOption", thrift.BOOL, 5),
    })
}

/**
 * Attributes:
 *  - HiveObject
 *  - PrincipalName
 *  - PrincipalType
 *  - GrantInfo
 */
type HiveObjectPrivilege struct {
  thrift.TStruct
  HiveObject *HiveObjectRef "hiveObject"; // 1
  PrincipalName string "principalName"; // 2
  PrincipalType PrincipalType "principalType"; // 3
  GrantInfo *PrivilegeGrantInfo "grantInfo"; // 4
}

func NewHiveObjectPrivilege() *HiveObjectPrivilege {
  output := &HiveObjectPrivilege{
    TStruct:thrift.NewTStruct("HiveObjectPrivilege", []thrift.TField{
    thrift.NewTField("hiveObject", thrift.STRUCT, 1),
    thrift.NewTField("principalName", thrift.STRING, 2),
    thrift.NewTField("principalType", thrift.I32, 3),
    thrift.NewTField("grantInfo", thrift.STRUCT, 4),
    }),
  }
  {
  }
  return output
}

func (p *HiveObjectPrivilege) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "hiveObject" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "principalName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "principalType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "grantInfo" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *HiveObjectPrivilege) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.HiveObject = NewHiveObjectRef()
  err61 := p.HiveObject.Read(iprot)
  if err61 != nil { return thrift.NewTProtocolExceptionReadStruct("p.HiveObjectHiveObjectRef", err61); }
  return err
}

func (p *HiveObjectPrivilege) ReadFieldHiveObject(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *HiveObjectPrivilege) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v62, err63 := iprot.ReadString()
  if err63 != nil { return thrift.NewTProtocolExceptionReadField(2, "principalName", p.ThriftName(), err63); }
  p.PrincipalName = v62
  return err
}

func (p *HiveObjectPrivilege) ReadFieldPrincipalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *HiveObjectPrivilege) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v64, err65 := iprot.ReadI32()
  if err65 != nil { return thrift.NewTProtocolExceptionReadField(3, "principalType", p.ThriftName(), err65); }
  p.PrincipalType = PrincipalType(v64)
  return err
}

func (p *HiveObjectPrivilege) ReadFieldPrincipalType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *HiveObjectPrivilege) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.GrantInfo = NewPrivilegeGrantInfo()
  err68 := p.GrantInfo.Read(iprot)
  if err68 != nil { return thrift.NewTProtocolExceptionReadStruct("p.GrantInfoPrivilegeGrantInfo", err68); }
  return err
}

func (p *HiveObjectPrivilege) ReadFieldGrantInfo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *HiveObjectPrivilege) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("HiveObjectPrivilege")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *HiveObjectPrivilege) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.HiveObject != nil {
    err = oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "hiveObject", p.ThriftName(), err); }
    err = p.HiveObject.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveObjectRef", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "hiveObject", p.ThriftName(), err); }
  }
  return err
}

func (p *HiveObjectPrivilege) WriteFieldHiveObject(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *HiveObjectPrivilege) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.PrincipalName) < 1 { return nil}
  err = oprot.WriteFieldBegin("principalName", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principalName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PrincipalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principalName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principalName", p.ThriftName(), err); }
  return err
}

func (p *HiveObjectPrivilege) WriteFieldPrincipalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *HiveObjectPrivilege) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("principalType", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "principalType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.PrincipalType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "principalType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "principalType", p.ThriftName(), err); }
  return err
}

func (p *HiveObjectPrivilege) WriteFieldPrincipalType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *HiveObjectPrivilege) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.GrantInfo != nil {
    err = oprot.WriteFieldBegin("grantInfo", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "grantInfo", p.ThriftName(), err); }
    err = p.GrantInfo.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PrivilegeGrantInfo", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "grantInfo", p.ThriftName(), err); }
  }
  return err
}

func (p *HiveObjectPrivilege) WriteFieldGrantInfo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *HiveObjectPrivilege) TStructName() string {
  return "HiveObjectPrivilege"
}

func (p *HiveObjectPrivilege) ThriftName() string {
  return "HiveObjectPrivilege"
}

func (p *HiveObjectPrivilege) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HiveObjectPrivilege(%+v)", *p)
}

func (p *HiveObjectPrivilege) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*HiveObjectPrivilege)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.HiveObject.CompareTo(data.HiveObject); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.PrincipalName != data.PrincipalName {
    if p.PrincipalName < data.PrincipalName {
      return -1, true
    }
    return 1, true
  }
  if p.PrincipalType != data.PrincipalType {
    if p.PrincipalType < data.PrincipalType {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.GrantInfo.CompareTo(data.GrantInfo); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *HiveObjectPrivilege) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.HiveObject
  case 2: return p.PrincipalName
  case 3: return p.PrincipalType
  case 4: return p.GrantInfo
  }
  return nil
}

func (p *HiveObjectPrivilege) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("hiveObject", thrift.STRUCT, 1),
    thrift.NewTField("principalName", thrift.STRING, 2),
    thrift.NewTField("principalType", thrift.I32, 3),
    thrift.NewTField("grantInfo", thrift.STRUCT, 4),
    })
}

/**
 * Attributes:
 *  - Privileges
 */
type PrivilegeBag struct {
  thrift.TStruct
  Privileges thrift.TList "privileges"; // 1
}

func NewPrivilegeBag() *PrivilegeBag {
  output := &PrivilegeBag{
    TStruct:thrift.NewTStruct("PrivilegeBag", []thrift.TField{
    thrift.NewTField("privileges", thrift.LIST, 1),
    }),
  }
  {
  }
  return output
}

func (p *PrivilegeBag) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "privileges" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PrivilegeBag) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype74, _size71, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Privileges", "", err)
  }
  p.Privileges = thrift.NewTList(_etype74, _size71)
  for _i75:= 0; _i75 < _size71; _i75++ {
    _elem76 := NewHiveObjectPrivilege()
    err79 := _elem76.Read(iprot)
    if err79 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem76HiveObjectPrivilege", err79); }
    p.Privileges.Push(_elem76)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *PrivilegeBag) ReadFieldPrivileges(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PrivilegeBag) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("PrivilegeBag")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PrivilegeBag) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Privileges != nil {
    err = oprot.WriteFieldBegin("privileges", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "privileges", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Privileges.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter80 := range p.Privileges.Iter() {
      Iter81 := Iter80.(*HiveObjectPrivilege)
      err = Iter81.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveObjectPrivilege", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "privileges", p.ThriftName(), err); }
  }
  return err
}

func (p *PrivilegeBag) WriteFieldPrivileges(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PrivilegeBag) TStructName() string {
  return "PrivilegeBag"
}

func (p *PrivilegeBag) ThriftName() string {
  return "PrivilegeBag"
}

func (p *PrivilegeBag) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrivilegeBag(%+v)", *p)
}

func (p *PrivilegeBag) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PrivilegeBag)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Privileges.CompareTo(data.Privileges); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PrivilegeBag) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Privileges
  }
  return nil
}

func (p *PrivilegeBag) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("privileges", thrift.LIST, 1),
    })
}

/**
 * Attributes:
 *  - UserPrivileges
 *  - GroupPrivileges
 *  - RolePrivileges
 */
type PrincipalPrivilegeSet struct {
  thrift.TStruct
  UserPrivileges thrift.TMap "userPrivileges"; // 1
  GroupPrivileges thrift.TMap "groupPrivileges"; // 2
  RolePrivileges thrift.TMap "rolePrivileges"; // 3
}

func NewPrincipalPrivilegeSet() *PrincipalPrivilegeSet {
  output := &PrincipalPrivilegeSet{
    TStruct:thrift.NewTStruct("PrincipalPrivilegeSet", []thrift.TField{
    thrift.NewTField("userPrivileges", thrift.MAP, 1),
    thrift.NewTField("groupPrivileges", thrift.MAP, 2),
    thrift.NewTField("rolePrivileges", thrift.MAP, 3),
    }),
  }
  {
  }
  return output
}

func (p *PrincipalPrivilegeSet) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "userPrivileges" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "groupPrivileges" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "rolePrivileges" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PrincipalPrivilegeSet) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype85, _vtype86, _size84, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.UserPrivileges", "", err)
  }
  p.UserPrivileges = thrift.NewTMap(_ktype85, _vtype86, _size84)
  for _i88:= 0; _i88 < _size84; _i88++ {
    v91, err92 := iprot.ReadString()
    if err92 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key89", "", err92); }
    _key89 := v91
    _etype98, _size95, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val90", "", err)
    }
    _val90 := thrift.NewTList(_etype98, _size95)
    for _i99:= 0; _i99 < _size95; _i99++ {
      _elem100 := NewPrivilegeGrantInfo()
      err103 := _elem100.Read(iprot)
      if err103 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem100PrivilegeGrantInfo", err103); }
      _val90.Push(_elem100)
    }
    err = iprot.ReadListEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
    p.UserPrivileges.Set(_key89, _val90)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *PrincipalPrivilegeSet) ReadFieldUserPrivileges(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PrincipalPrivilegeSet) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype107, _vtype108, _size106, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.GroupPrivileges", "", err)
  }
  p.GroupPrivileges = thrift.NewTMap(_ktype107, _vtype108, _size106)
  for _i110:= 0; _i110 < _size106; _i110++ {
    v113, err114 := iprot.ReadString()
    if err114 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key111", "", err114); }
    _key111 := v113
    _etype120, _size117, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val112", "", err)
    }
    _val112 := thrift.NewTList(_etype120, _size117)
    for _i121:= 0; _i121 < _size117; _i121++ {
      _elem122 := NewPrivilegeGrantInfo()
      err125 := _elem122.Read(iprot)
      if err125 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem122PrivilegeGrantInfo", err125); }
      _val112.Push(_elem122)
    }
    err = iprot.ReadListEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
    p.GroupPrivileges.Set(_key111, _val112)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *PrincipalPrivilegeSet) ReadFieldGroupPrivileges(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PrincipalPrivilegeSet) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype129, _vtype130, _size128, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.RolePrivileges", "", err)
  }
  p.RolePrivileges = thrift.NewTMap(_ktype129, _vtype130, _size128)
  for _i132:= 0; _i132 < _size128; _i132++ {
    v135, err136 := iprot.ReadString()
    if err136 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key133", "", err136); }
    _key133 := v135
    _etype142, _size139, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val134", "", err)
    }
    _val134 := thrift.NewTList(_etype142, _size139)
    for _i143:= 0; _i143 < _size139; _i143++ {
      _elem144 := NewPrivilegeGrantInfo()
      err147 := _elem144.Read(iprot)
      if err147 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem144PrivilegeGrantInfo", err147); }
      _val134.Push(_elem144)
    }
    err = iprot.ReadListEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
    p.RolePrivileges.Set(_key133, _val134)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *PrincipalPrivilegeSet) ReadFieldRolePrivileges(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *PrincipalPrivilegeSet) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("PrincipalPrivilegeSet")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PrincipalPrivilegeSet) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.UserPrivileges != nil {
    err = oprot.WriteFieldBegin("userPrivileges", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "userPrivileges", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.UserPrivileges.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter148 := range p.UserPrivileges.Iter() {
      Kiter149, Viter150 := Miter148.Key().(string), Miter148.Value().(thrift.TList)
      err = oprot.WriteString(string(Kiter149))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter149", "", err); }
      err = oprot.WriteListBegin(thrift.STRUCT, Viter150.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
      for Iter151 := range Viter150.Iter() {
        Iter152 := Iter151.(*PrivilegeGrantInfo)
        err = Iter152.Write(oprot)
        if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PrivilegeGrantInfo", err); }
      }
      err = oprot.WriteListEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "userPrivileges", p.ThriftName(), err); }
  }
  return err
}

func (p *PrincipalPrivilegeSet) WriteFieldUserPrivileges(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PrincipalPrivilegeSet) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.GroupPrivileges != nil {
    err = oprot.WriteFieldBegin("groupPrivileges", thrift.MAP, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "groupPrivileges", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.GroupPrivileges.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter153 := range p.GroupPrivileges.Iter() {
      Kiter154, Viter155 := Miter153.Key().(string), Miter153.Value().(thrift.TList)
      err = oprot.WriteString(string(Kiter154))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter154", "", err); }
      err = oprot.WriteListBegin(thrift.STRUCT, Viter155.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
      for Iter156 := range Viter155.Iter() {
        Iter157 := Iter156.(*PrivilegeGrantInfo)
        err = Iter157.Write(oprot)
        if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PrivilegeGrantInfo", err); }
      }
      err = oprot.WriteListEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "groupPrivileges", p.ThriftName(), err); }
  }
  return err
}

func (p *PrincipalPrivilegeSet) WriteFieldGroupPrivileges(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PrincipalPrivilegeSet) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.RolePrivileges != nil {
    err = oprot.WriteFieldBegin("rolePrivileges", thrift.MAP, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "rolePrivileges", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.RolePrivileges.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter158 := range p.RolePrivileges.Iter() {
      Kiter159, Viter160 := Miter158.Key().(string), Miter158.Value().(thrift.TList)
      err = oprot.WriteString(string(Kiter159))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter159", "", err); }
      err = oprot.WriteListBegin(thrift.STRUCT, Viter160.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
      for Iter161 := range Viter160.Iter() {
        Iter162 := Iter161.(*PrivilegeGrantInfo)
        err = Iter162.Write(oprot)
        if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PrivilegeGrantInfo", err); }
      }
      err = oprot.WriteListEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "rolePrivileges", p.ThriftName(), err); }
  }
  return err
}

func (p *PrincipalPrivilegeSet) WriteFieldRolePrivileges(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *PrincipalPrivilegeSet) TStructName() string {
  return "PrincipalPrivilegeSet"
}

func (p *PrincipalPrivilegeSet) ThriftName() string {
  return "PrincipalPrivilegeSet"
}

func (p *PrincipalPrivilegeSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrincipalPrivilegeSet(%+v)", *p)
}

func (p *PrincipalPrivilegeSet) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PrincipalPrivilegeSet)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.UserPrivileges.CompareTo(data.UserPrivileges); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.GroupPrivileges.CompareTo(data.GroupPrivileges); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.RolePrivileges.CompareTo(data.RolePrivileges); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PrincipalPrivilegeSet) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.UserPrivileges
  case 2: return p.GroupPrivileges
  case 3: return p.RolePrivileges
  }
  return nil
}

func (p *PrincipalPrivilegeSet) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("userPrivileges", thrift.MAP, 1),
    thrift.NewTField("groupPrivileges", thrift.MAP, 2),
    thrift.NewTField("rolePrivileges", thrift.MAP, 3),
    })
}

/**
 * Attributes:
 *  - RoleName
 *  - CreateTime
 *  - OwnerName
 */
type Role struct {
  thrift.TStruct
  RoleName string "roleName"; // 1
  CreateTime int32 "createTime"; // 2
  OwnerName string "ownerName"; // 3
}

func NewRole() *Role {
  output := &Role{
    TStruct:thrift.NewTStruct("Role", []thrift.TField{
    thrift.NewTField("roleName", thrift.STRING, 1),
    thrift.NewTField("createTime", thrift.I32, 2),
    thrift.NewTField("ownerName", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *Role) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "roleName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "createTime" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "ownerName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Role) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v163, err164 := iprot.ReadString()
  if err164 != nil { return thrift.NewTProtocolExceptionReadField(1, "roleName", p.ThriftName(), err164); }
  p.RoleName = v163
  return err
}

func (p *Role) ReadFieldRoleName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Role) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v165, err166 := iprot.ReadI32()
  if err166 != nil { return thrift.NewTProtocolExceptionReadField(2, "createTime", p.ThriftName(), err166); }
  p.CreateTime = v165
  return err
}

func (p *Role) ReadFieldCreateTime(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Role) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v167, err168 := iprot.ReadString()
  if err168 != nil { return thrift.NewTProtocolExceptionReadField(3, "ownerName", p.ThriftName(), err168); }
  p.OwnerName = v167
  return err
}

func (p *Role) ReadFieldOwnerName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Role) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Role")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Role) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.RoleName) < 1 { return nil}
  err = oprot.WriteFieldBegin("roleName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "roleName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.RoleName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "roleName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "roleName", p.ThriftName(), err); }
  return err
}

func (p *Role) WriteFieldRoleName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Role) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.CreateTime) == 0 { return nil}
  err = oprot.WriteFieldBegin("createTime", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "createTime", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.CreateTime))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "createTime", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "createTime", p.ThriftName(), err); }
  return err
}

func (p *Role) WriteFieldCreateTime(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Role) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.OwnerName) < 1 { return nil}
  err = oprot.WriteFieldBegin("ownerName", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "ownerName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.OwnerName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "ownerName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "ownerName", p.ThriftName(), err); }
  return err
}

func (p *Role) WriteFieldOwnerName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Role) TStructName() string {
  return "Role"
}

func (p *Role) ThriftName() string {
  return "Role"
}

func (p *Role) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Role(%+v)", *p)
}

func (p *Role) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Role)
  if !ok {
    return 0, false
  }
  if p.RoleName != data.RoleName {
    if p.RoleName < data.RoleName {
      return -1, true
    }
    return 1, true
  }
  if p.CreateTime != data.CreateTime {
    if p.CreateTime < data.CreateTime {
      return -1, true
    }
    return 1, true
  }
  if p.OwnerName != data.OwnerName {
    if p.OwnerName < data.OwnerName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *Role) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.RoleName
  case 2: return p.CreateTime
  case 3: return p.OwnerName
  }
  return nil
}

func (p *Role) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("roleName", thrift.STRING, 1),
    thrift.NewTField("createTime", thrift.I32, 2),
    thrift.NewTField("ownerName", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Name
 *  - Description
 *  - LocationUri
 *  - Parameters
 *  - Privileges
 */
type Database struct {
  thrift.TStruct
  Name string "name"; // 1
  Description string "description"; // 2
  LocationUri string "locationUri"; // 3
  Parameters thrift.TMap "parameters"; // 4
  Privileges *PrincipalPrivilegeSet "privileges"; // 5
}

func NewDatabase() *Database {
  output := &Database{
    TStruct:thrift.NewTStruct("Database", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("description", thrift.STRING, 2),
    thrift.NewTField("locationUri", thrift.STRING, 3),
    thrift.NewTField("parameters", thrift.MAP, 4),
    thrift.NewTField("privileges", thrift.STRUCT, 5),
    }),
  }
  {
  }
  return output
}

func (p *Database) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "description" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "locationUri" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "parameters" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "privileges" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Database) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v169, err170 := iprot.ReadString()
  if err170 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err170); }
  p.Name = v169
  return err
}

func (p *Database) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Database) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v171, err172 := iprot.ReadString()
  if err172 != nil { return thrift.NewTProtocolExceptionReadField(2, "description", p.ThriftName(), err172); }
  p.Description = v171
  return err
}

func (p *Database) ReadFieldDescription(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Database) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v173, err174 := iprot.ReadString()
  if err174 != nil { return thrift.NewTProtocolExceptionReadField(3, "locationUri", p.ThriftName(), err174); }
  p.LocationUri = v173
  return err
}

func (p *Database) ReadFieldLocationUri(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Database) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype178, _vtype179, _size177, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Parameters", "", err)
  }
  p.Parameters = thrift.NewTMap(_ktype178, _vtype179, _size177)
  for _i181:= 0; _i181 < _size177; _i181++ {
    v184, err185 := iprot.ReadString()
    if err185 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key182", "", err185); }
    _key182 := v184
    v186, err187 := iprot.ReadString()
    if err187 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val183", "", err187); }
    _val183 := v186
    p.Parameters.Set(_key182, _val183)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Database) ReadFieldParameters(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Database) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Privileges = NewPrincipalPrivilegeSet()
  err190 := p.Privileges.Read(iprot)
  if err190 != nil { return thrift.NewTProtocolExceptionReadStruct("p.PrivilegesPrincipalPrivilegeSet", err190); }
  return err
}

func (p *Database) ReadFieldPrivileges(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *Database) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Database")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Database) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *Database) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Database) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Description) < 1 { return nil}
  err = oprot.WriteFieldBegin("description", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "description", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Description))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "description", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "description", p.ThriftName(), err); }
  return err
}

func (p *Database) WriteFieldDescription(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Database) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.LocationUri) < 1 { return nil}
  err = oprot.WriteFieldBegin("locationUri", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "locationUri", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.LocationUri))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "locationUri", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "locationUri", p.ThriftName(), err); }
  return err
}

func (p *Database) WriteFieldLocationUri(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Database) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Parameters != nil {
    err = oprot.WriteFieldBegin("parameters", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "parameters", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Parameters.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter191 := range p.Parameters.Iter() {
      Kiter192, Viter193 := Miter191.Key().(string), Miter191.Value().(string)
      err = oprot.WriteString(string(Kiter192))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter192", "", err); }
      err = oprot.WriteString(string(Viter193))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter193", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "parameters", p.ThriftName(), err); }
  }
  return err
}

func (p *Database) WriteFieldParameters(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Database) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Privileges != nil {
    err = oprot.WriteFieldBegin("privileges", thrift.STRUCT, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "privileges", p.ThriftName(), err); }
    err = p.Privileges.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PrincipalPrivilegeSet", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "privileges", p.ThriftName(), err); }
  }
  return err
}

func (p *Database) WriteFieldPrivileges(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *Database) TStructName() string {
  return "Database"
}

func (p *Database) ThriftName() string {
  return "Database"
}

func (p *Database) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Database(%+v)", *p)
}

func (p *Database) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Database)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  if p.Description != data.Description {
    if p.Description < data.Description {
      return -1, true
    }
    return 1, true
  }
  if p.LocationUri != data.LocationUri {
    if p.LocationUri < data.LocationUri {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Parameters.CompareTo(data.Parameters); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Privileges.CompareTo(data.Privileges); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *Database) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  case 2: return p.Description
  case 3: return p.LocationUri
  case 4: return p.Parameters
  case 5: return p.Privileges
  }
  return nil
}

func (p *Database) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("description", thrift.STRING, 2),
    thrift.NewTField("locationUri", thrift.STRING, 3),
    thrift.NewTField("parameters", thrift.MAP, 4),
    thrift.NewTField("privileges", thrift.STRUCT, 5),
    })
}

/**
 * Attributes:
 *  - Name
 *  - SerializationLib
 *  - Parameters
 */
type SerDeInfo struct {
  thrift.TStruct
  Name string "name"; // 1
  SerializationLib string "serializationLib"; // 2
  Parameters thrift.TMap "parameters"; // 3
}

func NewSerDeInfo() *SerDeInfo {
  output := &SerDeInfo{
    TStruct:thrift.NewTStruct("SerDeInfo", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("serializationLib", thrift.STRING, 2),
    thrift.NewTField("parameters", thrift.MAP, 3),
    }),
  }
  {
  }
  return output
}

func (p *SerDeInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "serializationLib" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "parameters" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SerDeInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v194, err195 := iprot.ReadString()
  if err195 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err195); }
  p.Name = v194
  return err
}

func (p *SerDeInfo) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SerDeInfo) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v196, err197 := iprot.ReadString()
  if err197 != nil { return thrift.NewTProtocolExceptionReadField(2, "serializationLib", p.ThriftName(), err197); }
  p.SerializationLib = v196
  return err
}

func (p *SerDeInfo) ReadFieldSerializationLib(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SerDeInfo) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype201, _vtype202, _size200, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Parameters", "", err)
  }
  p.Parameters = thrift.NewTMap(_ktype201, _vtype202, _size200)
  for _i204:= 0; _i204 < _size200; _i204++ {
    v207, err208 := iprot.ReadString()
    if err208 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key205", "", err208); }
    _key205 := v207
    v209, err210 := iprot.ReadString()
    if err210 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val206", "", err210); }
    _val206 := v209
    p.Parameters.Set(_key205, _val206)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *SerDeInfo) ReadFieldParameters(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SerDeInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SerDeInfo")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SerDeInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *SerDeInfo) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SerDeInfo) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.SerializationLib) < 1 { return nil}
  err = oprot.WriteFieldBegin("serializationLib", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "serializationLib", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.SerializationLib))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "serializationLib", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "serializationLib", p.ThriftName(), err); }
  return err
}

func (p *SerDeInfo) WriteFieldSerializationLib(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SerDeInfo) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Parameters != nil {
    err = oprot.WriteFieldBegin("parameters", thrift.MAP, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "parameters", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Parameters.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter211 := range p.Parameters.Iter() {
      Kiter212, Viter213 := Miter211.Key().(string), Miter211.Value().(string)
      err = oprot.WriteString(string(Kiter212))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter212", "", err); }
      err = oprot.WriteString(string(Viter213))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter213", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "parameters", p.ThriftName(), err); }
  }
  return err
}

func (p *SerDeInfo) WriteFieldParameters(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SerDeInfo) TStructName() string {
  return "SerDeInfo"
}

func (p *SerDeInfo) ThriftName() string {
  return "SerDeInfo"
}

func (p *SerDeInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SerDeInfo(%+v)", *p)
}

func (p *SerDeInfo) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SerDeInfo)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  if p.SerializationLib != data.SerializationLib {
    if p.SerializationLib < data.SerializationLib {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Parameters.CompareTo(data.Parameters); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SerDeInfo) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  case 2: return p.SerializationLib
  case 3: return p.Parameters
  }
  return nil
}

func (p *SerDeInfo) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("serializationLib", thrift.STRING, 2),
    thrift.NewTField("parameters", thrift.MAP, 3),
    })
}

/**
 * Attributes:
 *  - Col
 *  - Order
 */
type Order struct {
  thrift.TStruct
  Col string "col"; // 1
  Order int32 "order"; // 2
}

func NewOrder() *Order {
  output := &Order{
    TStruct:thrift.NewTStruct("Order", []thrift.TField{
    thrift.NewTField("col", thrift.STRING, 1),
    thrift.NewTField("order", thrift.I32, 2),
    }),
  }
  {
  }
  return output
}

func (p *Order) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "col" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "order" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Order) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v214, err215 := iprot.ReadString()
  if err215 != nil { return thrift.NewTProtocolExceptionReadField(1, "col", p.ThriftName(), err215); }
  p.Col = v214
  return err
}

func (p *Order) ReadFieldCol(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Order) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v216, err217 := iprot.ReadI32()
  if err217 != nil { return thrift.NewTProtocolExceptionReadField(2, "order", p.ThriftName(), err217); }
  p.Order = v216
  return err
}

func (p *Order) ReadFieldOrder(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Order) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Order")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Order) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Col) < 1 { return nil}
  err = oprot.WriteFieldBegin("col", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "col", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Col))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "col", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "col", p.ThriftName(), err); }
  return err
}

func (p *Order) WriteFieldCol(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Order) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Order) == 0 { return nil}
  err = oprot.WriteFieldBegin("order", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "order", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Order))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "order", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "order", p.ThriftName(), err); }
  return err
}

func (p *Order) WriteFieldOrder(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Order) TStructName() string {
  return "Order"
}

func (p *Order) ThriftName() string {
  return "Order"
}

func (p *Order) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Order(%+v)", *p)
}

func (p *Order) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Order)
  if !ok {
    return 0, false
  }
  if p.Col != data.Col {
    if p.Col < data.Col {
      return -1, true
    }
    return 1, true
  }
  if p.Order != data.Order {
    if p.Order < data.Order {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *Order) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Col
  case 2: return p.Order
  }
  return nil
}

func (p *Order) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("col", thrift.STRING, 1),
    thrift.NewTField("order", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - Cols
 *  - Location
 *  - InputFormat
 *  - OutputFormat
 *  - Compressed
 *  - NumBuckets
 *  - SerdeInfo
 *  - BucketCols
 *  - SortCols
 *  - Parameters
 */
type StorageDescriptor struct {
  thrift.TStruct
  Cols thrift.TList "cols"; // 1
  Location string "location"; // 2
  InputFormat string "inputFormat"; // 3
  OutputFormat string "outputFormat"; // 4
  Compressed bool "compressed"; // 5
  NumBuckets int32 "numBuckets"; // 6
  SerdeInfo *SerDeInfo "serdeInfo"; // 7
  BucketCols thrift.TList "bucketCols"; // 8
  SortCols thrift.TList "sortCols"; // 9
  Parameters thrift.TMap "parameters"; // 10
}

func NewStorageDescriptor() *StorageDescriptor {
  output := &StorageDescriptor{
    TStruct:thrift.NewTStruct("StorageDescriptor", []thrift.TField{
    thrift.NewTField("cols", thrift.LIST, 1),
    thrift.NewTField("location", thrift.STRING, 2),
    thrift.NewTField("inputFormat", thrift.STRING, 3),
    thrift.NewTField("outputFormat", thrift.STRING, 4),
    thrift.NewTField("compressed", thrift.BOOL, 5),
    thrift.NewTField("numBuckets", thrift.I32, 6),
    thrift.NewTField("serdeInfo", thrift.STRUCT, 7),
    thrift.NewTField("bucketCols", thrift.LIST, 8),
    thrift.NewTField("sortCols", thrift.LIST, 9),
    thrift.NewTField("parameters", thrift.MAP, 10),
    }),
  }
  {
  }
  return output
}

func (p *StorageDescriptor) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "cols" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "location" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "inputFormat" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "outputFormat" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "compressed" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "numBuckets" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "serdeInfo" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "bucketCols" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "sortCols" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 10 || fieldName == "parameters" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *StorageDescriptor) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype223, _size220, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Cols", "", err)
  }
  p.Cols = thrift.NewTList(_etype223, _size220)
  for _i224:= 0; _i224 < _size220; _i224++ {
    _elem225 := NewFieldSchema()
    err228 := _elem225.Read(iprot)
    if err228 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem225FieldSchema", err228); }
    p.Cols.Push(_elem225)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *StorageDescriptor) ReadFieldCols(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *StorageDescriptor) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v229, err230 := iprot.ReadString()
  if err230 != nil { return thrift.NewTProtocolExceptionReadField(2, "location", p.ThriftName(), err230); }
  p.Location = v229
  return err
}

func (p *StorageDescriptor) ReadFieldLocation(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *StorageDescriptor) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v231, err232 := iprot.ReadString()
  if err232 != nil { return thrift.NewTProtocolExceptionReadField(3, "inputFormat", p.ThriftName(), err232); }
  p.InputFormat = v231
  return err
}

func (p *StorageDescriptor) ReadFieldInputFormat(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *StorageDescriptor) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v233, err234 := iprot.ReadString()
  if err234 != nil { return thrift.NewTProtocolExceptionReadField(4, "outputFormat", p.ThriftName(), err234); }
  p.OutputFormat = v233
  return err
}

func (p *StorageDescriptor) ReadFieldOutputFormat(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *StorageDescriptor) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v235, err236 := iprot.ReadBool()
  if err236 != nil { return thrift.NewTProtocolExceptionReadField(5, "compressed", p.ThriftName(), err236); }
  p.Compressed = v235
  return err
}

func (p *StorageDescriptor) ReadFieldCompressed(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *StorageDescriptor) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v237, err238 := iprot.ReadI32()
  if err238 != nil { return thrift.NewTProtocolExceptionReadField(6, "numBuckets", p.ThriftName(), err238); }
  p.NumBuckets = v237
  return err
}

func (p *StorageDescriptor) ReadFieldNumBuckets(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *StorageDescriptor) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SerdeInfo = NewSerDeInfo()
  err241 := p.SerdeInfo.Read(iprot)
  if err241 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SerdeInfoSerDeInfo", err241); }
  return err
}

func (p *StorageDescriptor) ReadFieldSerdeInfo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *StorageDescriptor) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype247, _size244, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.BucketCols", "", err)
  }
  p.BucketCols = thrift.NewTList(_etype247, _size244)
  for _i248:= 0; _i248 < _size244; _i248++ {
    v250, err251 := iprot.ReadString()
    if err251 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem249", "", err251); }
    _elem249 := v250
    p.BucketCols.Push(_elem249)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *StorageDescriptor) ReadFieldBucketCols(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *StorageDescriptor) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype257, _size254, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.SortCols", "", err)
  }
  p.SortCols = thrift.NewTList(_etype257, _size254)
  for _i258:= 0; _i258 < _size254; _i258++ {
    _elem259 := NewOrder()
    err262 := _elem259.Read(iprot)
    if err262 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem259Order", err262); }
    p.SortCols.Push(_elem259)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *StorageDescriptor) ReadFieldSortCols(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *StorageDescriptor) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype266, _vtype267, _size265, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Parameters", "", err)
  }
  p.Parameters = thrift.NewTMap(_ktype266, _vtype267, _size265)
  for _i269:= 0; _i269 < _size265; _i269++ {
    v272, err273 := iprot.ReadString()
    if err273 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key270", "", err273); }
    _key270 := v272
    v274, err275 := iprot.ReadString()
    if err275 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val271", "", err275); }
    _val271 := v274
    p.Parameters.Set(_key270, _val271)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *StorageDescriptor) ReadFieldParameters(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField10(iprot)
}

func (p *StorageDescriptor) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("StorageDescriptor")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = p.WriteField10(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *StorageDescriptor) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Cols != nil {
    err = oprot.WriteFieldBegin("cols", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cols", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Cols.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter276 := range p.Cols.Iter() {
      Iter277 := Iter276.(*FieldSchema)
      err = Iter277.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("FieldSchema", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cols", p.ThriftName(), err); }
  }
  return err
}

func (p *StorageDescriptor) WriteFieldCols(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *StorageDescriptor) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Location) < 1 { return nil}
  err = oprot.WriteFieldBegin("location", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "location", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Location))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "location", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "location", p.ThriftName(), err); }
  return err
}

func (p *StorageDescriptor) WriteFieldLocation(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *StorageDescriptor) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.InputFormat) < 1 { return nil}
  err = oprot.WriteFieldBegin("inputFormat", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "inputFormat", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.InputFormat))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "inputFormat", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "inputFormat", p.ThriftName(), err); }
  return err
}

func (p *StorageDescriptor) WriteFieldInputFormat(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *StorageDescriptor) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.OutputFormat) < 1 { return nil}
  err = oprot.WriteFieldBegin("outputFormat", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "outputFormat", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.OutputFormat))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "outputFormat", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "outputFormat", p.ThriftName(), err); }
  return err
}

func (p *StorageDescriptor) WriteFieldOutputFormat(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *StorageDescriptor) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("compressed", thrift.BOOL, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "compressed", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Compressed))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "compressed", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "compressed", p.ThriftName(), err); }
  return err
}

func (p *StorageDescriptor) WriteFieldCompressed(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *StorageDescriptor) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.NumBuckets) == 0 { return nil}
  err = oprot.WriteFieldBegin("numBuckets", thrift.I32, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "numBuckets", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NumBuckets))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "numBuckets", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "numBuckets", p.ThriftName(), err); }
  return err
}

func (p *StorageDescriptor) WriteFieldNumBuckets(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *StorageDescriptor) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SerdeInfo != nil {
    err = oprot.WriteFieldBegin("serdeInfo", thrift.STRUCT, 7)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "serdeInfo", p.ThriftName(), err); }
    err = p.SerdeInfo.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SerDeInfo", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "serdeInfo", p.ThriftName(), err); }
  }
  return err
}

func (p *StorageDescriptor) WriteFieldSerdeInfo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *StorageDescriptor) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BucketCols != nil {
    err = oprot.WriteFieldBegin("bucketCols", thrift.LIST, 8)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "bucketCols", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.BucketCols.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter278 := range p.BucketCols.Iter() {
      Iter279 := Iter278.(string)
      err = oprot.WriteString(string(Iter279))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter279", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "bucketCols", p.ThriftName(), err); }
  }
  return err
}

func (p *StorageDescriptor) WriteFieldBucketCols(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *StorageDescriptor) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SortCols != nil {
    err = oprot.WriteFieldBegin("sortCols", thrift.LIST, 9)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "sortCols", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.SortCols.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter280 := range p.SortCols.Iter() {
      Iter281 := Iter280.(*Order)
      err = Iter281.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Order", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "sortCols", p.ThriftName(), err); }
  }
  return err
}

func (p *StorageDescriptor) WriteFieldSortCols(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *StorageDescriptor) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Parameters != nil {
    err = oprot.WriteFieldBegin("parameters", thrift.MAP, 10)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "parameters", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Parameters.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter282 := range p.Parameters.Iter() {
      Kiter283, Viter284 := Miter282.Key().(string), Miter282.Value().(string)
      err = oprot.WriteString(string(Kiter283))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter283", "", err); }
      err = oprot.WriteString(string(Viter284))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter284", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "parameters", p.ThriftName(), err); }
  }
  return err
}

func (p *StorageDescriptor) WriteFieldParameters(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField10(oprot)
}

func (p *StorageDescriptor) TStructName() string {
  return "StorageDescriptor"
}

func (p *StorageDescriptor) ThriftName() string {
  return "StorageDescriptor"
}

func (p *StorageDescriptor) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageDescriptor(%+v)", *p)
}

func (p *StorageDescriptor) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*StorageDescriptor)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Cols.CompareTo(data.Cols); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Location != data.Location {
    if p.Location < data.Location {
      return -1, true
    }
    return 1, true
  }
  if p.InputFormat != data.InputFormat {
    if p.InputFormat < data.InputFormat {
      return -1, true
    }
    return 1, true
  }
  if p.OutputFormat != data.OutputFormat {
    if p.OutputFormat < data.OutputFormat {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.Compressed, data.Compressed); cmp != 0 {
    return cmp, true
  }
  if p.NumBuckets != data.NumBuckets {
    if p.NumBuckets < data.NumBuckets {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.SerdeInfo.CompareTo(data.SerdeInfo); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BucketCols.CompareTo(data.BucketCols); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SortCols.CompareTo(data.SortCols); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Parameters.CompareTo(data.Parameters); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *StorageDescriptor) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Cols
  case 2: return p.Location
  case 3: return p.InputFormat
  case 4: return p.OutputFormat
  case 5: return p.Compressed
  case 6: return p.NumBuckets
  case 7: return p.SerdeInfo
  case 8: return p.BucketCols
  case 9: return p.SortCols
  case 10: return p.Parameters
  }
  return nil
}

func (p *StorageDescriptor) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("cols", thrift.LIST, 1),
    thrift.NewTField("location", thrift.STRING, 2),
    thrift.NewTField("inputFormat", thrift.STRING, 3),
    thrift.NewTField("outputFormat", thrift.STRING, 4),
    thrift.NewTField("compressed", thrift.BOOL, 5),
    thrift.NewTField("numBuckets", thrift.I32, 6),
    thrift.NewTField("serdeInfo", thrift.STRUCT, 7),
    thrift.NewTField("bucketCols", thrift.LIST, 8),
    thrift.NewTField("sortCols", thrift.LIST, 9),
    thrift.NewTField("parameters", thrift.MAP, 10),
    })
}

/**
 * Attributes:
 *  - TableName
 *  - DbName
 *  - Owner
 *  - CreateTime
 *  - LastAccessTime
 *  - Retention
 *  - Sd
 *  - PartitionKeys
 *  - Parameters
 *  - ViewOriginalText
 *  - ViewExpandedText
 *  - TableType
 *  - Privileges
 */
type Table struct {
  thrift.TStruct
  TableName string "tableName"; // 1
  DbName string "dbName"; // 2
  Owner string "owner"; // 3
  CreateTime int32 "createTime"; // 4
  LastAccessTime int32 "lastAccessTime"; // 5
  Retention int32 "retention"; // 6
  Sd *StorageDescriptor "sd"; // 7
  PartitionKeys thrift.TList "partitionKeys"; // 8
  Parameters thrift.TMap "parameters"; // 9
  ViewOriginalText string "viewOriginalText"; // 10
  ViewExpandedText string "viewExpandedText"; // 11
  TableType string "tableType"; // 12
  Privileges *PrincipalPrivilegeSet "privileges"; // 13
}

func NewTable() *Table {
  output := &Table{
    TStruct:thrift.NewTStruct("Table", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("dbName", thrift.STRING, 2),
    thrift.NewTField("owner", thrift.STRING, 3),
    thrift.NewTField("createTime", thrift.I32, 4),
    thrift.NewTField("lastAccessTime", thrift.I32, 5),
    thrift.NewTField("retention", thrift.I32, 6),
    thrift.NewTField("sd", thrift.STRUCT, 7),
    thrift.NewTField("partitionKeys", thrift.LIST, 8),
    thrift.NewTField("parameters", thrift.MAP, 9),
    thrift.NewTField("viewOriginalText", thrift.STRING, 10),
    thrift.NewTField("viewExpandedText", thrift.STRING, 11),
    thrift.NewTField("tableType", thrift.STRING, 12),
    thrift.NewTField("privileges", thrift.STRUCT, 13),
    }),
  }
  {
  }
  return output
}

func (p *Table) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "dbName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "owner" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "createTime" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "lastAccessTime" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "retention" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "sd" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "partitionKeys" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "parameters" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 10 || fieldName == "viewOriginalText" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 11 || fieldName == "viewExpandedText" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 12 || fieldName == "tableType" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 13 || fieldName == "privileges" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField13(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField13(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Table) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v285, err286 := iprot.ReadString()
  if err286 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err286); }
  p.TableName = v285
  return err
}

func (p *Table) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Table) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v287, err288 := iprot.ReadString()
  if err288 != nil { return thrift.NewTProtocolExceptionReadField(2, "dbName", p.ThriftName(), err288); }
  p.DbName = v287
  return err
}

func (p *Table) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Table) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v289, err290 := iprot.ReadString()
  if err290 != nil { return thrift.NewTProtocolExceptionReadField(3, "owner", p.ThriftName(), err290); }
  p.Owner = v289
  return err
}

func (p *Table) ReadFieldOwner(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Table) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v291, err292 := iprot.ReadI32()
  if err292 != nil { return thrift.NewTProtocolExceptionReadField(4, "createTime", p.ThriftName(), err292); }
  p.CreateTime = v291
  return err
}

func (p *Table) ReadFieldCreateTime(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Table) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v293, err294 := iprot.ReadI32()
  if err294 != nil { return thrift.NewTProtocolExceptionReadField(5, "lastAccessTime", p.ThriftName(), err294); }
  p.LastAccessTime = v293
  return err
}

func (p *Table) ReadFieldLastAccessTime(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *Table) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v295, err296 := iprot.ReadI32()
  if err296 != nil { return thrift.NewTProtocolExceptionReadField(6, "retention", p.ThriftName(), err296); }
  p.Retention = v295
  return err
}

func (p *Table) ReadFieldRetention(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *Table) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Sd = NewStorageDescriptor()
  err299 := p.Sd.Read(iprot)
  if err299 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SdStorageDescriptor", err299); }
  return err
}

func (p *Table) ReadFieldSd(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *Table) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype305, _size302, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PartitionKeys", "", err)
  }
  p.PartitionKeys = thrift.NewTList(_etype305, _size302)
  for _i306:= 0; _i306 < _size302; _i306++ {
    _elem307 := NewFieldSchema()
    err310 := _elem307.Read(iprot)
    if err310 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem307FieldSchema", err310); }
    p.PartitionKeys.Push(_elem307)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Table) ReadFieldPartitionKeys(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *Table) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype314, _vtype315, _size313, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Parameters", "", err)
  }
  p.Parameters = thrift.NewTMap(_ktype314, _vtype315, _size313)
  for _i317:= 0; _i317 < _size313; _i317++ {
    v320, err321 := iprot.ReadString()
    if err321 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key318", "", err321); }
    _key318 := v320
    v322, err323 := iprot.ReadString()
    if err323 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val319", "", err323); }
    _val319 := v322
    p.Parameters.Set(_key318, _val319)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Table) ReadFieldParameters(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *Table) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v324, err325 := iprot.ReadString()
  if err325 != nil { return thrift.NewTProtocolExceptionReadField(10, "viewOriginalText", p.ThriftName(), err325); }
  p.ViewOriginalText = v324
  return err
}

func (p *Table) ReadFieldViewOriginalText(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField10(iprot)
}

func (p *Table) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v326, err327 := iprot.ReadString()
  if err327 != nil { return thrift.NewTProtocolExceptionReadField(11, "viewExpandedText", p.ThriftName(), err327); }
  p.ViewExpandedText = v326
  return err
}

func (p *Table) ReadFieldViewExpandedText(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField11(iprot)
}

func (p *Table) ReadField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v328, err329 := iprot.ReadString()
  if err329 != nil { return thrift.NewTProtocolExceptionReadField(12, "tableType", p.ThriftName(), err329); }
  p.TableType = v328
  return err
}

func (p *Table) ReadFieldTableType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField12(iprot)
}

func (p *Table) ReadField13(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Privileges = NewPrincipalPrivilegeSet()
  err332 := p.Privileges.Read(iprot)
  if err332 != nil { return thrift.NewTProtocolExceptionReadStruct("p.PrivilegesPrincipalPrivilegeSet", err332); }
  return err
}

func (p *Table) ReadFieldPrivileges(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField13(iprot)
}

func (p *Table) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Table")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = p.WriteField10(oprot)
  if err != nil { return err }
  err = p.WriteField11(oprot)
  if err != nil { return err }
  err = p.WriteField12(oprot)
  if err != nil { return err }
  err = p.WriteField13(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Table) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *Table) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Table) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("dbName", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dbName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dbName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dbName", p.ThriftName(), err); }
  return err
}

func (p *Table) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Table) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Owner) < 1 { return nil}
  err = oprot.WriteFieldBegin("owner", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "owner", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Owner))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "owner", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "owner", p.ThriftName(), err); }
  return err
}

func (p *Table) WriteFieldOwner(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Table) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.CreateTime) == 0 { return nil}
  err = oprot.WriteFieldBegin("createTime", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "createTime", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.CreateTime))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "createTime", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "createTime", p.ThriftName(), err); }
  return err
}

func (p *Table) WriteFieldCreateTime(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Table) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.LastAccessTime) == 0 { return nil}
  err = oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "lastAccessTime", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.LastAccessTime))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "lastAccessTime", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "lastAccessTime", p.ThriftName(), err); }
  return err
}

func (p *Table) WriteFieldLastAccessTime(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *Table) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Retention) == 0 { return nil}
  err = oprot.WriteFieldBegin("retention", thrift.I32, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "retention", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Retention))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "retention", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "retention", p.ThriftName(), err); }
  return err
}

func (p *Table) WriteFieldRetention(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *Table) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Sd != nil {
    err = oprot.WriteFieldBegin("sd", thrift.STRUCT, 7)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "sd", p.ThriftName(), err); }
    err = p.Sd.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("StorageDescriptor", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "sd", p.ThriftName(), err); }
  }
  return err
}

func (p *Table) WriteFieldSd(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *Table) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PartitionKeys != nil {
    err = oprot.WriteFieldBegin("partitionKeys", thrift.LIST, 8)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "partitionKeys", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.PartitionKeys.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter333 := range p.PartitionKeys.Iter() {
      Iter334 := Iter333.(*FieldSchema)
      err = Iter334.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("FieldSchema", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "partitionKeys", p.ThriftName(), err); }
  }
  return err
}

func (p *Table) WriteFieldPartitionKeys(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *Table) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Parameters != nil {
    err = oprot.WriteFieldBegin("parameters", thrift.MAP, 9)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "parameters", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Parameters.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter335 := range p.Parameters.Iter() {
      Kiter336, Viter337 := Miter335.Key().(string), Miter335.Value().(string)
      err = oprot.WriteString(string(Kiter336))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter336", "", err); }
      err = oprot.WriteString(string(Viter337))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter337", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "parameters", p.ThriftName(), err); }
  }
  return err
}

func (p *Table) WriteFieldParameters(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *Table) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.ViewOriginalText) < 1 { return nil}
  err = oprot.WriteFieldBegin("viewOriginalText", thrift.STRING, 10)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "viewOriginalText", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ViewOriginalText))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "viewOriginalText", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "viewOriginalText", p.ThriftName(), err); }
  return err
}

func (p *Table) WriteFieldViewOriginalText(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField10(oprot)
}

func (p *Table) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.ViewExpandedText) < 1 { return nil}
  err = oprot.WriteFieldBegin("viewExpandedText", thrift.STRING, 11)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "viewExpandedText", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ViewExpandedText))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "viewExpandedText", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "viewExpandedText", p.ThriftName(), err); }
  return err
}

func (p *Table) WriteFieldViewExpandedText(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField11(oprot)
}

func (p *Table) WriteField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableType) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableType", thrift.STRING, 12)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "tableType", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "tableType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "tableType", p.ThriftName(), err); }
  return err
}

func (p *Table) WriteFieldTableType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField12(oprot)
}

func (p *Table) WriteField13(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Privileges != nil {
    err = oprot.WriteFieldBegin("privileges", thrift.STRUCT, 13)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(13, "privileges", p.ThriftName(), err); }
    err = p.Privileges.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PrincipalPrivilegeSet", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(13, "privileges", p.ThriftName(), err); }
  }
  return err
}

func (p *Table) WriteFieldPrivileges(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField13(oprot)
}

func (p *Table) TStructName() string {
  return "Table"
}

func (p *Table) ThriftName() string {
  return "Table"
}

func (p *Table) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Table(%+v)", *p)
}

func (p *Table) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Table)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.Owner != data.Owner {
    if p.Owner < data.Owner {
      return -1, true
    }
    return 1, true
  }
  if p.CreateTime != data.CreateTime {
    if p.CreateTime < data.CreateTime {
      return -1, true
    }
    return 1, true
  }
  if p.LastAccessTime != data.LastAccessTime {
    if p.LastAccessTime < data.LastAccessTime {
      return -1, true
    }
    return 1, true
  }
  if p.Retention != data.Retention {
    if p.Retention < data.Retention {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Sd.CompareTo(data.Sd); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.PartitionKeys.CompareTo(data.PartitionKeys); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Parameters.CompareTo(data.Parameters); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.ViewOriginalText != data.ViewOriginalText {
    if p.ViewOriginalText < data.ViewOriginalText {
      return -1, true
    }
    return 1, true
  }
  if p.ViewExpandedText != data.ViewExpandedText {
    if p.ViewExpandedText < data.ViewExpandedText {
      return -1, true
    }
    return 1, true
  }
  if p.TableType != data.TableType {
    if p.TableType < data.TableType {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Privileges.CompareTo(data.Privileges); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *Table) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.DbName
  case 3: return p.Owner
  case 4: return p.CreateTime
  case 5: return p.LastAccessTime
  case 6: return p.Retention
  case 7: return p.Sd
  case 8: return p.PartitionKeys
  case 9: return p.Parameters
  case 10: return p.ViewOriginalText
  case 11: return p.ViewExpandedText
  case 12: return p.TableType
  case 13: return p.Privileges
  }
  return nil
}

func (p *Table) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("dbName", thrift.STRING, 2),
    thrift.NewTField("owner", thrift.STRING, 3),
    thrift.NewTField("createTime", thrift.I32, 4),
    thrift.NewTField("lastAccessTime", thrift.I32, 5),
    thrift.NewTField("retention", thrift.I32, 6),
    thrift.NewTField("sd", thrift.STRUCT, 7),
    thrift.NewTField("partitionKeys", thrift.LIST, 8),
    thrift.NewTField("parameters", thrift.MAP, 9),
    thrift.NewTField("viewOriginalText", thrift.STRING, 10),
    thrift.NewTField("viewExpandedText", thrift.STRING, 11),
    thrift.NewTField("tableType", thrift.STRING, 12),
    thrift.NewTField("privileges", thrift.STRUCT, 13),
    })
}

/**
 * Attributes:
 *  - Values
 *  - DbName
 *  - TableName
 *  - CreateTime
 *  - LastAccessTime
 *  - Sd
 *  - Parameters
 *  - Privileges
 */
type Partition struct {
  thrift.TStruct
  Values thrift.TList "values"; // 1
  DbName string "dbName"; // 2
  TableName string "tableName"; // 3
  CreateTime int32 "createTime"; // 4
  LastAccessTime int32 "lastAccessTime"; // 5
  Sd *StorageDescriptor "sd"; // 6
  Parameters thrift.TMap "parameters"; // 7
  Privileges *PrincipalPrivilegeSet "privileges"; // 8
}

func NewPartition() *Partition {
  output := &Partition{
    TStruct:thrift.NewTStruct("Partition", []thrift.TField{
    thrift.NewTField("values", thrift.LIST, 1),
    thrift.NewTField("dbName", thrift.STRING, 2),
    thrift.NewTField("tableName", thrift.STRING, 3),
    thrift.NewTField("createTime", thrift.I32, 4),
    thrift.NewTField("lastAccessTime", thrift.I32, 5),
    thrift.NewTField("sd", thrift.STRUCT, 6),
    thrift.NewTField("parameters", thrift.MAP, 7),
    thrift.NewTField("privileges", thrift.STRUCT, 8),
    }),
  }
  {
  }
  return output
}

func (p *Partition) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "values" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "dbName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "createTime" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "lastAccessTime" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "sd" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "parameters" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "privileges" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Partition) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype343, _size340, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Values", "", err)
  }
  p.Values = thrift.NewTList(_etype343, _size340)
  for _i344:= 0; _i344 < _size340; _i344++ {
    v346, err347 := iprot.ReadString()
    if err347 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem345", "", err347); }
    _elem345 := v346
    p.Values.Push(_elem345)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Partition) ReadFieldValues(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Partition) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v348, err349 := iprot.ReadString()
  if err349 != nil { return thrift.NewTProtocolExceptionReadField(2, "dbName", p.ThriftName(), err349); }
  p.DbName = v348
  return err
}

func (p *Partition) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Partition) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v350, err351 := iprot.ReadString()
  if err351 != nil { return thrift.NewTProtocolExceptionReadField(3, "tableName", p.ThriftName(), err351); }
  p.TableName = v350
  return err
}

func (p *Partition) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Partition) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v352, err353 := iprot.ReadI32()
  if err353 != nil { return thrift.NewTProtocolExceptionReadField(4, "createTime", p.ThriftName(), err353); }
  p.CreateTime = v352
  return err
}

func (p *Partition) ReadFieldCreateTime(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Partition) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v354, err355 := iprot.ReadI32()
  if err355 != nil { return thrift.NewTProtocolExceptionReadField(5, "lastAccessTime", p.ThriftName(), err355); }
  p.LastAccessTime = v354
  return err
}

func (p *Partition) ReadFieldLastAccessTime(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *Partition) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Sd = NewStorageDescriptor()
  err358 := p.Sd.Read(iprot)
  if err358 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SdStorageDescriptor", err358); }
  return err
}

func (p *Partition) ReadFieldSd(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *Partition) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype362, _vtype363, _size361, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Parameters", "", err)
  }
  p.Parameters = thrift.NewTMap(_ktype362, _vtype363, _size361)
  for _i365:= 0; _i365 < _size361; _i365++ {
    v368, err369 := iprot.ReadString()
    if err369 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key366", "", err369); }
    _key366 := v368
    v370, err371 := iprot.ReadString()
    if err371 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val367", "", err371); }
    _val367 := v370
    p.Parameters.Set(_key366, _val367)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Partition) ReadFieldParameters(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *Partition) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Privileges = NewPrincipalPrivilegeSet()
  err374 := p.Privileges.Read(iprot)
  if err374 != nil { return thrift.NewTProtocolExceptionReadStruct("p.PrivilegesPrincipalPrivilegeSet", err374); }
  return err
}

func (p *Partition) ReadFieldPrivileges(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *Partition) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Partition")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Partition) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Values != nil {
    err = oprot.WriteFieldBegin("values", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "values", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Values.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter375 := range p.Values.Iter() {
      Iter376 := Iter375.(string)
      err = oprot.WriteString(string(Iter376))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter376", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "values", p.ThriftName(), err); }
  }
  return err
}

func (p *Partition) WriteFieldValues(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Partition) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("dbName", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dbName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dbName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dbName", p.ThriftName(), err); }
  return err
}

func (p *Partition) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Partition) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "tableName", p.ThriftName(), err); }
  return err
}

func (p *Partition) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Partition) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.CreateTime) == 0 { return nil}
  err = oprot.WriteFieldBegin("createTime", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "createTime", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.CreateTime))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "createTime", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "createTime", p.ThriftName(), err); }
  return err
}

func (p *Partition) WriteFieldCreateTime(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Partition) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.LastAccessTime) == 0 { return nil}
  err = oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "lastAccessTime", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.LastAccessTime))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "lastAccessTime", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "lastAccessTime", p.ThriftName(), err); }
  return err
}

func (p *Partition) WriteFieldLastAccessTime(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *Partition) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Sd != nil {
    err = oprot.WriteFieldBegin("sd", thrift.STRUCT, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "sd", p.ThriftName(), err); }
    err = p.Sd.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("StorageDescriptor", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "sd", p.ThriftName(), err); }
  }
  return err
}

func (p *Partition) WriteFieldSd(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *Partition) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Parameters != nil {
    err = oprot.WriteFieldBegin("parameters", thrift.MAP, 7)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "parameters", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Parameters.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter377 := range p.Parameters.Iter() {
      Kiter378, Viter379 := Miter377.Key().(string), Miter377.Value().(string)
      err = oprot.WriteString(string(Kiter378))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter378", "", err); }
      err = oprot.WriteString(string(Viter379))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter379", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "parameters", p.ThriftName(), err); }
  }
  return err
}

func (p *Partition) WriteFieldParameters(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *Partition) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Privileges != nil {
    err = oprot.WriteFieldBegin("privileges", thrift.STRUCT, 8)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "privileges", p.ThriftName(), err); }
    err = p.Privileges.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PrincipalPrivilegeSet", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "privileges", p.ThriftName(), err); }
  }
  return err
}

func (p *Partition) WriteFieldPrivileges(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *Partition) TStructName() string {
  return "Partition"
}

func (p *Partition) ThriftName() string {
  return "Partition"
}

func (p *Partition) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Partition(%+v)", *p)
}

func (p *Partition) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Partition)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Values.CompareTo(data.Values); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.CreateTime != data.CreateTime {
    if p.CreateTime < data.CreateTime {
      return -1, true
    }
    return 1, true
  }
  if p.LastAccessTime != data.LastAccessTime {
    if p.LastAccessTime < data.LastAccessTime {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Sd.CompareTo(data.Sd); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Parameters.CompareTo(data.Parameters); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Privileges.CompareTo(data.Privileges); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *Partition) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Values
  case 2: return p.DbName
  case 3: return p.TableName
  case 4: return p.CreateTime
  case 5: return p.LastAccessTime
  case 6: return p.Sd
  case 7: return p.Parameters
  case 8: return p.Privileges
  }
  return nil
}

func (p *Partition) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("values", thrift.LIST, 1),
    thrift.NewTField("dbName", thrift.STRING, 2),
    thrift.NewTField("tableName", thrift.STRING, 3),
    thrift.NewTField("createTime", thrift.I32, 4),
    thrift.NewTField("lastAccessTime", thrift.I32, 5),
    thrift.NewTField("sd", thrift.STRUCT, 6),
    thrift.NewTField("parameters", thrift.MAP, 7),
    thrift.NewTField("privileges", thrift.STRUCT, 8),
    })
}

/**
 * Attributes:
 *  - IndexName
 *  - IndexHandlerClass
 *  - DbName
 *  - OrigTableName
 *  - CreateTime
 *  - LastAccessTime
 *  - IndexTableName
 *  - Sd
 *  - Parameters
 *  - DeferredRebuild
 */
type Index struct {
  thrift.TStruct
  IndexName string "indexName"; // 1
  IndexHandlerClass string "indexHandlerClass"; // 2
  DbName string "dbName"; // 3
  OrigTableName string "origTableName"; // 4
  CreateTime int32 "createTime"; // 5
  LastAccessTime int32 "lastAccessTime"; // 6
  IndexTableName string "indexTableName"; // 7
  Sd *StorageDescriptor "sd"; // 8
  Parameters thrift.TMap "parameters"; // 9
  DeferredRebuild bool "deferredRebuild"; // 10
}

func NewIndex() *Index {
  output := &Index{
    TStruct:thrift.NewTStruct("Index", []thrift.TField{
    thrift.NewTField("indexName", thrift.STRING, 1),
    thrift.NewTField("indexHandlerClass", thrift.STRING, 2),
    thrift.NewTField("dbName", thrift.STRING, 3),
    thrift.NewTField("origTableName", thrift.STRING, 4),
    thrift.NewTField("createTime", thrift.I32, 5),
    thrift.NewTField("lastAccessTime", thrift.I32, 6),
    thrift.NewTField("indexTableName", thrift.STRING, 7),
    thrift.NewTField("sd", thrift.STRUCT, 8),
    thrift.NewTField("parameters", thrift.MAP, 9),
    thrift.NewTField("deferredRebuild", thrift.BOOL, 10),
    }),
  }
  {
  }
  return output
}

func (p *Index) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "indexName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "indexHandlerClass" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "dbName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "origTableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "createTime" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "lastAccessTime" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "indexTableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "sd" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "parameters" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 10 || fieldName == "deferredRebuild" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Index) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v380, err381 := iprot.ReadString()
  if err381 != nil { return thrift.NewTProtocolExceptionReadField(1, "indexName", p.ThriftName(), err381); }
  p.IndexName = v380
  return err
}

func (p *Index) ReadFieldIndexName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Index) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v382, err383 := iprot.ReadString()
  if err383 != nil { return thrift.NewTProtocolExceptionReadField(2, "indexHandlerClass", p.ThriftName(), err383); }
  p.IndexHandlerClass = v382
  return err
}

func (p *Index) ReadFieldIndexHandlerClass(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Index) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v384, err385 := iprot.ReadString()
  if err385 != nil { return thrift.NewTProtocolExceptionReadField(3, "dbName", p.ThriftName(), err385); }
  p.DbName = v384
  return err
}

func (p *Index) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Index) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v386, err387 := iprot.ReadString()
  if err387 != nil { return thrift.NewTProtocolExceptionReadField(4, "origTableName", p.ThriftName(), err387); }
  p.OrigTableName = v386
  return err
}

func (p *Index) ReadFieldOrigTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Index) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v388, err389 := iprot.ReadI32()
  if err389 != nil { return thrift.NewTProtocolExceptionReadField(5, "createTime", p.ThriftName(), err389); }
  p.CreateTime = v388
  return err
}

func (p *Index) ReadFieldCreateTime(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *Index) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v390, err391 := iprot.ReadI32()
  if err391 != nil { return thrift.NewTProtocolExceptionReadField(6, "lastAccessTime", p.ThriftName(), err391); }
  p.LastAccessTime = v390
  return err
}

func (p *Index) ReadFieldLastAccessTime(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *Index) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v392, err393 := iprot.ReadString()
  if err393 != nil { return thrift.NewTProtocolExceptionReadField(7, "indexTableName", p.ThriftName(), err393); }
  p.IndexTableName = v392
  return err
}

func (p *Index) ReadFieldIndexTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *Index) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Sd = NewStorageDescriptor()
  err396 := p.Sd.Read(iprot)
  if err396 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SdStorageDescriptor", err396); }
  return err
}

func (p *Index) ReadFieldSd(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *Index) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype400, _vtype401, _size399, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Parameters", "", err)
  }
  p.Parameters = thrift.NewTMap(_ktype400, _vtype401, _size399)
  for _i403:= 0; _i403 < _size399; _i403++ {
    v406, err407 := iprot.ReadString()
    if err407 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key404", "", err407); }
    _key404 := v406
    v408, err409 := iprot.ReadString()
    if err409 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val405", "", err409); }
    _val405 := v408
    p.Parameters.Set(_key404, _val405)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Index) ReadFieldParameters(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *Index) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v410, err411 := iprot.ReadBool()
  if err411 != nil { return thrift.NewTProtocolExceptionReadField(10, "deferredRebuild", p.ThriftName(), err411); }
  p.DeferredRebuild = v410
  return err
}

func (p *Index) ReadFieldDeferredRebuild(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField10(iprot)
}

func (p *Index) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Index")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = p.WriteField10(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Index) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.IndexName) < 1 { return nil}
  err = oprot.WriteFieldBegin("indexName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "indexName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.IndexName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "indexName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "indexName", p.ThriftName(), err); }
  return err
}

func (p *Index) WriteFieldIndexName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Index) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.IndexHandlerClass) < 1 { return nil}
  err = oprot.WriteFieldBegin("indexHandlerClass", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "indexHandlerClass", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.IndexHandlerClass))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "indexHandlerClass", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "indexHandlerClass", p.ThriftName(), err); }
  return err
}

func (p *Index) WriteFieldIndexHandlerClass(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Index) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("dbName", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "dbName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "dbName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "dbName", p.ThriftName(), err); }
  return err
}

func (p *Index) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Index) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.OrigTableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("origTableName", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "origTableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.OrigTableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "origTableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "origTableName", p.ThriftName(), err); }
  return err
}

func (p *Index) WriteFieldOrigTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Index) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.CreateTime) == 0 { return nil}
  err = oprot.WriteFieldBegin("createTime", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "createTime", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.CreateTime))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "createTime", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "createTime", p.ThriftName(), err); }
  return err
}

func (p *Index) WriteFieldCreateTime(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *Index) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.LastAccessTime) == 0 { return nil}
  err = oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "lastAccessTime", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.LastAccessTime))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "lastAccessTime", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "lastAccessTime", p.ThriftName(), err); }
  return err
}

func (p *Index) WriteFieldLastAccessTime(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *Index) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.IndexTableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("indexTableName", thrift.STRING, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "indexTableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.IndexTableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "indexTableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "indexTableName", p.ThriftName(), err); }
  return err
}

func (p *Index) WriteFieldIndexTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *Index) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Sd != nil {
    err = oprot.WriteFieldBegin("sd", thrift.STRUCT, 8)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "sd", p.ThriftName(), err); }
    err = p.Sd.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("StorageDescriptor", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "sd", p.ThriftName(), err); }
  }
  return err
}

func (p *Index) WriteFieldSd(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *Index) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Parameters != nil {
    err = oprot.WriteFieldBegin("parameters", thrift.MAP, 9)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "parameters", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Parameters.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter412 := range p.Parameters.Iter() {
      Kiter413, Viter414 := Miter412.Key().(string), Miter412.Value().(string)
      err = oprot.WriteString(string(Kiter413))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter413", "", err); }
      err = oprot.WriteString(string(Viter414))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter414", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "parameters", p.ThriftName(), err); }
  }
  return err
}

func (p *Index) WriteFieldParameters(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *Index) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("deferredRebuild", thrift.BOOL, 10)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "deferredRebuild", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.DeferredRebuild))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "deferredRebuild", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "deferredRebuild", p.ThriftName(), err); }
  return err
}

func (p *Index) WriteFieldDeferredRebuild(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField10(oprot)
}

func (p *Index) TStructName() string {
  return "Index"
}

func (p *Index) ThriftName() string {
  return "Index"
}

func (p *Index) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Index(%+v)", *p)
}

func (p *Index) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Index)
  if !ok {
    return 0, false
  }
  if p.IndexName != data.IndexName {
    if p.IndexName < data.IndexName {
      return -1, true
    }
    return 1, true
  }
  if p.IndexHandlerClass != data.IndexHandlerClass {
    if p.IndexHandlerClass < data.IndexHandlerClass {
      return -1, true
    }
    return 1, true
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.OrigTableName != data.OrigTableName {
    if p.OrigTableName < data.OrigTableName {
      return -1, true
    }
    return 1, true
  }
  if p.CreateTime != data.CreateTime {
    if p.CreateTime < data.CreateTime {
      return -1, true
    }
    return 1, true
  }
  if p.LastAccessTime != data.LastAccessTime {
    if p.LastAccessTime < data.LastAccessTime {
      return -1, true
    }
    return 1, true
  }
  if p.IndexTableName != data.IndexTableName {
    if p.IndexTableName < data.IndexTableName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Sd.CompareTo(data.Sd); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Parameters.CompareTo(data.Parameters); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.DeferredRebuild, data.DeferredRebuild); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *Index) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.IndexName
  case 2: return p.IndexHandlerClass
  case 3: return p.DbName
  case 4: return p.OrigTableName
  case 5: return p.CreateTime
  case 6: return p.LastAccessTime
  case 7: return p.IndexTableName
  case 8: return p.Sd
  case 9: return p.Parameters
  case 10: return p.DeferredRebuild
  }
  return nil
}

func (p *Index) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("indexName", thrift.STRING, 1),
    thrift.NewTField("indexHandlerClass", thrift.STRING, 2),
    thrift.NewTField("dbName", thrift.STRING, 3),
    thrift.NewTField("origTableName", thrift.STRING, 4),
    thrift.NewTField("createTime", thrift.I32, 5),
    thrift.NewTField("lastAccessTime", thrift.I32, 6),
    thrift.NewTField("indexTableName", thrift.STRING, 7),
    thrift.NewTField("sd", thrift.STRUCT, 8),
    thrift.NewTField("parameters", thrift.MAP, 9),
    thrift.NewTField("deferredRebuild", thrift.BOOL, 10),
    })
}

/**
 * Attributes:
 *  - FieldSchemas
 *  - Properties
 */
type Schema struct {
  thrift.TStruct
  FieldSchemas thrift.TList "fieldSchemas"; // 1
  Properties thrift.TMap "properties"; // 2
}

func NewSchema() *Schema {
  output := &Schema{
    TStruct:thrift.NewTStruct("Schema", []thrift.TField{
    thrift.NewTField("fieldSchemas", thrift.LIST, 1),
    thrift.NewTField("properties", thrift.MAP, 2),
    }),
  }
  {
  }
  return output
}

func (p *Schema) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "fieldSchemas" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "properties" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Schema) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype420, _size417, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.FieldSchemas", "", err)
  }
  p.FieldSchemas = thrift.NewTList(_etype420, _size417)
  for _i421:= 0; _i421 < _size417; _i421++ {
    _elem422 := NewFieldSchema()
    err425 := _elem422.Read(iprot)
    if err425 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem422FieldSchema", err425); }
    p.FieldSchemas.Push(_elem422)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Schema) ReadFieldFieldSchemas(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Schema) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype429, _vtype430, _size428, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Properties", "", err)
  }
  p.Properties = thrift.NewTMap(_ktype429, _vtype430, _size428)
  for _i432:= 0; _i432 < _size428; _i432++ {
    v435, err436 := iprot.ReadString()
    if err436 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key433", "", err436); }
    _key433 := v435
    v437, err438 := iprot.ReadString()
    if err438 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val434", "", err438); }
    _val434 := v437
    p.Properties.Set(_key433, _val434)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Schema) ReadFieldProperties(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Schema) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Schema")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Schema) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.FieldSchemas != nil {
    err = oprot.WriteFieldBegin("fieldSchemas", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "fieldSchemas", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.FieldSchemas.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter439 := range p.FieldSchemas.Iter() {
      Iter440 := Iter439.(*FieldSchema)
      err = Iter440.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("FieldSchema", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "fieldSchemas", p.ThriftName(), err); }
  }
  return err
}

func (p *Schema) WriteFieldFieldSchemas(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Schema) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Properties != nil {
    err = oprot.WriteFieldBegin("properties", thrift.MAP, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "properties", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Properties.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter441 := range p.Properties.Iter() {
      Kiter442, Viter443 := Miter441.Key().(string), Miter441.Value().(string)
      err = oprot.WriteString(string(Kiter442))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter442", "", err); }
      err = oprot.WriteString(string(Viter443))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter443", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "properties", p.ThriftName(), err); }
  }
  return err
}

func (p *Schema) WriteFieldProperties(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Schema) TStructName() string {
  return "Schema"
}

func (p *Schema) ThriftName() string {
  return "Schema"
}

func (p *Schema) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Schema(%+v)", *p)
}

func (p *Schema) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Schema)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.FieldSchemas.CompareTo(data.FieldSchemas); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Properties.CompareTo(data.Properties); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *Schema) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.FieldSchemas
  case 2: return p.Properties
  }
  return nil
}

func (p *Schema) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("fieldSchemas", thrift.LIST, 1),
    thrift.NewTField("properties", thrift.MAP, 2),
    })
}

/**
 * Attributes:
 *  - Message
 */
type MetaException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewMetaException() *MetaException {
  output := &MetaException{
    TStruct:thrift.NewTStruct("MetaException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *MetaException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MetaException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v444, err445 := iprot.ReadString()
  if err445 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err445); }
  p.Message = v444
  return err
}

func (p *MetaException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MetaException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("MetaException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MetaException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *MetaException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MetaException) TStructName() string {
  return "MetaException"
}

func (p *MetaException) ThriftName() string {
  return "MetaException"
}

func (p *MetaException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaException(%+v)", *p)
}

func (p *MetaException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MetaException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *MetaException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *MetaException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Message
 */
type UnknownTableException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewUnknownTableException() *UnknownTableException {
  output := &UnknownTableException{
    TStruct:thrift.NewTStruct("UnknownTableException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *UnknownTableException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *UnknownTableException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v446, err447 := iprot.ReadString()
  if err447 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err447); }
  p.Message = v446
  return err
}

func (p *UnknownTableException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *UnknownTableException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("UnknownTableException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *UnknownTableException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *UnknownTableException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *UnknownTableException) TStructName() string {
  return "UnknownTableException"
}

func (p *UnknownTableException) ThriftName() string {
  return "UnknownTableException"
}

func (p *UnknownTableException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnknownTableException(%+v)", *p)
}

func (p *UnknownTableException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*UnknownTableException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *UnknownTableException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *UnknownTableException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Message
 */
type UnknownDBException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewUnknownDBException() *UnknownDBException {
  output := &UnknownDBException{
    TStruct:thrift.NewTStruct("UnknownDBException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *UnknownDBException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *UnknownDBException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v448, err449 := iprot.ReadString()
  if err449 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err449); }
  p.Message = v448
  return err
}

func (p *UnknownDBException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *UnknownDBException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("UnknownDBException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *UnknownDBException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *UnknownDBException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *UnknownDBException) TStructName() string {
  return "UnknownDBException"
}

func (p *UnknownDBException) ThriftName() string {
  return "UnknownDBException"
}

func (p *UnknownDBException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnknownDBException(%+v)", *p)
}

func (p *UnknownDBException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*UnknownDBException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *UnknownDBException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *UnknownDBException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Message
 */
type AlreadyExistsException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewAlreadyExistsException() *AlreadyExistsException {
  output := &AlreadyExistsException{
    TStruct:thrift.NewTStruct("AlreadyExistsException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *AlreadyExistsException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AlreadyExistsException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v450, err451 := iprot.ReadString()
  if err451 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err451); }
  p.Message = v450
  return err
}

func (p *AlreadyExistsException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AlreadyExistsException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AlreadyExistsException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AlreadyExistsException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *AlreadyExistsException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AlreadyExistsException) TStructName() string {
  return "AlreadyExistsException"
}

func (p *AlreadyExistsException) ThriftName() string {
  return "AlreadyExistsException"
}

func (p *AlreadyExistsException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlreadyExistsException(%+v)", *p)
}

func (p *AlreadyExistsException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AlreadyExistsException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AlreadyExistsException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *AlreadyExistsException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Message
 */
type InvalidObjectException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewInvalidObjectException() *InvalidObjectException {
  output := &InvalidObjectException{
    TStruct:thrift.NewTStruct("InvalidObjectException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *InvalidObjectException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *InvalidObjectException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v452, err453 := iprot.ReadString()
  if err453 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err453); }
  p.Message = v452
  return err
}

func (p *InvalidObjectException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *InvalidObjectException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("InvalidObjectException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *InvalidObjectException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *InvalidObjectException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *InvalidObjectException) TStructName() string {
  return "InvalidObjectException"
}

func (p *InvalidObjectException) ThriftName() string {
  return "InvalidObjectException"
}

func (p *InvalidObjectException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidObjectException(%+v)", *p)
}

func (p *InvalidObjectException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*InvalidObjectException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *InvalidObjectException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *InvalidObjectException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Message
 */
type NoSuchObjectException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewNoSuchObjectException() *NoSuchObjectException {
  output := &NoSuchObjectException{
    TStruct:thrift.NewTStruct("NoSuchObjectException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *NoSuchObjectException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *NoSuchObjectException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v454, err455 := iprot.ReadString()
  if err455 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err455); }
  p.Message = v454
  return err
}

func (p *NoSuchObjectException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *NoSuchObjectException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("NoSuchObjectException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *NoSuchObjectException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *NoSuchObjectException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *NoSuchObjectException) TStructName() string {
  return "NoSuchObjectException"
}

func (p *NoSuchObjectException) ThriftName() string {
  return "NoSuchObjectException"
}

func (p *NoSuchObjectException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoSuchObjectException(%+v)", *p)
}

func (p *NoSuchObjectException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*NoSuchObjectException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *NoSuchObjectException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *NoSuchObjectException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Message
 */
type IndexAlreadyExistsException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewIndexAlreadyExistsException() *IndexAlreadyExistsException {
  output := &IndexAlreadyExistsException{
    TStruct:thrift.NewTStruct("IndexAlreadyExistsException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *IndexAlreadyExistsException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IndexAlreadyExistsException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v456, err457 := iprot.ReadString()
  if err457 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err457); }
  p.Message = v456
  return err
}

func (p *IndexAlreadyExistsException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IndexAlreadyExistsException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IndexAlreadyExistsException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IndexAlreadyExistsException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *IndexAlreadyExistsException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IndexAlreadyExistsException) TStructName() string {
  return "IndexAlreadyExistsException"
}

func (p *IndexAlreadyExistsException) ThriftName() string {
  return "IndexAlreadyExistsException"
}

func (p *IndexAlreadyExistsException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexAlreadyExistsException(%+v)", *p)
}

func (p *IndexAlreadyExistsException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IndexAlreadyExistsException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IndexAlreadyExistsException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *IndexAlreadyExistsException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Message
 */
type InvalidOperationException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewInvalidOperationException() *InvalidOperationException {
  output := &InvalidOperationException{
    TStruct:thrift.NewTStruct("InvalidOperationException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *InvalidOperationException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *InvalidOperationException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v458, err459 := iprot.ReadString()
  if err459 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err459); }
  p.Message = v458
  return err
}

func (p *InvalidOperationException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *InvalidOperationException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("InvalidOperationException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *InvalidOperationException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *InvalidOperationException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *InvalidOperationException) TStructName() string {
  return "InvalidOperationException"
}

func (p *InvalidOperationException) ThriftName() string {
  return "InvalidOperationException"
}

func (p *InvalidOperationException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidOperationException(%+v)", *p)
}

func (p *InvalidOperationException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*InvalidOperationException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *InvalidOperationException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *InvalidOperationException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Message
 */
type ConfigValSecurityException struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewConfigValSecurityException() *ConfigValSecurityException {
  output := &ConfigValSecurityException{
    TStruct:thrift.NewTStruct("ConfigValSecurityException", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *ConfigValSecurityException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ConfigValSecurityException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v460, err461 := iprot.ReadString()
  if err461 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err461); }
  p.Message = v460
  return err
}

func (p *ConfigValSecurityException) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ConfigValSecurityException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ConfigValSecurityException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ConfigValSecurityException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *ConfigValSecurityException) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ConfigValSecurityException) TStructName() string {
  return "ConfigValSecurityException"
}

func (p *ConfigValSecurityException) ThriftName() string {
  return "ConfigValSecurityException"
}

func (p *ConfigValSecurityException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigValSecurityException(%+v)", *p)
}

func (p *ConfigValSecurityException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ConfigValSecurityException)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ConfigValSecurityException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *ConfigValSecurityException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

const DDLTIME = "transient_lastDdlTime"
const ISARCHIVED = "is_archived"
const ORIGINALLOCATION = "original_location"
const METATABLECOLUMNS = "columns"
const METATABLECOLUMNTYPES = "columns.types"
const BUCKETFIELDNAME = "bucket_field_name"
const BUCKETCOUNT = "bucket_count"
const FIELDTODIMENSION = "field_to_dimension"
const METATABLENAME = "name"
const METATABLEDB = "db"
const METATABLELOCATION = "location"
const METATABLESERDE = "serde"
const METATABLEPARTITIONCOLUMNS = "partition_columns"
const FILEINPUTFORMAT = "file.inputformat"
const FILEOUTPUTFORMAT = "file.outputformat"
const METATABLESTORAGE = "storage_handler"
func init() {
}

