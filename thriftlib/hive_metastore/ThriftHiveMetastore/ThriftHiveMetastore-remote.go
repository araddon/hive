/* Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/hive_metastore"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  create_database(database *Database) (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_database(name string) (retval1833 *Database, o1 *NoSuchObjectException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  drop_database(name string, deleteData bool) (o1 *NoSuchObjectException, o2 *InvalidOperationException, o3 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_databases(pattern string) (retval1835 thrift.TList, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_all_databases() (retval1836 thrift.TList, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  alter_database(dbname string, db *Database) (o1 *MetaException, o2 *NoSuchObjectException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_type(name string) (retval1838 *Type, o1 *MetaException, o2 *NoSuchObjectException, err error)\n")
  fmt.Fprint(os.Stderr, "  create_type(type_a1 *Type) (retval1839 bool, o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  drop_type(type_a1 string) (retval1840 bool, o1 *MetaException, o2 *NoSuchObjectException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_type_all(name string) (retval1841 thrift.TMap, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_fields(db_name string, table_name string) (retval1842 thrift.TList, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_schema(db_name string, table_name string) (retval1843 thrift.TList, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error)\n")
  fmt.Fprint(os.Stderr, "  create_table(tbl *Table) (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, o4 *NoSuchObjectException, err error)\n")
  fmt.Fprint(os.Stderr, "  drop_table(dbname string, name string, deleteData bool) (o1 *NoSuchObjectException, o3 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_tables(db_name string, pattern string) (retval1846 thrift.TList, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_all_tables(db_name string) (retval1847 thrift.TList, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_table(dbname string, tbl_name string) (retval1848 *Table, o1 *MetaException, o2 *NoSuchObjectException, err error)\n")
  fmt.Fprint(os.Stderr, "  alter_table(dbname string, tbl_name string, new_tbl *Table) (o1 *InvalidOperationException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  add_partition(new_part *Partition) (retval1850 *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  append_partition(db_name string, tbl_name string, part_vals thrift.TList) (retval1851 *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  append_partition_by_name(db_name string, tbl_name string, part_name string) (retval1852 *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  drop_partition(db_name string, tbl_name string, part_vals thrift.TList, deleteData bool) (retval1853 bool, o1 *NoSuchObjectException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  drop_partition_by_name(db_name string, tbl_name string, part_name string, deleteData bool) (retval1854 bool, o1 *NoSuchObjectException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_partition(db_name string, tbl_name string, part_vals thrift.TList) (retval1855 *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_partition_with_auth(db_name string, tbl_name string, part_vals thrift.TList, user_name string, group_names thrift.TList) (retval1856 *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_partition_by_name(db_name string, tbl_name string, part_name string) (retval1857 *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_partitions(db_name string, tbl_name string, max_parts int16) (retval1858 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_partitions_with_auth(db_name string, tbl_name string, max_parts int16, user_name string, group_names thrift.TList) (retval1859 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_partition_names(db_name string, tbl_name string, max_parts int16) (retval1860 thrift.TList, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_partitions_ps(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16) (retval1861 thrift.TList, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_partitions_ps_with_auth(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16, user_name string, group_names thrift.TList) (retval1862 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_partition_names_ps(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16) (retval1863 thrift.TList, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_partitions_by_filter(db_name string, tbl_name string, filter string, max_parts int16) (retval1864 thrift.TList, o1 *MetaException, o2 *NoSuchObjectException, err error)\n")
  fmt.Fprint(os.Stderr, "  alter_partition(db_name string, tbl_name string, new_part *Partition) (o1 *InvalidOperationException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_config_value(name string, defaultValue string) (retval1866 string, o1 *ConfigValSecurityException, err error)\n")
  fmt.Fprint(os.Stderr, "  partition_name_to_vals(part_name string) (retval1867 thrift.TList, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  partition_name_to_spec(part_name string) (retval1868 thrift.TMap, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  add_index(new_index *Index, index_table *Table) (retval1869 *Index, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  alter_index(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (o1 *InvalidOperationException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  drop_index_by_name(db_name string, tbl_name string, index_name string, deleteData bool) (retval1871 bool, o1 *NoSuchObjectException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_index_by_name(db_name string, tbl_name string, index_name string) (retval1872 *Index, o1 *MetaException, o2 *NoSuchObjectException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_indexes(db_name string, tbl_name string, max_indexes int16) (retval1873 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_index_names(db_name string, tbl_name string, max_indexes int16) (retval1874 thrift.TList, o2 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  create_role(role *Role) (retval1875 bool, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  drop_role(role_name string) (retval1876 bool, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_role_names() (retval1877 thrift.TList, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  grant_role(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (retval1878 bool, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  revoke_role(role_name string, principal_name string, principal_type PrincipalType) (retval1879 bool, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  list_roles(principal_name string, principal_type PrincipalType) (retval1880 thrift.TList, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_privilege_set(hiveObject *HiveObjectRef, user_name string, group_names thrift.TList) (retval1881 *PrincipalPrivilegeSet, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  list_privileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (retval1882 thrift.TList, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  grant_privileges(privileges *PrivilegeBag) (retval1883 bool, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  revoke_privileges(privileges *PrivilegeBag) (retval1884 bool, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_delegation_token(renewer_kerberos_principal_name string) (retval1885 string, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_delegation_token_with_signature(renewer_kerberos_principal_name string, token_signature string) (retval1886 string, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  renew_delegation_token(token_str_form string) (retval1887 int64, o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "  cancel_delegation_token(token_str_form string) (o1 *MetaException, err error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.Error())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.Error())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := hive_metastore.NewThriftHiveMetastoreClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.Error())
    os.Exit(1)
  }
  
  switch cmd {
  case "create_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CreateDatabase requires 1 args\n")
      flag.Usage()
    }
    arg1889 := flag.Arg(1)
    mbTrans1890 := thrift.NewTMemoryBufferLen(len(arg1889))
    defer mbTrans1890.Close()
    _, err1891 := mbTrans1890.WriteString(arg1889)
    if err1891 != nil {
      Usage()
      return
    }
    factory1892 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1893 := factory1892.GetProtocol(mbTrans1890)
    argvalue0 := hive_metastore.NewDatabase()
    err1894 := argvalue0.Read(jsProt1893)
    if err1894 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateDatabase(value0))
    fmt.Print("\n")
    break
  case "get_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDatabase requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabase(value0))
    fmt.Print("\n")
    break
  case "drop_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "DropDatabase requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.DropDatabase(value0, value1))
    fmt.Print("\n")
    break
  case "get_databases":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDatabases requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabases(value0))
    fmt.Print("\n")
    break
  case "get_all_databases":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetAllDatabases requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetAllDatabases())
    fmt.Print("\n")
    break
  case "alter_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "AlterDatabase requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1900 := flag.Arg(2)
    mbTrans1901 := thrift.NewTMemoryBufferLen(len(arg1900))
    defer mbTrans1901.Close()
    _, err1902 := mbTrans1901.WriteString(arg1900)
    if err1902 != nil {
      Usage()
      return
    }
    factory1903 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1904 := factory1903.GetProtocol(mbTrans1901)
    argvalue1 := hive_metastore.NewDatabase()
    err1905 := argvalue1.Read(jsProt1904)
    if err1905 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AlterDatabase(value0, value1))
    fmt.Print("\n")
    break
  case "get_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetType requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetType(value0))
    fmt.Print("\n")
    break
  case "create_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CreateType requires 1 args\n")
      flag.Usage()
    }
    arg1907 := flag.Arg(1)
    mbTrans1908 := thrift.NewTMemoryBufferLen(len(arg1907))
    defer mbTrans1908.Close()
    _, err1909 := mbTrans1908.WriteString(arg1907)
    if err1909 != nil {
      Usage()
      return
    }
    factory1910 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1911 := factory1910.GetProtocol(mbTrans1908)
    argvalue0 := hive_metastore.NewType()
    err1912 := argvalue0.Read(jsProt1911)
    if err1912 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateType(value0))
    fmt.Print("\n")
    break
  case "drop_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DropType requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropType(value0))
    fmt.Print("\n")
    break
  case "get_type_all":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetTypeAll requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTypeAll(value0))
    fmt.Print("\n")
    break
  case "get_fields":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetFields requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFields(value0, value1))
    fmt.Print("\n")
    break
  case "get_schema":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetSchema requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetSchema(value0, value1))
    fmt.Print("\n")
    break
  case "create_table":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CreateTable requires 1 args\n")
      flag.Usage()
    }
    arg1919 := flag.Arg(1)
    mbTrans1920 := thrift.NewTMemoryBufferLen(len(arg1919))
    defer mbTrans1920.Close()
    _, err1921 := mbTrans1920.WriteString(arg1919)
    if err1921 != nil {
      Usage()
      return
    }
    factory1922 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1923 := factory1922.GetProtocol(mbTrans1920)
    argvalue0 := hive_metastore.NewTable()
    err1924 := argvalue0.Read(jsProt1923)
    if err1924 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTable(value0))
    fmt.Print("\n")
    break
  case "drop_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "DropTable requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropTable(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_tables":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetTables requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTables(value0, value1))
    fmt.Print("\n")
    break
  case "get_all_tables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetAllTables requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAllTables(value0))
    fmt.Print("\n")
    break
  case "get_table":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetTable requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTable(value0, value1))
    fmt.Print("\n")
    break
  case "alter_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AlterTable requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1935 := flag.Arg(3)
    mbTrans1936 := thrift.NewTMemoryBufferLen(len(arg1935))
    defer mbTrans1936.Close()
    _, err1937 := mbTrans1936.WriteString(arg1935)
    if err1937 != nil {
      Usage()
      return
    }
    factory1938 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1939 := factory1938.GetProtocol(mbTrans1936)
    argvalue2 := hive_metastore.NewTable()
    err1940 := argvalue2.Read(jsProt1939)
    if err1940 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterTable(value0, value1, value2))
    fmt.Print("\n")
    break
  case "add_partition":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "AddPartition requires 1 args\n")
      flag.Usage()
    }
    arg1941 := flag.Arg(1)
    mbTrans1942 := thrift.NewTMemoryBufferLen(len(arg1941))
    defer mbTrans1942.Close()
    _, err1943 := mbTrans1942.WriteString(arg1941)
    if err1943 != nil {
      Usage()
      return
    }
    factory1944 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1945 := factory1944.GetProtocol(mbTrans1942)
    argvalue0 := hive_metastore.NewPartition()
    err1946 := argvalue0.Read(jsProt1945)
    if err1946 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartition(value0))
    fmt.Print("\n")
    break
  case "append_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AppendPartition requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1949 := flag.Arg(3)
    mbTrans1950 := thrift.NewTMemoryBufferLen(len(arg1949))
    defer mbTrans1950.Close()
    _, err1951 := mbTrans1950.WriteString(arg1949)
    if err1951 != nil { 
      Usage()
      return
    }
    factory1952 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1953 := factory1952.GetProtocol(mbTrans1950)
    containerStruct2 := hive_metastore.NewAppendPartitionArgs()
    err1954 := containerStruct2.ReadField3(jsProt1953)
    if err1954 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.AppendPartition(value0, value1, value2))
    fmt.Print("\n")
    break
  case "append_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AppendPartitionByName requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AppendPartitionByName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "drop_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "DropPartition requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1960 := flag.Arg(3)
    mbTrans1961 := thrift.NewTMemoryBufferLen(len(arg1960))
    defer mbTrans1961.Close()
    _, err1962 := mbTrans1961.WriteString(arg1960)
    if err1962 != nil { 
      Usage()
      return
    }
    factory1963 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1964 := factory1963.GetProtocol(mbTrans1961)
    containerStruct2 := hive_metastore.NewDropPartitionArgs()
    err1965 := containerStruct2.ReadField3(jsProt1964)
    if err1965 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartition(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "DropPartitionByName requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartitionByName(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetPartition requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1973 := flag.Arg(3)
    mbTrans1974 := thrift.NewTMemoryBufferLen(len(arg1973))
    defer mbTrans1974.Close()
    _, err1975 := mbTrans1974.WriteString(arg1973)
    if err1975 != nil { 
      Usage()
      return
    }
    factory1976 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1977 := factory1976.GetProtocol(mbTrans1974)
    containerStruct2 := hive_metastore.NewGetPartitionArgs()
    err1978 := containerStruct2.ReadField3(jsProt1977)
    if err1978 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.GetPartition(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "GetPartitionWithAuth requires 5 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1981 := flag.Arg(3)
    mbTrans1982 := thrift.NewTMemoryBufferLen(len(arg1981))
    defer mbTrans1982.Close()
    _, err1983 := mbTrans1982.WriteString(arg1981)
    if err1983 != nil { 
      Usage()
      return
    }
    factory1984 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1985 := factory1984.GetProtocol(mbTrans1982)
    containerStruct2 := hive_metastore.NewGetPartitionWithAuthArgs()
    err1986 := containerStruct2.ReadField3(jsProt1985)
    if err1986 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1988 := flag.Arg(5)
    mbTrans1989 := thrift.NewTMemoryBufferLen(len(arg1988))
    defer mbTrans1989.Close()
    _, err1990 := mbTrans1989.WriteString(arg1988)
    if err1990 != nil { 
      Usage()
      return
    }
    factory1991 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1992 := factory1991.GetProtocol(mbTrans1989)
    containerStruct4 := hive_metastore.NewGetPartitionWithAuthArgs()
    err1993 := containerStruct4.ReadField5(jsProt1992)
    if err1993 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionWithAuth(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetPartitionByName requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPartitionByName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetPartitions requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1999 := (strconv.Atoi(flag.Arg(3)))
    if err1999 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitions(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "GetPartitionsWithAuth requires 5 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err2002 := (strconv.Atoi(flag.Arg(3)))
    if err2002 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg2004 := flag.Arg(5)
    mbTrans2005 := thrift.NewTMemoryBufferLen(len(arg2004))
    defer mbTrans2005.Close()
    _, err2006 := mbTrans2005.WriteString(arg2004)
    if err2006 != nil { 
      Usage()
      return
    }
    factory2007 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2008 := factory2007.GetProtocol(mbTrans2005)
    containerStruct4 := hive_metastore.NewGetPartitionsWithAuthArgs()
    err2009 := containerStruct4.ReadField5(jsProt2008)
    if err2009 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionsWithAuth(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetPartitionNames requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err2012 := (strconv.Atoi(flag.Arg(3)))
    if err2012 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionNames(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetPartitionsPs requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2015 := flag.Arg(3)
    mbTrans2016 := thrift.NewTMemoryBufferLen(len(arg2015))
    defer mbTrans2016.Close()
    _, err2017 := mbTrans2016.WriteString(arg2015)
    if err2017 != nil { 
      Usage()
      return
    }
    factory2018 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2019 := factory2018.GetProtocol(mbTrans2016)
    containerStruct2 := hive_metastore.NewGetPartitionsPsArgs()
    err2020 := containerStruct2.ReadField3(jsProt2019)
    if err2020 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err2021 := (strconv.Atoi(flag.Arg(4)))
    if err2021 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsPs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_ps_with_auth":
    if flag.NArg() - 1 != 6 {
      fmt.Fprint(os.Stderr, "GetPartitionsPsWithAuth requires 6 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2024 := flag.Arg(3)
    mbTrans2025 := thrift.NewTMemoryBufferLen(len(arg2024))
    defer mbTrans2025.Close()
    _, err2026 := mbTrans2025.WriteString(arg2024)
    if err2026 != nil { 
      Usage()
      return
    }
    factory2027 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2028 := factory2027.GetProtocol(mbTrans2025)
    containerStruct2 := hive_metastore.NewGetPartitionsPsWithAuthArgs()
    err2029 := containerStruct2.ReadField3(jsProt2028)
    if err2029 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err2030 := (strconv.Atoi(flag.Arg(4)))
    if err2030 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg2032 := flag.Arg(6)
    mbTrans2033 := thrift.NewTMemoryBufferLen(len(arg2032))
    defer mbTrans2033.Close()
    _, err2034 := mbTrans2033.WriteString(arg2032)
    if err2034 != nil { 
      Usage()
      return
    }
    factory2035 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2036 := factory2035.GetProtocol(mbTrans2033)
    containerStruct5 := hive_metastore.NewGetPartitionsPsWithAuthArgs()
    err2037 := containerStruct5.ReadField6(jsProt2036)
    if err2037 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.GroupNames
    value5 := argvalue5
    fmt.Print(client.GetPartitionsPsWithAuth(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "get_partition_names_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetPartitionNamesPs requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2040 := flag.Arg(3)
    mbTrans2041 := thrift.NewTMemoryBufferLen(len(arg2040))
    defer mbTrans2041.Close()
    _, err2042 := mbTrans2041.WriteString(arg2040)
    if err2042 != nil { 
      Usage()
      return
    }
    factory2043 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2044 := factory2043.GetProtocol(mbTrans2041)
    containerStruct2 := hive_metastore.NewGetPartitionNamesPsArgs()
    err2045 := containerStruct2.ReadField3(jsProt2044)
    if err2045 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err2046 := (strconv.Atoi(flag.Arg(4)))
    if err2046 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionNamesPs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetPartitionsByFilter requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err2050 := (strconv.Atoi(flag.Arg(4)))
    if err2050 != nil {
      Usage()
      return
    }
    argvalue3 := byte(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsByFilter(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "AlterPartition requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2053 := flag.Arg(3)
    mbTrans2054 := thrift.NewTMemoryBufferLen(len(arg2053))
    defer mbTrans2054.Close()
    _, err2055 := mbTrans2054.WriteString(arg2053)
    if err2055 != nil {
      Usage()
      return
    }
    factory2056 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2057 := factory2056.GetProtocol(mbTrans2054)
    argvalue2 := hive_metastore.NewPartition()
    err2058 := argvalue2.Read(jsProt2057)
    if err2058 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterPartition(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_config_value":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetConfigValue requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetConfigValue(value0, value1))
    fmt.Print("\n")
    break
  case "partition_name_to_vals":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PartitionNameToVals requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToVals(value0))
    fmt.Print("\n")
    break
  case "partition_name_to_spec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "PartitionNameToSpec requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToSpec(value0))
    fmt.Print("\n")
    break
  case "add_index":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "AddIndex requires 2 args\n")
      flag.Usage()
    }
    arg2063 := flag.Arg(1)
    mbTrans2064 := thrift.NewTMemoryBufferLen(len(arg2063))
    defer mbTrans2064.Close()
    _, err2065 := mbTrans2064.WriteString(arg2063)
    if err2065 != nil {
      Usage()
      return
    }
    factory2066 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2067 := factory2066.GetProtocol(mbTrans2064)
    argvalue0 := hive_metastore.NewIndex()
    err2068 := argvalue0.Read(jsProt2067)
    if err2068 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2069 := flag.Arg(2)
    mbTrans2070 := thrift.NewTMemoryBufferLen(len(arg2069))
    defer mbTrans2070.Close()
    _, err2071 := mbTrans2070.WriteString(arg2069)
    if err2071 != nil {
      Usage()
      return
    }
    factory2072 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2073 := factory2072.GetProtocol(mbTrans2070)
    argvalue1 := hive_metastore.NewTable()
    err2074 := argvalue1.Read(jsProt2073)
    if err2074 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddIndex(value0, value1))
    fmt.Print("\n")
    break
  case "alter_index":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AlterIndex requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg2078 := flag.Arg(4)
    mbTrans2079 := thrift.NewTMemoryBufferLen(len(arg2078))
    defer mbTrans2079.Close()
    _, err2080 := mbTrans2079.WriteString(arg2078)
    if err2080 != nil {
      Usage()
      return
    }
    factory2081 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2082 := factory2081.GetProtocol(mbTrans2079)
    argvalue3 := hive_metastore.NewIndex()
    err2083 := argvalue3.Read(jsProt2082)
    if err2083 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterIndex(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_index_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "DropIndexByName requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropIndexByName(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_index_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetIndexByName requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetIndexByName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_indexes":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetIndexes requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err2093 := (strconv.Atoi(flag.Arg(3)))
    if err2093 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexes(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_index_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetIndexNames requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err2096 := (strconv.Atoi(flag.Arg(3)))
    if err2096 != nil {
      Usage()
      return
    }
    argvalue2 := byte(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexNames(value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CreateRole requires 1 args\n")
      flag.Usage()
    }
    arg2097 := flag.Arg(1)
    mbTrans2098 := thrift.NewTMemoryBufferLen(len(arg2097))
    defer mbTrans2098.Close()
    _, err2099 := mbTrans2098.WriteString(arg2097)
    if err2099 != nil {
      Usage()
      return
    }
    factory2100 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2101 := factory2100.GetProtocol(mbTrans2098)
    argvalue0 := hive_metastore.NewRole()
    err2102 := argvalue0.Read(jsProt2101)
    if err2102 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateRole(value0))
    fmt.Print("\n")
    break
  case "drop_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DropRole requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropRole(value0))
    fmt.Print("\n")
    break
  case "get_role_names":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetRoleNames requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetRoleNames())
    fmt.Print("\n")
    break
  case "grant_role":
    if flag.NArg() - 1 != 6 {
      fmt.Fprint(os.Stderr, "GrantRole requires 6 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hive_metastore.PrincipalType(tmp4)
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GrantRole(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "revoke_role":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RevokeRole requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    fmt.Print(client.RevokeRole(value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_roles":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "ListRoles requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    fmt.Print(client.ListRoles(value0, value1))
    fmt.Print("\n")
    break
  case "get_privilege_set":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetPrivilegeSet requires 3 args\n")
      flag.Usage()
    }
    arg2111 := flag.Arg(1)
    mbTrans2112 := thrift.NewTMemoryBufferLen(len(arg2111))
    defer mbTrans2112.Close()
    _, err2113 := mbTrans2112.WriteString(arg2111)
    if err2113 != nil {
      Usage()
      return
    }
    factory2114 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2115 := factory2114.GetProtocol(mbTrans2112)
    argvalue0 := hive_metastore.NewHiveObjectRef()
    err2116 := argvalue0.Read(jsProt2115)
    if err2116 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2118 := flag.Arg(3)
    mbTrans2119 := thrift.NewTMemoryBufferLen(len(arg2118))
    defer mbTrans2119.Close()
    _, err2120 := mbTrans2119.WriteString(arg2118)
    if err2120 != nil { 
      Usage()
      return
    }
    factory2121 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2122 := factory2121.GetProtocol(mbTrans2119)
    containerStruct2 := hive_metastore.NewGetPrivilegeSetArgs()
    err2123 := containerStruct2.ReadField3(jsProt2122)
    if err2123 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.GroupNames
    value2 := argvalue2
    fmt.Print(client.GetPrivilegeSet(value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_privileges":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "ListPrivileges requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    arg2125 := flag.Arg(3)
    mbTrans2126 := thrift.NewTMemoryBufferLen(len(arg2125))
    defer mbTrans2126.Close()
    _, err2127 := mbTrans2126.WriteString(arg2125)
    if err2127 != nil {
      Usage()
      return
    }
    factory2128 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2129 := factory2128.GetProtocol(mbTrans2126)
    argvalue2 := hive_metastore.NewHiveObjectRef()
    err2130 := argvalue2.Read(jsProt2129)
    if err2130 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ListPrivileges(value0, value1, value2))
    fmt.Print("\n")
    break
  case "grant_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GrantPrivileges requires 1 args\n")
      flag.Usage()
    }
    arg2131 := flag.Arg(1)
    mbTrans2132 := thrift.NewTMemoryBufferLen(len(arg2131))
    defer mbTrans2132.Close()
    _, err2133 := mbTrans2132.WriteString(arg2131)
    if err2133 != nil {
      Usage()
      return
    }
    factory2134 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2135 := factory2134.GetProtocol(mbTrans2132)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err2136 := argvalue0.Read(jsProt2135)
    if err2136 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantPrivileges(value0))
    fmt.Print("\n")
    break
  case "revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RevokePrivileges requires 1 args\n")
      flag.Usage()
    }
    arg2137 := flag.Arg(1)
    mbTrans2138 := thrift.NewTMemoryBufferLen(len(arg2137))
    defer mbTrans2138.Close()
    _, err2139 := mbTrans2138.WriteString(arg2137)
    if err2139 != nil {
      Usage()
      return
    }
    factory2140 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2141 := factory2140.GetProtocol(mbTrans2138)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err2142 := argvalue0.Read(jsProt2141)
    if err2142 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokePrivileges(value0))
    fmt.Print("\n")
    break
  case "get_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetDelegationToken requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDelegationToken(value0))
    fmt.Print("\n")
    break
  case "get_delegation_token_with_signature":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetDelegationTokenWithSignature requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDelegationTokenWithSignature(value0, value1))
    fmt.Print("\n")
    break
  case "renew_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "RenewDelegationToken requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RenewDelegationToken(value0))
    fmt.Print("\n")
    break
  case "cancel_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "CancelDelegationToken requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CancelDelegationToken(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
