/* Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package hive_metastore;

import (
        "thrift"
        "fmt"
)

import "github.com/araddon/hive/thriftlib/fb303"

type IThriftHiveMetastore interface {
  fb303.IFacebookService
  /**
   *This interface is live.
   */

  /**
   * Parameters:
   *  - Database
   */
  CreateDatabase(database *Database) (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error)
  /**
   * Parameters:
   *  - Name
   */
  GetDatabase(name string) (retval463 *Database, o1 *NoSuchObjectException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - Name
   *  - DeleteData
   */
  DropDatabase(name string, deleteData bool) (o1 *NoSuchObjectException, o2 *InvalidOperationException, o3 *MetaException, err error)
  /**
   * Parameters:
   *  - Pattern
   */
  GetDatabases(pattern string) (retval465 thrift.TList, o1 *MetaException, err error)
  GetAllDatabases() (retval466 thrift.TList, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - Dbname
   *  - Db
   */
  AlterDatabase(dbname string, db *Database) (o1 *MetaException, o2 *NoSuchObjectException, err error)
  /**
   * Parameters:
   *  - Name
   */
  GetType(name string) (retval468 *Type, o1 *MetaException, o2 *NoSuchObjectException, err error)
  /**
   * Parameters:
   *  - TypeA1
   */
  CreateType(type_a1 *Type) (retval469 bool, o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error)
  /**
   * Parameters:
   *  - TypeA1
   */
  DropType(type_a1 string) (retval470 bool, o1 *MetaException, o2 *NoSuchObjectException, err error)
  /**
   * Parameters:
   *  - Name
   */
  GetTypeAll(name string) (retval471 thrift.TMap, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TableName
   */
  GetFields(db_name string, table_name string) (retval472 thrift.TList, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TableName
   */
  GetSchema(db_name string, table_name string) (retval473 thrift.TList, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error)
  /**
   * Parameters:
   *  - Tbl
   */
  CreateTable(tbl *Table) (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, o4 *NoSuchObjectException, err error)
  /**
   * Parameters:
   *  - Dbname
   *  - Name
   *  - DeleteData
   */
  DropTable(dbname string, name string, deleteData bool) (o1 *NoSuchObjectException, o3 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - Pattern
   */
  GetTables(db_name string, pattern string) (retval476 thrift.TList, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   */
  GetAllTables(db_name string) (retval477 thrift.TList, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - Dbname
   *  - TblName
   */
  GetTable(dbname string, tbl_name string) (retval478 *Table, o1 *MetaException, o2 *NoSuchObjectException, err error)
  /**
   * Parameters:
   *  - Dbname
   *  - TblName
   *  - NewTbl
   */
  AlterTable(dbname string, tbl_name string, new_tbl *Table) (o1 *InvalidOperationException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - NewPart
   */
  AddPartition(new_part *Partition) (retval480 *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - PartVals
   */
  AppendPartition(db_name string, tbl_name string, part_vals thrift.TList) (retval481 *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - PartName
   */
  AppendPartitionByName(db_name string, tbl_name string, part_name string) (retval482 *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - PartVals
   *  - DeleteData
   */
  DropPartition(db_name string, tbl_name string, part_vals thrift.TList, deleteData bool) (retval483 bool, o1 *NoSuchObjectException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - PartName
   *  - DeleteData
   */
  DropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (retval484 bool, o1 *NoSuchObjectException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - PartVals
   */
  GetPartition(db_name string, tbl_name string, part_vals thrift.TList) (retval485 *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - PartVals
   *  - UserName
   *  - GroupNames
   */
  GetPartitionWithAuth(db_name string, tbl_name string, part_vals thrift.TList, user_name string, group_names thrift.TList) (retval486 *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - PartName
   */
  GetPartitionByName(db_name string, tbl_name string, part_name string) (retval487 *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - MaxParts
   */
  GetPartitions(db_name string, tbl_name string, max_parts int16) (retval488 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - MaxParts
   *  - UserName
   *  - GroupNames
   */
  GetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names thrift.TList) (retval489 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - MaxParts
   */
  GetPartitionNames(db_name string, tbl_name string, max_parts int16) (retval490 thrift.TList, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - PartVals
   *  - MaxParts
   */
  GetPartitionsPs(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16) (retval491 thrift.TList, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - PartVals
   *  - MaxParts
   *  - UserName
   *  - GroupNames
   */
  GetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16, user_name string, group_names thrift.TList) (retval492 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - PartVals
   *  - MaxParts
   */
  GetPartitionNamesPs(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16) (retval493 thrift.TList, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - Filter
   *  - MaxParts
   */
  GetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (retval494 thrift.TList, o1 *MetaException, o2 *NoSuchObjectException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - NewPart
   */
  AlterPartition(db_name string, tbl_name string, new_part *Partition) (o1 *InvalidOperationException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - Name
   *  - DefaultValue
   */
  GetConfigValue(name string, defaultValue string) (retval496 string, o1 *ConfigValSecurityException, err error)
  /**
   * Parameters:
   *  - PartName
   */
  PartitionNameToVals(part_name string) (retval497 thrift.TList, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - PartName
   */
  PartitionNameToSpec(part_name string) (retval498 thrift.TMap, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - NewIndex
   *  - IndexTable
   */
  AddIndex(new_index *Index, index_table *Table) (retval499 *Index, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)
  /**
   * Parameters:
   *  - Dbname
   *  - BaseTblName
   *  - IdxName
   *  - NewIdx
   */
  AlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (o1 *InvalidOperationException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - IndexName
   *  - DeleteData
   */
  DropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (retval501 bool, o1 *NoSuchObjectException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - IndexName
   */
  GetIndexByName(db_name string, tbl_name string, index_name string) (retval502 *Index, o1 *MetaException, o2 *NoSuchObjectException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - MaxIndexes
   */
  GetIndexes(db_name string, tbl_name string, max_indexes int16) (retval503 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - DbName
   *  - TblName
   *  - MaxIndexes
   */
  GetIndexNames(db_name string, tbl_name string, max_indexes int16) (retval504 thrift.TList, o2 *MetaException, err error)
  /**
   * Parameters:
   *  - Role
   */
  CreateRole(role *Role) (retval505 bool, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - RoleName
   */
  DropRole(role_name string) (retval506 bool, o1 *MetaException, err error)
  GetRoleNames() (retval507 thrift.TList, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - RoleName
   *  - PrincipalName
   *  - PrincipalType
   *  - Grantor
   *  - GrantorType
   *  - GrantOption
   */
  GrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (retval508 bool, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - RoleName
   *  - PrincipalName
   *  - PrincipalType
   */
  RevokeRole(role_name string, principal_name string, principal_type PrincipalType) (retval509 bool, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - PrincipalName
   *  - PrincipalType
   */
  ListRoles(principal_name string, principal_type PrincipalType) (retval510 thrift.TList, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - HiveObject
   *  - UserName
   *  - GroupNames
   */
  GetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names thrift.TList) (retval511 *PrincipalPrivilegeSet, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - PrincipalName
   *  - PrincipalType
   *  - HiveObject
   */
  ListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (retval512 thrift.TList, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - Privileges
   */
  GrantPrivileges(privileges *PrivilegeBag) (retval513 bool, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - Privileges
   */
  RevokePrivileges(privileges *PrivilegeBag) (retval514 bool, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - RenewerKerberosPrincipalName
   */
  GetDelegationToken(renewer_kerberos_principal_name string) (retval515 string, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - RenewerKerberosPrincipalName
   *  - TokenSignature
   */
  GetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (retval516 string, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - TokenStrForm
   */
  RenewDelegationToken(token_str_form string) (retval517 int64, o1 *MetaException, err error)
  /**
   * Parameters:
   *  - TokenStrForm
   */
  CancelDelegationToken(token_str_form string) (o1 *MetaException, err error)
}

/**
 *This interface is live.
 */
type ThriftHiveMetastoreClient struct {
  *fb303.FacebookServiceClient
}

func NewThriftHiveMetastoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftHiveMetastoreClient {
  return &ThriftHiveMetastoreClient{fb303.FacebookServiceClient: fb303.NewFacebookServiceClientFactory(t, f)}}

func NewThriftHiveMetastoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftHiveMetastoreClient {
  return &ThriftHiveMetastoreClient{fb303.FacebookServiceClient: fb303.NewFacebookServiceClientProtocol(t, iprot, oprot)}
}

/**
 * Parameters:
 *  - Database
 */
func (p *ThriftHiveMetastoreClient) CreateDatabase(database *Database) (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error) {
  err = p.SendCreateDatabase(database)
  if err != nil { return }
  return p.RecvCreateDatabase()
}

func (p *ThriftHiveMetastoreClient) SendCreateDatabase(database *Database)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("create_database", thrift.CALL, p.SeqId)
  args520 := NewCreateDatabaseArgs()
  args520.Database = database
  err = args520.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvCreateDatabase() (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error522 := thrift.NewTApplicationExceptionDefault()
    error523, er := error522.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error523
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result521 := NewCreateDatabaseResult()
  err = result521.Read(iprot)
  iprot.ReadMessageEnd()
  if result521.O1 != nil {
    o1 = result521.O1
  }
  if result521.O2 != nil {
    o2 = result521.O2
  }
  if result521.O3 != nil {
    o3 = result521.O3
  }
  return
}

/**
 * Parameters:
 *  - Name
 */
func (p *ThriftHiveMetastoreClient) GetDatabase(name string) (retval524 *Database, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  err = p.SendGetDatabase(name)
  if err != nil { return }
  return p.RecvGetDatabase()
}

func (p *ThriftHiveMetastoreClient) SendGetDatabase(name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_database", thrift.CALL, p.SeqId)
  args525 := NewGetDatabaseArgs()
  args525.Name = name
  err = args525.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetDatabase() (value *Database, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error527 := thrift.NewTApplicationExceptionDefault()
    error528, er := error527.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error528
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result526 := NewGetDatabaseResult()
  err = result526.Read(iprot)
  iprot.ReadMessageEnd()
  value = result526.Success
  if result526.O1 != nil {
    o1 = result526.O1
  }
  if result526.O2 != nil {
    o2 = result526.O2
  }
  return
}

/**
 * Parameters:
 *  - Name
 *  - DeleteData
 */
func (p *ThriftHiveMetastoreClient) DropDatabase(name string, deleteData bool) (o1 *NoSuchObjectException, o2 *InvalidOperationException, o3 *MetaException, err error) {
  err = p.SendDropDatabase(name, deleteData)
  if err != nil { return }
  return p.RecvDropDatabase()
}

func (p *ThriftHiveMetastoreClient) SendDropDatabase(name string, deleteData bool)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("drop_database", thrift.CALL, p.SeqId)
  args530 := NewDropDatabaseArgs()
  args530.Name = name
  args530.DeleteData = deleteData
  err = args530.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvDropDatabase() (o1 *NoSuchObjectException, o2 *InvalidOperationException, o3 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error532 := thrift.NewTApplicationExceptionDefault()
    error533, er := error532.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error533
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result531 := NewDropDatabaseResult()
  err = result531.Read(iprot)
  iprot.ReadMessageEnd()
  if result531.O1 != nil {
    o1 = result531.O1
  }
  if result531.O2 != nil {
    o2 = result531.O2
  }
  if result531.O3 != nil {
    o3 = result531.O3
  }
  return
}

/**
 * Parameters:
 *  - Pattern
 */
func (p *ThriftHiveMetastoreClient) GetDatabases(pattern string) (retval534 thrift.TList, o1 *MetaException, err error) {
  err = p.SendGetDatabases(pattern)
  if err != nil { return }
  return p.RecvGetDatabases()
}

func (p *ThriftHiveMetastoreClient) SendGetDatabases(pattern string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_databases", thrift.CALL, p.SeqId)
  args535 := NewGetDatabasesArgs()
  args535.Pattern = pattern
  err = args535.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetDatabases() (value thrift.TList, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error537 := thrift.NewTApplicationExceptionDefault()
    error538, er := error537.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error538
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result536 := NewGetDatabasesResult()
  err = result536.Read(iprot)
  iprot.ReadMessageEnd()
  value = result536.Success
  if result536.O1 != nil {
    o1 = result536.O1
  }
  return
}

func (p *ThriftHiveMetastoreClient) GetAllDatabases() (retval539 thrift.TList, o1 *MetaException, err error) {
  err = p.SendGetAllDatabases()
  if err != nil { return }
  return p.RecvGetAllDatabases()
}

func (p *ThriftHiveMetastoreClient) SendGetAllDatabases()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_all_databases", thrift.CALL, p.SeqId)
  args540 := NewGetAllDatabasesArgs()
  err = args540.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetAllDatabases() (value thrift.TList, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error542 := thrift.NewTApplicationExceptionDefault()
    error543, er := error542.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error543
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result541 := NewGetAllDatabasesResult()
  err = result541.Read(iprot)
  iprot.ReadMessageEnd()
  value = result541.Success
  if result541.O1 != nil {
    o1 = result541.O1
  }
  return
}

/**
 * Parameters:
 *  - Dbname
 *  - Db
 */
func (p *ThriftHiveMetastoreClient) AlterDatabase(dbname string, db *Database) (o1 *MetaException, o2 *NoSuchObjectException, err error) {
  err = p.SendAlterDatabase(dbname, db)
  if err != nil { return }
  return p.RecvAlterDatabase()
}

func (p *ThriftHiveMetastoreClient) SendAlterDatabase(dbname string, db *Database)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("alter_database", thrift.CALL, p.SeqId)
  args545 := NewAlterDatabaseArgs()
  args545.Dbname = dbname
  args545.Db = db
  err = args545.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvAlterDatabase() (o1 *MetaException, o2 *NoSuchObjectException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error547 := thrift.NewTApplicationExceptionDefault()
    error548, er := error547.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error548
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result546 := NewAlterDatabaseResult()
  err = result546.Read(iprot)
  iprot.ReadMessageEnd()
  if result546.O1 != nil {
    o1 = result546.O1
  }
  if result546.O2 != nil {
    o2 = result546.O2
  }
  return
}

/**
 * Parameters:
 *  - Name
 */
func (p *ThriftHiveMetastoreClient) GetType(name string) (retval549 *Type, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  err = p.SendGetType(name)
  if err != nil { return }
  return p.RecvGetType()
}

func (p *ThriftHiveMetastoreClient) SendGetType(name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_type", thrift.CALL, p.SeqId)
  args550 := NewGetTypeArgs()
  args550.Name = name
  err = args550.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetType() (value *Type, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error552 := thrift.NewTApplicationExceptionDefault()
    error553, er := error552.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error553
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result551 := NewGetTypeResult()
  err = result551.Read(iprot)
  iprot.ReadMessageEnd()
  value = result551.Success
  if result551.O1 != nil {
    o1 = result551.O1
  }
  if result551.O2 != nil {
    o2 = result551.O2
  }
  return
}

/**
 * Parameters:
 *  - TypeA1
 */
func (p *ThriftHiveMetastoreClient) CreateType(type_a1 *Type) (retval554 bool, o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error) {
  err = p.SendCreateType(type_a1)
  if err != nil { return }
  return p.RecvCreateType()
}

func (p *ThriftHiveMetastoreClient) SendCreateType(type_a1 *Type)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("create_type", thrift.CALL, p.SeqId)
  args555 := NewCreateTypeArgs()
  args555.TypeA1 = type_a1
  err = args555.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvCreateType() (value bool, o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error557 := thrift.NewTApplicationExceptionDefault()
    error558, er := error557.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error558
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result556 := NewCreateTypeResult()
  err = result556.Read(iprot)
  iprot.ReadMessageEnd()
  value = result556.Success
  if result556.O1 != nil {
    o1 = result556.O1
  }
  if result556.O2 != nil {
    o2 = result556.O2
  }
  if result556.O3 != nil {
    o3 = result556.O3
  }
  return
}

/**
 * Parameters:
 *  - TypeA1
 */
func (p *ThriftHiveMetastoreClient) DropType(type_a1 string) (retval559 bool, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  err = p.SendDropType(type_a1)
  if err != nil { return }
  return p.RecvDropType()
}

func (p *ThriftHiveMetastoreClient) SendDropType(type_a1 string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("drop_type", thrift.CALL, p.SeqId)
  args560 := NewDropTypeArgs()
  args560.TypeA1 = type_a1
  err = args560.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvDropType() (value bool, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error562 := thrift.NewTApplicationExceptionDefault()
    error563, er := error562.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error563
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result561 := NewDropTypeResult()
  err = result561.Read(iprot)
  iprot.ReadMessageEnd()
  value = result561.Success
  if result561.O1 != nil {
    o1 = result561.O1
  }
  if result561.O2 != nil {
    o2 = result561.O2
  }
  return
}

/**
 * Parameters:
 *  - Name
 */
func (p *ThriftHiveMetastoreClient) GetTypeAll(name string) (retval564 thrift.TMap, o2 *MetaException, err error) {
  err = p.SendGetTypeAll(name)
  if err != nil { return }
  return p.RecvGetTypeAll()
}

func (p *ThriftHiveMetastoreClient) SendGetTypeAll(name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_type_all", thrift.CALL, p.SeqId)
  args565 := NewGetTypeAllArgs()
  args565.Name = name
  err = args565.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetTypeAll() (value thrift.TMap, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error567 := thrift.NewTApplicationExceptionDefault()
    error568, er := error567.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error568
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result566 := NewGetTypeAllResult()
  err = result566.Read(iprot)
  iprot.ReadMessageEnd()
  value = result566.Success
  if result566.O2 != nil {
    o2 = result566.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TableName
 */
func (p *ThriftHiveMetastoreClient) GetFields(db_name string, table_name string) (retval569 thrift.TList, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error) {
  err = p.SendGetFields(db_name, table_name)
  if err != nil { return }
  return p.RecvGetFields()
}

func (p *ThriftHiveMetastoreClient) SendGetFields(db_name string, table_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_fields", thrift.CALL, p.SeqId)
  args570 := NewGetFieldsArgs()
  args570.DbName = db_name
  args570.TableName = table_name
  err = args570.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetFields() (value thrift.TList, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error572 := thrift.NewTApplicationExceptionDefault()
    error573, er := error572.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error573
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result571 := NewGetFieldsResult()
  err = result571.Read(iprot)
  iprot.ReadMessageEnd()
  value = result571.Success
  if result571.O1 != nil {
    o1 = result571.O1
  }
  if result571.O2 != nil {
    o2 = result571.O2
  }
  if result571.O3 != nil {
    o3 = result571.O3
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TableName
 */
func (p *ThriftHiveMetastoreClient) GetSchema(db_name string, table_name string) (retval574 thrift.TList, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error) {
  err = p.SendGetSchema(db_name, table_name)
  if err != nil { return }
  return p.RecvGetSchema()
}

func (p *ThriftHiveMetastoreClient) SendGetSchema(db_name string, table_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_schema", thrift.CALL, p.SeqId)
  args575 := NewGetSchemaArgs()
  args575.DbName = db_name
  args575.TableName = table_name
  err = args575.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetSchema() (value thrift.TList, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error577 := thrift.NewTApplicationExceptionDefault()
    error578, er := error577.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error578
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result576 := NewGetSchemaResult()
  err = result576.Read(iprot)
  iprot.ReadMessageEnd()
  value = result576.Success
  if result576.O1 != nil {
    o1 = result576.O1
  }
  if result576.O2 != nil {
    o2 = result576.O2
  }
  if result576.O3 != nil {
    o3 = result576.O3
  }
  return
}

/**
 * Parameters:
 *  - Tbl
 */
func (p *ThriftHiveMetastoreClient) CreateTable(tbl *Table) (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, o4 *NoSuchObjectException, err error) {
  err = p.SendCreateTable(tbl)
  if err != nil { return }
  return p.RecvCreateTable()
}

func (p *ThriftHiveMetastoreClient) SendCreateTable(tbl *Table)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("create_table", thrift.CALL, p.SeqId)
  args580 := NewCreateTableArgs()
  args580.Tbl = tbl
  err = args580.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvCreateTable() (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, o4 *NoSuchObjectException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error582 := thrift.NewTApplicationExceptionDefault()
    error583, er := error582.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error583
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result581 := NewCreateTableResult()
  err = result581.Read(iprot)
  iprot.ReadMessageEnd()
  if result581.O1 != nil {
    o1 = result581.O1
  }
  if result581.O2 != nil {
    o2 = result581.O2
  }
  if result581.O3 != nil {
    o3 = result581.O3
  }
  if result581.O4 != nil {
    o4 = result581.O4
  }
  return
}

/**
 * Parameters:
 *  - Dbname
 *  - Name
 *  - DeleteData
 */
func (p *ThriftHiveMetastoreClient) DropTable(dbname string, name string, deleteData bool) (o1 *NoSuchObjectException, o3 *MetaException, err error) {
  err = p.SendDropTable(dbname, name, deleteData)
  if err != nil { return }
  return p.RecvDropTable()
}

func (p *ThriftHiveMetastoreClient) SendDropTable(dbname string, name string, deleteData bool)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("drop_table", thrift.CALL, p.SeqId)
  args585 := NewDropTableArgs()
  args585.Dbname = dbname
  args585.Name = name
  args585.DeleteData = deleteData
  err = args585.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvDropTable() (o1 *NoSuchObjectException, o3 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error587 := thrift.NewTApplicationExceptionDefault()
    error588, er := error587.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error588
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result586 := NewDropTableResult()
  err = result586.Read(iprot)
  iprot.ReadMessageEnd()
  if result586.O1 != nil {
    o1 = result586.O1
  }
  if result586.O3 != nil {
    o3 = result586.O3
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - Pattern
 */
func (p *ThriftHiveMetastoreClient) GetTables(db_name string, pattern string) (retval589 thrift.TList, o1 *MetaException, err error) {
  err = p.SendGetTables(db_name, pattern)
  if err != nil { return }
  return p.RecvGetTables()
}

func (p *ThriftHiveMetastoreClient) SendGetTables(db_name string, pattern string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_tables", thrift.CALL, p.SeqId)
  args590 := NewGetTablesArgs()
  args590.DbName = db_name
  args590.Pattern = pattern
  err = args590.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetTables() (value thrift.TList, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error592 := thrift.NewTApplicationExceptionDefault()
    error593, er := error592.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error593
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result591 := NewGetTablesResult()
  err = result591.Read(iprot)
  iprot.ReadMessageEnd()
  value = result591.Success
  if result591.O1 != nil {
    o1 = result591.O1
  }
  return
}

/**
 * Parameters:
 *  - DbName
 */
func (p *ThriftHiveMetastoreClient) GetAllTables(db_name string) (retval594 thrift.TList, o1 *MetaException, err error) {
  err = p.SendGetAllTables(db_name)
  if err != nil { return }
  return p.RecvGetAllTables()
}

func (p *ThriftHiveMetastoreClient) SendGetAllTables(db_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_all_tables", thrift.CALL, p.SeqId)
  args595 := NewGetAllTablesArgs()
  args595.DbName = db_name
  err = args595.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetAllTables() (value thrift.TList, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error597 := thrift.NewTApplicationExceptionDefault()
    error598, er := error597.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error598
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result596 := NewGetAllTablesResult()
  err = result596.Read(iprot)
  iprot.ReadMessageEnd()
  value = result596.Success
  if result596.O1 != nil {
    o1 = result596.O1
  }
  return
}

/**
 * Parameters:
 *  - Dbname
 *  - TblName
 */
func (p *ThriftHiveMetastoreClient) GetTable(dbname string, tbl_name string) (retval599 *Table, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  err = p.SendGetTable(dbname, tbl_name)
  if err != nil { return }
  return p.RecvGetTable()
}

func (p *ThriftHiveMetastoreClient) SendGetTable(dbname string, tbl_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_table", thrift.CALL, p.SeqId)
  args600 := NewGetTableArgs()
  args600.Dbname = dbname
  args600.TblName = tbl_name
  err = args600.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetTable() (value *Table, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error602 := thrift.NewTApplicationExceptionDefault()
    error603, er := error602.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error603
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result601 := NewGetTableResult()
  err = result601.Read(iprot)
  iprot.ReadMessageEnd()
  value = result601.Success
  if result601.O1 != nil {
    o1 = result601.O1
  }
  if result601.O2 != nil {
    o2 = result601.O2
  }
  return
}

/**
 * Parameters:
 *  - Dbname
 *  - TblName
 *  - NewTbl
 */
func (p *ThriftHiveMetastoreClient) AlterTable(dbname string, tbl_name string, new_tbl *Table) (o1 *InvalidOperationException, o2 *MetaException, err error) {
  err = p.SendAlterTable(dbname, tbl_name, new_tbl)
  if err != nil { return }
  return p.RecvAlterTable()
}

func (p *ThriftHiveMetastoreClient) SendAlterTable(dbname string, tbl_name string, new_tbl *Table)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("alter_table", thrift.CALL, p.SeqId)
  args605 := NewAlterTableArgs()
  args605.Dbname = dbname
  args605.TblName = tbl_name
  args605.NewTbl = new_tbl
  err = args605.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvAlterTable() (o1 *InvalidOperationException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error607 := thrift.NewTApplicationExceptionDefault()
    error608, er := error607.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error608
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result606 := NewAlterTableResult()
  err = result606.Read(iprot)
  iprot.ReadMessageEnd()
  if result606.O1 != nil {
    o1 = result606.O1
  }
  if result606.O2 != nil {
    o2 = result606.O2
  }
  return
}

/**
 * Parameters:
 *  - NewPart
 */
func (p *ThriftHiveMetastoreClient) AddPartition(new_part *Partition) (retval609 *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
  err = p.SendAddPartition(new_part)
  if err != nil { return }
  return p.RecvAddPartition()
}

func (p *ThriftHiveMetastoreClient) SendAddPartition(new_part *Partition)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("add_partition", thrift.CALL, p.SeqId)
  args610 := NewAddPartitionArgs()
  args610.NewPart = new_part
  err = args610.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvAddPartition() (value *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error612 := thrift.NewTApplicationExceptionDefault()
    error613, er := error612.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error613
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result611 := NewAddPartitionResult()
  err = result611.Read(iprot)
  iprot.ReadMessageEnd()
  value = result611.Success
  if result611.O1 != nil {
    o1 = result611.O1
  }
  if result611.O2 != nil {
    o2 = result611.O2
  }
  if result611.O3 != nil {
    o3 = result611.O3
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - PartVals
 */
func (p *ThriftHiveMetastoreClient) AppendPartition(db_name string, tbl_name string, part_vals thrift.TList) (retval614 *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
  err = p.SendAppendPartition(db_name, tbl_name, part_vals)
  if err != nil { return }
  return p.RecvAppendPartition()
}

func (p *ThriftHiveMetastoreClient) SendAppendPartition(db_name string, tbl_name string, part_vals thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("append_partition", thrift.CALL, p.SeqId)
  args615 := NewAppendPartitionArgs()
  args615.DbName = db_name
  args615.TblName = tbl_name
  args615.PartVals = part_vals
  err = args615.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvAppendPartition() (value *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error617 := thrift.NewTApplicationExceptionDefault()
    error618, er := error617.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error618
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result616 := NewAppendPartitionResult()
  err = result616.Read(iprot)
  iprot.ReadMessageEnd()
  value = result616.Success
  if result616.O1 != nil {
    o1 = result616.O1
  }
  if result616.O2 != nil {
    o2 = result616.O2
  }
  if result616.O3 != nil {
    o3 = result616.O3
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - PartName
 */
func (p *ThriftHiveMetastoreClient) AppendPartitionByName(db_name string, tbl_name string, part_name string) (retval619 *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
  err = p.SendAppendPartitionByName(db_name, tbl_name, part_name)
  if err != nil { return }
  return p.RecvAppendPartitionByName()
}

func (p *ThriftHiveMetastoreClient) SendAppendPartitionByName(db_name string, tbl_name string, part_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("append_partition_by_name", thrift.CALL, p.SeqId)
  args620 := NewAppendPartitionByNameArgs()
  args620.DbName = db_name
  args620.TblName = tbl_name
  args620.PartName = part_name
  err = args620.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvAppendPartitionByName() (value *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error622 := thrift.NewTApplicationExceptionDefault()
    error623, er := error622.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error623
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result621 := NewAppendPartitionByNameResult()
  err = result621.Read(iprot)
  iprot.ReadMessageEnd()
  value = result621.Success
  if result621.O1 != nil {
    o1 = result621.O1
  }
  if result621.O2 != nil {
    o2 = result621.O2
  }
  if result621.O3 != nil {
    o3 = result621.O3
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - PartVals
 *  - DeleteData
 */
func (p *ThriftHiveMetastoreClient) DropPartition(db_name string, tbl_name string, part_vals thrift.TList, deleteData bool) (retval624 bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  err = p.SendDropPartition(db_name, tbl_name, part_vals, deleteData)
  if err != nil { return }
  return p.RecvDropPartition()
}

func (p *ThriftHiveMetastoreClient) SendDropPartition(db_name string, tbl_name string, part_vals thrift.TList, deleteData bool)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("drop_partition", thrift.CALL, p.SeqId)
  args625 := NewDropPartitionArgs()
  args625.DbName = db_name
  args625.TblName = tbl_name
  args625.PartVals = part_vals
  args625.DeleteData = deleteData
  err = args625.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvDropPartition() (value bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error627 := thrift.NewTApplicationExceptionDefault()
    error628, er := error627.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error628
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result626 := NewDropPartitionResult()
  err = result626.Read(iprot)
  iprot.ReadMessageEnd()
  value = result626.Success
  if result626.O1 != nil {
    o1 = result626.O1
  }
  if result626.O2 != nil {
    o2 = result626.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - PartName
 *  - DeleteData
 */
func (p *ThriftHiveMetastoreClient) DropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (retval629 bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  err = p.SendDropPartitionByName(db_name, tbl_name, part_name, deleteData)
  if err != nil { return }
  return p.RecvDropPartitionByName()
}

func (p *ThriftHiveMetastoreClient) SendDropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("drop_partition_by_name", thrift.CALL, p.SeqId)
  args630 := NewDropPartitionByNameArgs()
  args630.DbName = db_name
  args630.TblName = tbl_name
  args630.PartName = part_name
  args630.DeleteData = deleteData
  err = args630.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvDropPartitionByName() (value bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error632 := thrift.NewTApplicationExceptionDefault()
    error633, er := error632.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error633
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result631 := NewDropPartitionByNameResult()
  err = result631.Read(iprot)
  iprot.ReadMessageEnd()
  value = result631.Success
  if result631.O1 != nil {
    o1 = result631.O1
  }
  if result631.O2 != nil {
    o2 = result631.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - PartVals
 */
func (p *ThriftHiveMetastoreClient) GetPartition(db_name string, tbl_name string, part_vals thrift.TList) (retval634 *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  err = p.SendGetPartition(db_name, tbl_name, part_vals)
  if err != nil { return }
  return p.RecvGetPartition()
}

func (p *ThriftHiveMetastoreClient) SendGetPartition(db_name string, tbl_name string, part_vals thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_partition", thrift.CALL, p.SeqId)
  args635 := NewGetPartitionArgs()
  args635.DbName = db_name
  args635.TblName = tbl_name
  args635.PartVals = part_vals
  err = args635.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPartition() (value *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error637 := thrift.NewTApplicationExceptionDefault()
    error638, er := error637.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error638
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result636 := NewGetPartitionResult()
  err = result636.Read(iprot)
  iprot.ReadMessageEnd()
  value = result636.Success
  if result636.O1 != nil {
    o1 = result636.O1
  }
  if result636.O2 != nil {
    o2 = result636.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - PartVals
 *  - UserName
 *  - GroupNames
 */
func (p *ThriftHiveMetastoreClient) GetPartitionWithAuth(db_name string, tbl_name string, part_vals thrift.TList, user_name string, group_names thrift.TList) (retval639 *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  err = p.SendGetPartitionWithAuth(db_name, tbl_name, part_vals, user_name, group_names)
  if err != nil { return }
  return p.RecvGetPartitionWithAuth()
}

func (p *ThriftHiveMetastoreClient) SendGetPartitionWithAuth(db_name string, tbl_name string, part_vals thrift.TList, user_name string, group_names thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_partition_with_auth", thrift.CALL, p.SeqId)
  args640 := NewGetPartitionWithAuthArgs()
  args640.DbName = db_name
  args640.TblName = tbl_name
  args640.PartVals = part_vals
  args640.UserName = user_name
  args640.GroupNames = group_names
  err = args640.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPartitionWithAuth() (value *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error642 := thrift.NewTApplicationExceptionDefault()
    error643, er := error642.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error643
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result641 := NewGetPartitionWithAuthResult()
  err = result641.Read(iprot)
  iprot.ReadMessageEnd()
  value = result641.Success
  if result641.O1 != nil {
    o1 = result641.O1
  }
  if result641.O2 != nil {
    o2 = result641.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - PartName
 */
func (p *ThriftHiveMetastoreClient) GetPartitionByName(db_name string, tbl_name string, part_name string) (retval644 *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  err = p.SendGetPartitionByName(db_name, tbl_name, part_name)
  if err != nil { return }
  return p.RecvGetPartitionByName()
}

func (p *ThriftHiveMetastoreClient) SendGetPartitionByName(db_name string, tbl_name string, part_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_partition_by_name", thrift.CALL, p.SeqId)
  args645 := NewGetPartitionByNameArgs()
  args645.DbName = db_name
  args645.TblName = tbl_name
  args645.PartName = part_name
  err = args645.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPartitionByName() (value *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error647 := thrift.NewTApplicationExceptionDefault()
    error648, er := error647.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error648
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result646 := NewGetPartitionByNameResult()
  err = result646.Read(iprot)
  iprot.ReadMessageEnd()
  value = result646.Success
  if result646.O1 != nil {
    o1 = result646.O1
  }
  if result646.O2 != nil {
    o2 = result646.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - MaxParts
 */
func (p *ThriftHiveMetastoreClient) GetPartitions(db_name string, tbl_name string, max_parts int16) (retval649 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  err = p.SendGetPartitions(db_name, tbl_name, max_parts)
  if err != nil { return }
  return p.RecvGetPartitions()
}

func (p *ThriftHiveMetastoreClient) SendGetPartitions(db_name string, tbl_name string, max_parts int16)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_partitions", thrift.CALL, p.SeqId)
  args650 := NewGetPartitionsArgs()
  args650.DbName = db_name
  args650.TblName = tbl_name
  args650.MaxParts = max_parts
  err = args650.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPartitions() (value thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error652 := thrift.NewTApplicationExceptionDefault()
    error653, er := error652.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error653
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result651 := NewGetPartitionsResult()
  err = result651.Read(iprot)
  iprot.ReadMessageEnd()
  value = result651.Success
  if result651.O1 != nil {
    o1 = result651.O1
  }
  if result651.O2 != nil {
    o2 = result651.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - MaxParts
 *  - UserName
 *  - GroupNames
 */
func (p *ThriftHiveMetastoreClient) GetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names thrift.TList) (retval654 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  err = p.SendGetPartitionsWithAuth(db_name, tbl_name, max_parts, user_name, group_names)
  if err != nil { return }
  return p.RecvGetPartitionsWithAuth()
}

func (p *ThriftHiveMetastoreClient) SendGetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_partitions_with_auth", thrift.CALL, p.SeqId)
  args655 := NewGetPartitionsWithAuthArgs()
  args655.DbName = db_name
  args655.TblName = tbl_name
  args655.MaxParts = max_parts
  args655.UserName = user_name
  args655.GroupNames = group_names
  err = args655.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPartitionsWithAuth() (value thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error657 := thrift.NewTApplicationExceptionDefault()
    error658, er := error657.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error658
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result656 := NewGetPartitionsWithAuthResult()
  err = result656.Read(iprot)
  iprot.ReadMessageEnd()
  value = result656.Success
  if result656.O1 != nil {
    o1 = result656.O1
  }
  if result656.O2 != nil {
    o2 = result656.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - MaxParts
 */
func (p *ThriftHiveMetastoreClient) GetPartitionNames(db_name string, tbl_name string, max_parts int16) (retval659 thrift.TList, o2 *MetaException, err error) {
  err = p.SendGetPartitionNames(db_name, tbl_name, max_parts)
  if err != nil { return }
  return p.RecvGetPartitionNames()
}

func (p *ThriftHiveMetastoreClient) SendGetPartitionNames(db_name string, tbl_name string, max_parts int16)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_partition_names", thrift.CALL, p.SeqId)
  args660 := NewGetPartitionNamesArgs()
  args660.DbName = db_name
  args660.TblName = tbl_name
  args660.MaxParts = max_parts
  err = args660.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPartitionNames() (value thrift.TList, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error662 := thrift.NewTApplicationExceptionDefault()
    error663, er := error662.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error663
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result661 := NewGetPartitionNamesResult()
  err = result661.Read(iprot)
  iprot.ReadMessageEnd()
  value = result661.Success
  if result661.O2 != nil {
    o2 = result661.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - PartVals
 *  - MaxParts
 */
func (p *ThriftHiveMetastoreClient) GetPartitionsPs(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16) (retval664 thrift.TList, o1 *MetaException, err error) {
  err = p.SendGetPartitionsPs(db_name, tbl_name, part_vals, max_parts)
  if err != nil { return }
  return p.RecvGetPartitionsPs()
}

func (p *ThriftHiveMetastoreClient) SendGetPartitionsPs(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_partitions_ps", thrift.CALL, p.SeqId)
  args665 := NewGetPartitionsPsArgs()
  args665.DbName = db_name
  args665.TblName = tbl_name
  args665.PartVals = part_vals
  args665.MaxParts = max_parts
  err = args665.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPartitionsPs() (value thrift.TList, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error667 := thrift.NewTApplicationExceptionDefault()
    error668, er := error667.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error668
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result666 := NewGetPartitionsPsResult()
  err = result666.Read(iprot)
  iprot.ReadMessageEnd()
  value = result666.Success
  if result666.O1 != nil {
    o1 = result666.O1
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - PartVals
 *  - MaxParts
 *  - UserName
 *  - GroupNames
 */
func (p *ThriftHiveMetastoreClient) GetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16, user_name string, group_names thrift.TList) (retval669 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  err = p.SendGetPartitionsPsWithAuth(db_name, tbl_name, part_vals, max_parts, user_name, group_names)
  if err != nil { return }
  return p.RecvGetPartitionsPsWithAuth()
}

func (p *ThriftHiveMetastoreClient) SendGetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16, user_name string, group_names thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.CALL, p.SeqId)
  args670 := NewGetPartitionsPsWithAuthArgs()
  args670.DbName = db_name
  args670.TblName = tbl_name
  args670.PartVals = part_vals
  args670.MaxParts = max_parts
  args670.UserName = user_name
  args670.GroupNames = group_names
  err = args670.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPartitionsPsWithAuth() (value thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error672 := thrift.NewTApplicationExceptionDefault()
    error673, er := error672.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error673
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result671 := NewGetPartitionsPsWithAuthResult()
  err = result671.Read(iprot)
  iprot.ReadMessageEnd()
  value = result671.Success
  if result671.O1 != nil {
    o1 = result671.O1
  }
  if result671.O2 != nil {
    o2 = result671.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - PartVals
 *  - MaxParts
 */
func (p *ThriftHiveMetastoreClient) GetPartitionNamesPs(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16) (retval674 thrift.TList, o1 *MetaException, err error) {
  err = p.SendGetPartitionNamesPs(db_name, tbl_name, part_vals, max_parts)
  if err != nil { return }
  return p.RecvGetPartitionNamesPs()
}

func (p *ThriftHiveMetastoreClient) SendGetPartitionNamesPs(db_name string, tbl_name string, part_vals thrift.TList, max_parts int16)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_partition_names_ps", thrift.CALL, p.SeqId)
  args675 := NewGetPartitionNamesPsArgs()
  args675.DbName = db_name
  args675.TblName = tbl_name
  args675.PartVals = part_vals
  args675.MaxParts = max_parts
  err = args675.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPartitionNamesPs() (value thrift.TList, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error677 := thrift.NewTApplicationExceptionDefault()
    error678, er := error677.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error678
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result676 := NewGetPartitionNamesPsResult()
  err = result676.Read(iprot)
  iprot.ReadMessageEnd()
  value = result676.Success
  if result676.O1 != nil {
    o1 = result676.O1
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - Filter
 *  - MaxParts
 */
func (p *ThriftHiveMetastoreClient) GetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (retval679 thrift.TList, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  err = p.SendGetPartitionsByFilter(db_name, tbl_name, filter, max_parts)
  if err != nil { return }
  return p.RecvGetPartitionsByFilter()
}

func (p *ThriftHiveMetastoreClient) SendGetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_partitions_by_filter", thrift.CALL, p.SeqId)
  args680 := NewGetPartitionsByFilterArgs()
  args680.DbName = db_name
  args680.TblName = tbl_name
  args680.Filter = filter
  args680.MaxParts = max_parts
  err = args680.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPartitionsByFilter() (value thrift.TList, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error682 := thrift.NewTApplicationExceptionDefault()
    error683, er := error682.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error683
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result681 := NewGetPartitionsByFilterResult()
  err = result681.Read(iprot)
  iprot.ReadMessageEnd()
  value = result681.Success
  if result681.O1 != nil {
    o1 = result681.O1
  }
  if result681.O2 != nil {
    o2 = result681.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - NewPart
 */
func (p *ThriftHiveMetastoreClient) AlterPartition(db_name string, tbl_name string, new_part *Partition) (o1 *InvalidOperationException, o2 *MetaException, err error) {
  err = p.SendAlterPartition(db_name, tbl_name, new_part)
  if err != nil { return }
  return p.RecvAlterPartition()
}

func (p *ThriftHiveMetastoreClient) SendAlterPartition(db_name string, tbl_name string, new_part *Partition)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("alter_partition", thrift.CALL, p.SeqId)
  args685 := NewAlterPartitionArgs()
  args685.DbName = db_name
  args685.TblName = tbl_name
  args685.NewPart = new_part
  err = args685.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvAlterPartition() (o1 *InvalidOperationException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error687 := thrift.NewTApplicationExceptionDefault()
    error688, er := error687.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error688
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result686 := NewAlterPartitionResult()
  err = result686.Read(iprot)
  iprot.ReadMessageEnd()
  if result686.O1 != nil {
    o1 = result686.O1
  }
  if result686.O2 != nil {
    o2 = result686.O2
  }
  return
}

/**
 * Parameters:
 *  - Name
 *  - DefaultValue
 */
func (p *ThriftHiveMetastoreClient) GetConfigValue(name string, defaultValue string) (retval689 string, o1 *ConfigValSecurityException, err error) {
  err = p.SendGetConfigValue(name, defaultValue)
  if err != nil { return }
  return p.RecvGetConfigValue()
}

func (p *ThriftHiveMetastoreClient) SendGetConfigValue(name string, defaultValue string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_config_value", thrift.CALL, p.SeqId)
  args690 := NewGetConfigValueArgs()
  args690.Name = name
  args690.DefaultValue = defaultValue
  err = args690.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetConfigValue() (value string, o1 *ConfigValSecurityException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error692 := thrift.NewTApplicationExceptionDefault()
    error693, er := error692.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error693
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result691 := NewGetConfigValueResult()
  err = result691.Read(iprot)
  iprot.ReadMessageEnd()
  value = result691.Success
  if result691.O1 != nil {
    o1 = result691.O1
  }
  return
}

/**
 * Parameters:
 *  - PartName
 */
func (p *ThriftHiveMetastoreClient) PartitionNameToVals(part_name string) (retval694 thrift.TList, o1 *MetaException, err error) {
  err = p.SendPartitionNameToVals(part_name)
  if err != nil { return }
  return p.RecvPartitionNameToVals()
}

func (p *ThriftHiveMetastoreClient) SendPartitionNameToVals(part_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("partition_name_to_vals", thrift.CALL, p.SeqId)
  args695 := NewPartitionNameToValsArgs()
  args695.PartName = part_name
  err = args695.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvPartitionNameToVals() (value thrift.TList, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error697 := thrift.NewTApplicationExceptionDefault()
    error698, er := error697.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error698
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result696 := NewPartitionNameToValsResult()
  err = result696.Read(iprot)
  iprot.ReadMessageEnd()
  value = result696.Success
  if result696.O1 != nil {
    o1 = result696.O1
  }
  return
}

/**
 * Parameters:
 *  - PartName
 */
func (p *ThriftHiveMetastoreClient) PartitionNameToSpec(part_name string) (retval699 thrift.TMap, o1 *MetaException, err error) {
  err = p.SendPartitionNameToSpec(part_name)
  if err != nil { return }
  return p.RecvPartitionNameToSpec()
}

func (p *ThriftHiveMetastoreClient) SendPartitionNameToSpec(part_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("partition_name_to_spec", thrift.CALL, p.SeqId)
  args700 := NewPartitionNameToSpecArgs()
  args700.PartName = part_name
  err = args700.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvPartitionNameToSpec() (value thrift.TMap, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error702 := thrift.NewTApplicationExceptionDefault()
    error703, er := error702.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error703
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result701 := NewPartitionNameToSpecResult()
  err = result701.Read(iprot)
  iprot.ReadMessageEnd()
  value = result701.Success
  if result701.O1 != nil {
    o1 = result701.O1
  }
  return
}

/**
 * Parameters:
 *  - NewIndex
 *  - IndexTable
 */
func (p *ThriftHiveMetastoreClient) AddIndex(new_index *Index, index_table *Table) (retval704 *Index, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
  err = p.SendAddIndex(new_index, index_table)
  if err != nil { return }
  return p.RecvAddIndex()
}

func (p *ThriftHiveMetastoreClient) SendAddIndex(new_index *Index, index_table *Table)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("add_index", thrift.CALL, p.SeqId)
  args705 := NewAddIndexArgs()
  args705.NewIndex = new_index
  args705.IndexTable = index_table
  err = args705.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvAddIndex() (value *Index, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error707 := thrift.NewTApplicationExceptionDefault()
    error708, er := error707.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error708
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result706 := NewAddIndexResult()
  err = result706.Read(iprot)
  iprot.ReadMessageEnd()
  value = result706.Success
  if result706.O1 != nil {
    o1 = result706.O1
  }
  if result706.O2 != nil {
    o2 = result706.O2
  }
  if result706.O3 != nil {
    o3 = result706.O3
  }
  return
}

/**
 * Parameters:
 *  - Dbname
 *  - BaseTblName
 *  - IdxName
 *  - NewIdx
 */
func (p *ThriftHiveMetastoreClient) AlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (o1 *InvalidOperationException, o2 *MetaException, err error) {
  err = p.SendAlterIndex(dbname, base_tbl_name, idx_name, new_idx)
  if err != nil { return }
  return p.RecvAlterIndex()
}

func (p *ThriftHiveMetastoreClient) SendAlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("alter_index", thrift.CALL, p.SeqId)
  args710 := NewAlterIndexArgs()
  args710.Dbname = dbname
  args710.BaseTblName = base_tbl_name
  args710.IdxName = idx_name
  args710.NewIdx = new_idx
  err = args710.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvAlterIndex() (o1 *InvalidOperationException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error712 := thrift.NewTApplicationExceptionDefault()
    error713, er := error712.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error713
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result711 := NewAlterIndexResult()
  err = result711.Read(iprot)
  iprot.ReadMessageEnd()
  if result711.O1 != nil {
    o1 = result711.O1
  }
  if result711.O2 != nil {
    o2 = result711.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - IndexName
 *  - DeleteData
 */
func (p *ThriftHiveMetastoreClient) DropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (retval714 bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  err = p.SendDropIndexByName(db_name, tbl_name, index_name, deleteData)
  if err != nil { return }
  return p.RecvDropIndexByName()
}

func (p *ThriftHiveMetastoreClient) SendDropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("drop_index_by_name", thrift.CALL, p.SeqId)
  args715 := NewDropIndexByNameArgs()
  args715.DbName = db_name
  args715.TblName = tbl_name
  args715.IndexName = index_name
  args715.DeleteData = deleteData
  err = args715.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvDropIndexByName() (value bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error717 := thrift.NewTApplicationExceptionDefault()
    error718, er := error717.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error718
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result716 := NewDropIndexByNameResult()
  err = result716.Read(iprot)
  iprot.ReadMessageEnd()
  value = result716.Success
  if result716.O1 != nil {
    o1 = result716.O1
  }
  if result716.O2 != nil {
    o2 = result716.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - IndexName
 */
func (p *ThriftHiveMetastoreClient) GetIndexByName(db_name string, tbl_name string, index_name string) (retval719 *Index, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  err = p.SendGetIndexByName(db_name, tbl_name, index_name)
  if err != nil { return }
  return p.RecvGetIndexByName()
}

func (p *ThriftHiveMetastoreClient) SendGetIndexByName(db_name string, tbl_name string, index_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_index_by_name", thrift.CALL, p.SeqId)
  args720 := NewGetIndexByNameArgs()
  args720.DbName = db_name
  args720.TblName = tbl_name
  args720.IndexName = index_name
  err = args720.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetIndexByName() (value *Index, o1 *MetaException, o2 *NoSuchObjectException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error722 := thrift.NewTApplicationExceptionDefault()
    error723, er := error722.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error723
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result721 := NewGetIndexByNameResult()
  err = result721.Read(iprot)
  iprot.ReadMessageEnd()
  value = result721.Success
  if result721.O1 != nil {
    o1 = result721.O1
  }
  if result721.O2 != nil {
    o2 = result721.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - MaxIndexes
 */
func (p *ThriftHiveMetastoreClient) GetIndexes(db_name string, tbl_name string, max_indexes int16) (retval724 thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  err = p.SendGetIndexes(db_name, tbl_name, max_indexes)
  if err != nil { return }
  return p.RecvGetIndexes()
}

func (p *ThriftHiveMetastoreClient) SendGetIndexes(db_name string, tbl_name string, max_indexes int16)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_indexes", thrift.CALL, p.SeqId)
  args725 := NewGetIndexesArgs()
  args725.DbName = db_name
  args725.TblName = tbl_name
  args725.MaxIndexes = max_indexes
  err = args725.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetIndexes() (value thrift.TList, o1 *NoSuchObjectException, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error727 := thrift.NewTApplicationExceptionDefault()
    error728, er := error727.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error728
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result726 := NewGetIndexesResult()
  err = result726.Read(iprot)
  iprot.ReadMessageEnd()
  value = result726.Success
  if result726.O1 != nil {
    o1 = result726.O1
  }
  if result726.O2 != nil {
    o2 = result726.O2
  }
  return
}

/**
 * Parameters:
 *  - DbName
 *  - TblName
 *  - MaxIndexes
 */
func (p *ThriftHiveMetastoreClient) GetIndexNames(db_name string, tbl_name string, max_indexes int16) (retval729 thrift.TList, o2 *MetaException, err error) {
  err = p.SendGetIndexNames(db_name, tbl_name, max_indexes)
  if err != nil { return }
  return p.RecvGetIndexNames()
}

func (p *ThriftHiveMetastoreClient) SendGetIndexNames(db_name string, tbl_name string, max_indexes int16)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_index_names", thrift.CALL, p.SeqId)
  args730 := NewGetIndexNamesArgs()
  args730.DbName = db_name
  args730.TblName = tbl_name
  args730.MaxIndexes = max_indexes
  err = args730.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetIndexNames() (value thrift.TList, o2 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error732 := thrift.NewTApplicationExceptionDefault()
    error733, er := error732.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error733
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result731 := NewGetIndexNamesResult()
  err = result731.Read(iprot)
  iprot.ReadMessageEnd()
  value = result731.Success
  if result731.O2 != nil {
    o2 = result731.O2
  }
  return
}

/**
 * Parameters:
 *  - Role
 */
func (p *ThriftHiveMetastoreClient) CreateRole(role *Role) (retval734 bool, o1 *MetaException, err error) {
  err = p.SendCreateRole(role)
  if err != nil { return }
  return p.RecvCreateRole()
}

func (p *ThriftHiveMetastoreClient) SendCreateRole(role *Role)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("create_role", thrift.CALL, p.SeqId)
  args735 := NewCreateRoleArgs()
  args735.Role = role
  err = args735.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvCreateRole() (value bool, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error737 := thrift.NewTApplicationExceptionDefault()
    error738, er := error737.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error738
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result736 := NewCreateRoleResult()
  err = result736.Read(iprot)
  iprot.ReadMessageEnd()
  value = result736.Success
  if result736.O1 != nil {
    o1 = result736.O1
  }
  return
}

/**
 * Parameters:
 *  - RoleName
 */
func (p *ThriftHiveMetastoreClient) DropRole(role_name string) (retval739 bool, o1 *MetaException, err error) {
  err = p.SendDropRole(role_name)
  if err != nil { return }
  return p.RecvDropRole()
}

func (p *ThriftHiveMetastoreClient) SendDropRole(role_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("drop_role", thrift.CALL, p.SeqId)
  args740 := NewDropRoleArgs()
  args740.RoleName = role_name
  err = args740.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvDropRole() (value bool, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error742 := thrift.NewTApplicationExceptionDefault()
    error743, er := error742.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error743
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result741 := NewDropRoleResult()
  err = result741.Read(iprot)
  iprot.ReadMessageEnd()
  value = result741.Success
  if result741.O1 != nil {
    o1 = result741.O1
  }
  return
}

func (p *ThriftHiveMetastoreClient) GetRoleNames() (retval744 thrift.TList, o1 *MetaException, err error) {
  err = p.SendGetRoleNames()
  if err != nil { return }
  return p.RecvGetRoleNames()
}

func (p *ThriftHiveMetastoreClient) SendGetRoleNames()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_role_names", thrift.CALL, p.SeqId)
  args745 := NewGetRoleNamesArgs()
  err = args745.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetRoleNames() (value thrift.TList, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error747 := thrift.NewTApplicationExceptionDefault()
    error748, er := error747.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error748
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result746 := NewGetRoleNamesResult()
  err = result746.Read(iprot)
  iprot.ReadMessageEnd()
  value = result746.Success
  if result746.O1 != nil {
    o1 = result746.O1
  }
  return
}

/**
 * Parameters:
 *  - RoleName
 *  - PrincipalName
 *  - PrincipalType
 *  - Grantor
 *  - GrantorType
 *  - GrantOption
 */
func (p *ThriftHiveMetastoreClient) GrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (retval749 bool, o1 *MetaException, err error) {
  err = p.SendGrantRole(role_name, principal_name, principal_type, grantor, grantorType, grant_option)
  if err != nil { return }
  return p.RecvGrantRole()
}

func (p *ThriftHiveMetastoreClient) SendGrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("grant_role", thrift.CALL, p.SeqId)
  args750 := NewGrantRoleArgs()
  args750.RoleName = role_name
  args750.PrincipalName = principal_name
  args750.PrincipalType = principal_type
  args750.Grantor = grantor
  args750.GrantorType = grantorType
  args750.GrantOption = grant_option
  err = args750.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGrantRole() (value bool, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error752 := thrift.NewTApplicationExceptionDefault()
    error753, er := error752.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error753
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result751 := NewGrantRoleResult()
  err = result751.Read(iprot)
  iprot.ReadMessageEnd()
  value = result751.Success
  if result751.O1 != nil {
    o1 = result751.O1
  }
  return
}

/**
 * Parameters:
 *  - RoleName
 *  - PrincipalName
 *  - PrincipalType
 */
func (p *ThriftHiveMetastoreClient) RevokeRole(role_name string, principal_name string, principal_type PrincipalType) (retval754 bool, o1 *MetaException, err error) {
  err = p.SendRevokeRole(role_name, principal_name, principal_type)
  if err != nil { return }
  return p.RecvRevokeRole()
}

func (p *ThriftHiveMetastoreClient) SendRevokeRole(role_name string, principal_name string, principal_type PrincipalType)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("revoke_role", thrift.CALL, p.SeqId)
  args755 := NewRevokeRoleArgs()
  args755.RoleName = role_name
  args755.PrincipalName = principal_name
  args755.PrincipalType = principal_type
  err = args755.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvRevokeRole() (value bool, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error757 := thrift.NewTApplicationExceptionDefault()
    error758, er := error757.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error758
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result756 := NewRevokeRoleResult()
  err = result756.Read(iprot)
  iprot.ReadMessageEnd()
  value = result756.Success
  if result756.O1 != nil {
    o1 = result756.O1
  }
  return
}

/**
 * Parameters:
 *  - PrincipalName
 *  - PrincipalType
 */
func (p *ThriftHiveMetastoreClient) ListRoles(principal_name string, principal_type PrincipalType) (retval759 thrift.TList, o1 *MetaException, err error) {
  err = p.SendListRoles(principal_name, principal_type)
  if err != nil { return }
  return p.RecvListRoles()
}

func (p *ThriftHiveMetastoreClient) SendListRoles(principal_name string, principal_type PrincipalType)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("list_roles", thrift.CALL, p.SeqId)
  args760 := NewListRolesArgs()
  args760.PrincipalName = principal_name
  args760.PrincipalType = principal_type
  err = args760.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvListRoles() (value thrift.TList, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error762 := thrift.NewTApplicationExceptionDefault()
    error763, er := error762.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error763
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result761 := NewListRolesResult()
  err = result761.Read(iprot)
  iprot.ReadMessageEnd()
  value = result761.Success
  if result761.O1 != nil {
    o1 = result761.O1
  }
  return
}

/**
 * Parameters:
 *  - HiveObject
 *  - UserName
 *  - GroupNames
 */
func (p *ThriftHiveMetastoreClient) GetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names thrift.TList) (retval764 *PrincipalPrivilegeSet, o1 *MetaException, err error) {
  err = p.SendGetPrivilegeSet(hiveObject, user_name, group_names)
  if err != nil { return }
  return p.RecvGetPrivilegeSet()
}

func (p *ThriftHiveMetastoreClient) SendGetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_privilege_set", thrift.CALL, p.SeqId)
  args765 := NewGetPrivilegeSetArgs()
  args765.HiveObject = hiveObject
  args765.UserName = user_name
  args765.GroupNames = group_names
  err = args765.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetPrivilegeSet() (value *PrincipalPrivilegeSet, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error767 := thrift.NewTApplicationExceptionDefault()
    error768, er := error767.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error768
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result766 := NewGetPrivilegeSetResult()
  err = result766.Read(iprot)
  iprot.ReadMessageEnd()
  value = result766.Success
  if result766.O1 != nil {
    o1 = result766.O1
  }
  return
}

/**
 * Parameters:
 *  - PrincipalName
 *  - PrincipalType
 *  - HiveObject
 */
func (p *ThriftHiveMetastoreClient) ListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (retval769 thrift.TList, o1 *MetaException, err error) {
  err = p.SendListPrivileges(principal_name, principal_type, hiveObject)
  if err != nil { return }
  return p.RecvListPrivileges()
}

func (p *ThriftHiveMetastoreClient) SendListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("list_privileges", thrift.CALL, p.SeqId)
  args770 := NewListPrivilegesArgs()
  args770.PrincipalName = principal_name
  args770.PrincipalType = principal_type
  args770.HiveObject = hiveObject
  err = args770.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvListPrivileges() (value thrift.TList, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error772 := thrift.NewTApplicationExceptionDefault()
    error773, er := error772.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error773
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result771 := NewListPrivilegesResult()
  err = result771.Read(iprot)
  iprot.ReadMessageEnd()
  value = result771.Success
  if result771.O1 != nil {
    o1 = result771.O1
  }
  return
}

/**
 * Parameters:
 *  - Privileges
 */
func (p *ThriftHiveMetastoreClient) GrantPrivileges(privileges *PrivilegeBag) (retval774 bool, o1 *MetaException, err error) {
  err = p.SendGrantPrivileges(privileges)
  if err != nil { return }
  return p.RecvGrantPrivileges()
}

func (p *ThriftHiveMetastoreClient) SendGrantPrivileges(privileges *PrivilegeBag)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("grant_privileges", thrift.CALL, p.SeqId)
  args775 := NewGrantPrivilegesArgs()
  args775.Privileges = privileges
  err = args775.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGrantPrivileges() (value bool, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error777 := thrift.NewTApplicationExceptionDefault()
    error778, er := error777.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error778
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result776 := NewGrantPrivilegesResult()
  err = result776.Read(iprot)
  iprot.ReadMessageEnd()
  value = result776.Success
  if result776.O1 != nil {
    o1 = result776.O1
  }
  return
}

/**
 * Parameters:
 *  - Privileges
 */
func (p *ThriftHiveMetastoreClient) RevokePrivileges(privileges *PrivilegeBag) (retval779 bool, o1 *MetaException, err error) {
  err = p.SendRevokePrivileges(privileges)
  if err != nil { return }
  return p.RecvRevokePrivileges()
}

func (p *ThriftHiveMetastoreClient) SendRevokePrivileges(privileges *PrivilegeBag)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("revoke_privileges", thrift.CALL, p.SeqId)
  args780 := NewRevokePrivilegesArgs()
  args780.Privileges = privileges
  err = args780.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvRevokePrivileges() (value bool, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error782 := thrift.NewTApplicationExceptionDefault()
    error783, er := error782.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error783
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result781 := NewRevokePrivilegesResult()
  err = result781.Read(iprot)
  iprot.ReadMessageEnd()
  value = result781.Success
  if result781.O1 != nil {
    o1 = result781.O1
  }
  return
}

/**
 * Parameters:
 *  - RenewerKerberosPrincipalName
 */
func (p *ThriftHiveMetastoreClient) GetDelegationToken(renewer_kerberos_principal_name string) (retval784 string, o1 *MetaException, err error) {
  err = p.SendGetDelegationToken(renewer_kerberos_principal_name)
  if err != nil { return }
  return p.RecvGetDelegationToken()
}

func (p *ThriftHiveMetastoreClient) SendGetDelegationToken(renewer_kerberos_principal_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_delegation_token", thrift.CALL, p.SeqId)
  args785 := NewGetDelegationTokenArgs()
  args785.RenewerKerberosPrincipalName = renewer_kerberos_principal_name
  err = args785.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetDelegationToken() (value string, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error787 := thrift.NewTApplicationExceptionDefault()
    error788, er := error787.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error788
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result786 := NewGetDelegationTokenResult()
  err = result786.Read(iprot)
  iprot.ReadMessageEnd()
  value = result786.Success
  if result786.O1 != nil {
    o1 = result786.O1
  }
  return
}

/**
 * Parameters:
 *  - RenewerKerberosPrincipalName
 *  - TokenSignature
 */
func (p *ThriftHiveMetastoreClient) GetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (retval789 string, o1 *MetaException, err error) {
  err = p.SendGetDelegationTokenWithSignature(renewer_kerberos_principal_name, token_signature)
  if err != nil { return }
  return p.RecvGetDelegationTokenWithSignature()
}

func (p *ThriftHiveMetastoreClient) SendGetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.CALL, p.SeqId)
  args790 := NewGetDelegationTokenWithSignatureArgs()
  args790.RenewerKerberosPrincipalName = renewer_kerberos_principal_name
  args790.TokenSignature = token_signature
  err = args790.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvGetDelegationTokenWithSignature() (value string, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error792 := thrift.NewTApplicationExceptionDefault()
    error793, er := error792.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error793
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result791 := NewGetDelegationTokenWithSignatureResult()
  err = result791.Read(iprot)
  iprot.ReadMessageEnd()
  value = result791.Success
  if result791.O1 != nil {
    o1 = result791.O1
  }
  return
}

/**
 * Parameters:
 *  - TokenStrForm
 */
func (p *ThriftHiveMetastoreClient) RenewDelegationToken(token_str_form string) (retval794 int64, o1 *MetaException, err error) {
  err = p.SendRenewDelegationToken(token_str_form)
  if err != nil { return }
  return p.RecvRenewDelegationToken()
}

func (p *ThriftHiveMetastoreClient) SendRenewDelegationToken(token_str_form string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("renew_delegation_token", thrift.CALL, p.SeqId)
  args795 := NewRenewDelegationTokenArgs()
  args795.TokenStrForm = token_str_form
  err = args795.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvRenewDelegationToken() (value int64, o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error797 := thrift.NewTApplicationExceptionDefault()
    error798, er := error797.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error798
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result796 := NewRenewDelegationTokenResult()
  err = result796.Read(iprot)
  iprot.ReadMessageEnd()
  value = result796.Success
  if result796.O1 != nil {
    o1 = result796.O1
  }
  return
}

/**
 * Parameters:
 *  - TokenStrForm
 */
func (p *ThriftHiveMetastoreClient) CancelDelegationToken(token_str_form string) (o1 *MetaException, err error) {
  err = p.SendCancelDelegationToken(token_str_form)
  if err != nil { return }
  return p.RecvCancelDelegationToken()
}

func (p *ThriftHiveMetastoreClient) SendCancelDelegationToken(token_str_form string)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("cancel_delegation_token", thrift.CALL, p.SeqId)
  args800 := NewCancelDelegationTokenArgs()
  args800.TokenStrForm = token_str_form
  err = args800.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftHiveMetastoreClient) RecvCancelDelegationToken() (o1 *MetaException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error802 := thrift.NewTApplicationExceptionDefault()
    error803, er := error802.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error803
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result801 := NewCancelDelegationTokenResult()
  err = result801.Read(iprot)
  iprot.ReadMessageEnd()
  if result801.O1 != nil {
    o1 = result801.O1
  }
  return
}


type ThriftHiveMetastoreProcessor struct {
  super *fb303.FacebookServiceProcessor
}

func (p *ThriftHiveMetastoreProcessor) Handler() IThriftHiveMetastore {
  return p.super.Handler().(IThriftHiveMetastore)
}

func (p *ThriftHiveMetastoreProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.super.AddToProcessorMap(key, processor)
}

func (p *ThriftHiveMetastoreProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  return p.super.GetProcessorFunction(key)
}

func (p *ThriftHiveMetastoreProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.super.ProcessorMap()
}

func NewThriftHiveMetastoreProcessor(handler IThriftHiveMetastore) *ThriftHiveMetastoreProcessor {
  self804 := &ThriftHiveMetastoreProcessor{super: fb303.NewFacebookServiceProcessor(handler)}
  self804.AddToProcessorMap("create_database", &thriftHiveMetastoreProcessorCreateDatabase{handler:handler})
  self804.AddToProcessorMap("get_database", &thriftHiveMetastoreProcessorGetDatabase{handler:handler})
  self804.AddToProcessorMap("drop_database", &thriftHiveMetastoreProcessorDropDatabase{handler:handler})
  self804.AddToProcessorMap("get_databases", &thriftHiveMetastoreProcessorGetDatabases{handler:handler})
  self804.AddToProcessorMap("get_all_databases", &thriftHiveMetastoreProcessorGetAllDatabases{handler:handler})
  self804.AddToProcessorMap("alter_database", &thriftHiveMetastoreProcessorAlterDatabase{handler:handler})
  self804.AddToProcessorMap("get_type", &thriftHiveMetastoreProcessorGetType{handler:handler})
  self804.AddToProcessorMap("create_type", &thriftHiveMetastoreProcessorCreateType{handler:handler})
  self804.AddToProcessorMap("drop_type", &thriftHiveMetastoreProcessorDropType{handler:handler})
  self804.AddToProcessorMap("get_type_all", &thriftHiveMetastoreProcessorGetTypeAll{handler:handler})
  self804.AddToProcessorMap("get_fields", &thriftHiveMetastoreProcessorGetFields{handler:handler})
  self804.AddToProcessorMap("get_schema", &thriftHiveMetastoreProcessorGetSchema{handler:handler})
  self804.AddToProcessorMap("create_table", &thriftHiveMetastoreProcessorCreateTable{handler:handler})
  self804.AddToProcessorMap("drop_table", &thriftHiveMetastoreProcessorDropTable{handler:handler})
  self804.AddToProcessorMap("get_tables", &thriftHiveMetastoreProcessorGetTables{handler:handler})
  self804.AddToProcessorMap("get_all_tables", &thriftHiveMetastoreProcessorGetAllTables{handler:handler})
  self804.AddToProcessorMap("get_table", &thriftHiveMetastoreProcessorGetTable{handler:handler})
  self804.AddToProcessorMap("alter_table", &thriftHiveMetastoreProcessorAlterTable{handler:handler})
  self804.AddToProcessorMap("add_partition", &thriftHiveMetastoreProcessorAddPartition{handler:handler})
  self804.AddToProcessorMap("append_partition", &thriftHiveMetastoreProcessorAppendPartition{handler:handler})
  self804.AddToProcessorMap("append_partition_by_name", &thriftHiveMetastoreProcessorAppendPartitionByName{handler:handler})
  self804.AddToProcessorMap("drop_partition", &thriftHiveMetastoreProcessorDropPartition{handler:handler})
  self804.AddToProcessorMap("drop_partition_by_name", &thriftHiveMetastoreProcessorDropPartitionByName{handler:handler})
  self804.AddToProcessorMap("get_partition", &thriftHiveMetastoreProcessorGetPartition{handler:handler})
  self804.AddToProcessorMap("get_partition_with_auth", &thriftHiveMetastoreProcessorGetPartitionWithAuth{handler:handler})
  self804.AddToProcessorMap("get_partition_by_name", &thriftHiveMetastoreProcessorGetPartitionByName{handler:handler})
  self804.AddToProcessorMap("get_partitions", &thriftHiveMetastoreProcessorGetPartitions{handler:handler})
  self804.AddToProcessorMap("get_partitions_with_auth", &thriftHiveMetastoreProcessorGetPartitionsWithAuth{handler:handler})
  self804.AddToProcessorMap("get_partition_names", &thriftHiveMetastoreProcessorGetPartitionNames{handler:handler})
  self804.AddToProcessorMap("get_partitions_ps", &thriftHiveMetastoreProcessorGetPartitionsPs{handler:handler})
  self804.AddToProcessorMap("get_partitions_ps_with_auth", &thriftHiveMetastoreProcessorGetPartitionsPsWithAuth{handler:handler})
  self804.AddToProcessorMap("get_partition_names_ps", &thriftHiveMetastoreProcessorGetPartitionNamesPs{handler:handler})
  self804.AddToProcessorMap("get_partitions_by_filter", &thriftHiveMetastoreProcessorGetPartitionsByFilter{handler:handler})
  self804.AddToProcessorMap("alter_partition", &thriftHiveMetastoreProcessorAlterPartition{handler:handler})
  self804.AddToProcessorMap("get_config_value", &thriftHiveMetastoreProcessorGetConfigValue{handler:handler})
  self804.AddToProcessorMap("partition_name_to_vals", &thriftHiveMetastoreProcessorPartitionNameToVals{handler:handler})
  self804.AddToProcessorMap("partition_name_to_spec", &thriftHiveMetastoreProcessorPartitionNameToSpec{handler:handler})
  self804.AddToProcessorMap("add_index", &thriftHiveMetastoreProcessorAddIndex{handler:handler})
  self804.AddToProcessorMap("alter_index", &thriftHiveMetastoreProcessorAlterIndex{handler:handler})
  self804.AddToProcessorMap("drop_index_by_name", &thriftHiveMetastoreProcessorDropIndexByName{handler:handler})
  self804.AddToProcessorMap("get_index_by_name", &thriftHiveMetastoreProcessorGetIndexByName{handler:handler})
  self804.AddToProcessorMap("get_indexes", &thriftHiveMetastoreProcessorGetIndexes{handler:handler})
  self804.AddToProcessorMap("get_index_names", &thriftHiveMetastoreProcessorGetIndexNames{handler:handler})
  self804.AddToProcessorMap("create_role", &thriftHiveMetastoreProcessorCreateRole{handler:handler})
  self804.AddToProcessorMap("drop_role", &thriftHiveMetastoreProcessorDropRole{handler:handler})
  self804.AddToProcessorMap("get_role_names", &thriftHiveMetastoreProcessorGetRoleNames{handler:handler})
  self804.AddToProcessorMap("grant_role", &thriftHiveMetastoreProcessorGrantRole{handler:handler})
  self804.AddToProcessorMap("revoke_role", &thriftHiveMetastoreProcessorRevokeRole{handler:handler})
  self804.AddToProcessorMap("list_roles", &thriftHiveMetastoreProcessorListRoles{handler:handler})
  self804.AddToProcessorMap("get_privilege_set", &thriftHiveMetastoreProcessorGetPrivilegeSet{handler:handler})
  self804.AddToProcessorMap("list_privileges", &thriftHiveMetastoreProcessorListPrivileges{handler:handler})
  self804.AddToProcessorMap("grant_privileges", &thriftHiveMetastoreProcessorGrantPrivileges{handler:handler})
  self804.AddToProcessorMap("revoke_privileges", &thriftHiveMetastoreProcessorRevokePrivileges{handler:handler})
  self804.AddToProcessorMap("get_delegation_token", &thriftHiveMetastoreProcessorGetDelegationToken{handler:handler})
  self804.AddToProcessorMap("get_delegation_token_with_signature", &thriftHiveMetastoreProcessorGetDelegationTokenWithSignature{handler:handler})
  self804.AddToProcessorMap("renew_delegation_token", &thriftHiveMetastoreProcessorRenewDelegationToken{handler:handler})
  self804.AddToProcessorMap("cancel_delegation_token", &thriftHiveMetastoreProcessorCancelDelegationToken{handler:handler})
  return self804
}

func (p *ThriftHiveMetastoreProcessor) Process(iprot, oprot thrift.TProtocol) (bool, thrift.TException) {
  return p.super.Process(iprot, oprot)
}

type thriftHiveMetastoreProcessorCreateDatabase struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCreateDatabaseArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCreateDatabaseResult()
  if result.O1, result.O2, result.O3, err = p.handler.CreateDatabase(args.Database); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_database: " + err.Error())
    oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("create_database", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetDatabase struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetDatabaseArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetDatabaseResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetDatabase(args.Name); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_database: " + err.Error())
    oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_database", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropDatabase struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDropDatabaseArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDropDatabaseResult()
  if result.O1, result.O2, result.O3, err = p.handler.DropDatabase(args.Name, args.DeleteData); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_database: " + err.Error())
    oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("drop_database", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetDatabases struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetDatabasesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetDatabasesResult()
  if result.Success, result.O1, err = p.handler.GetDatabases(args.Pattern); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_databases: " + err.Error())
    oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_databases", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetAllDatabases struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetAllDatabasesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetAllDatabasesResult()
  if result.Success, result.O1, err = p.handler.GetAllDatabases(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_databases: " + err.Error())
    oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_all_databases", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterDatabase struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAlterDatabaseArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAlterDatabaseResult()
  if result.O1, result.O2, err = p.handler.AlterDatabase(args.Dbname, args.Db); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_database: " + err.Error())
    oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("alter_database", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetType struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetTypeArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetTypeResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetType(args.Name); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type: " + err.Error())
    oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_type", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateType struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCreateTypeArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCreateTypeResult()
  if result.Success, result.O1, result.O2, result.O3, err = p.handler.CreateType(args.TypeA1); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_type: " + err.Error())
    oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("create_type", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropType struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDropTypeArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDropTypeResult()
  if result.Success, result.O1, result.O2, err = p.handler.DropType(args.TypeA1); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_type: " + err.Error())
    oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("drop_type", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTypeAll struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTypeAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetTypeAllArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetTypeAllResult()
  if result.Success, result.O2, err = p.handler.GetTypeAll(args.Name); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type_all: " + err.Error())
    oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_type_all", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetFields struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFields) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetFieldsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetFieldsResult()
  if result.Success, result.O1, result.O2, result.O3, err = p.handler.GetFields(args.DbName, args.TableName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_fields: " + err.Error())
    oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_fields", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetSchema struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetSchema) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSchemaArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSchemaResult()
  if result.Success, result.O1, result.O2, result.O3, err = p.handler.GetSchema(args.DbName, args.TableName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_schema: " + err.Error())
    oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_schema", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateTable struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCreateTableArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCreateTableResult()
  if result.O1, result.O2, result.O3, result.O4, err = p.handler.CreateTable(args.Tbl); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table: " + err.Error())
    oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("create_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropTable struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDropTableArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDropTableResult()
  if result.O1, result.O3, err = p.handler.DropTable(args.Dbname, args.Name, args.DeleteData); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_table: " + err.Error())
    oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("drop_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTables struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetTablesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetTablesResult()
  if result.Success, result.O1, err = p.handler.GetTables(args.DbName, args.Pattern); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables: " + err.Error())
    oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_tables", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetAllTables struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetAllTablesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetAllTablesResult()
  if result.Success, result.O1, err = p.handler.GetAllTables(args.DbName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_tables: " + err.Error())
    oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_all_tables", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTable struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetTableArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetTableResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetTable(args.Dbname, args.TblName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table: " + err.Error())
    oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterTable struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAlterTableArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAlterTableResult()
  if result.O1, result.O2, err = p.handler.AlterTable(args.Dbname, args.TblName, args.NewTbl); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table: " + err.Error())
    oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("alter_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddPartition struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddPartitionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddPartitionResult()
  if result.Success, result.O1, result.O2, result.O3, err = p.handler.AddPartition(args.NewPart); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partition: " + err.Error())
    oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("add_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAppendPartition struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAppendPartitionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAppendPartitionResult()
  if result.Success, result.O1, result.O2, result.O3, err = p.handler.AppendPartition(args.DbName, args.TblName, args.PartVals); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition: " + err.Error())
    oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("append_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionByName struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAppendPartitionByNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAppendPartitionByNameResult()
  if result.Success, result.O1, result.O2, result.O3, err = p.handler.AppendPartitionByName(args.DbName, args.TblName, args.PartName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_by_name: " + err.Error())
    oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("append_partition_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropPartition struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDropPartitionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDropPartitionResult()
  if result.Success, result.O1, result.O2, err = p.handler.DropPartition(args.DbName, args.TblName, args.PartVals, args.DeleteData); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition: " + err.Error())
    oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("drop_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropPartitionByName struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDropPartitionByNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDropPartitionByNameResult()
  if result.Success, result.O1, result.O2, err = p.handler.DropPartitionByName(args.DbName, args.TblName, args.PartName, args.DeleteData); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_by_name: " + err.Error())
    oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("drop_partition_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartition struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPartitionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPartitionResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetPartition(args.DbName, args.TblName, args.PartVals); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition: " + err.Error())
    oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionWithAuth struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPartitionWithAuthArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPartitionWithAuthResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetPartitionWithAuth(args.DbName, args.TblName, args.PartVals, args.UserName, args.GroupNames); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_with_auth: " + err.Error())
    oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_partition_with_auth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionByName struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPartitionByNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPartitionByNameResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetPartitionByName(args.DbName, args.TblName, args.PartName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_by_name: " + err.Error())
    oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_partition_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitions struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPartitionsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPartitionsResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetPartitions(args.DbName, args.TblName, args.MaxParts); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions: " + err.Error())
    oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_partitions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsWithAuth struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPartitionsWithAuthArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPartitionsWithAuthResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetPartitionsWithAuth(args.DbName, args.TblName, args.MaxParts, args.UserName, args.GroupNames); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_with_auth: " + err.Error())
    oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_partitions_with_auth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNames struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPartitionNamesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPartitionNamesResult()
  if result.Success, result.O2, err = p.handler.GetPartitionNames(args.DbName, args.TblName, args.MaxParts); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names: " + err.Error())
    oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_partition_names", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPs struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPartitionsPsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPartitionsPsResult()
  if result.Success, result.O1, err = p.handler.GetPartitionsPs(args.DbName, args.TblName, args.PartVals, args.MaxParts); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps: " + err.Error())
    oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_partitions_ps", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPsWithAuth struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPsWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPartitionsPsWithAuthArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPartitionsPsWithAuthResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetPartitionsPsWithAuth(args.DbName, args.TblName, args.PartVals, args.MaxParts, args.UserName, args.GroupNames); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps_with_auth: " + err.Error())
    oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNamesPs struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNamesPs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPartitionNamesPsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPartitionNamesPsResult()
  if result.Success, result.O1, err = p.handler.GetPartitionNamesPs(args.DbName, args.TblName, args.PartVals, args.MaxParts); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names_ps: " + err.Error())
    oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_partition_names_ps", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByFilter struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByFilter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPartitionsByFilterArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPartitionsByFilterResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetPartitionsByFilter(args.DbName, args.TblName, args.Filter, args.MaxParts); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_filter: " + err.Error())
    oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_partitions_by_filter", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterPartition struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAlterPartitionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAlterPartitionResult()
  if result.O1, result.O2, err = p.handler.AlterPartition(args.DbName, args.TblName, args.NewPart); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partition: " + err.Error())
    oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("alter_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetConfigValue struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetConfigValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetConfigValueArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetConfigValueResult()
  if result.Success, result.O1, err = p.handler.GetConfigValue(args.Name, args.DefaultValue); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_config_value: " + err.Error())
    oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_config_value", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToVals struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToVals) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPartitionNameToValsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPartitionNameToValsResult()
  if result.Success, result.O1, err = p.handler.PartitionNameToVals(args.PartName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_vals: " + err.Error())
    oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("partition_name_to_vals", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToSpec struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToSpec) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewPartitionNameToSpecArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewPartitionNameToSpecResult()
  if result.Success, result.O1, err = p.handler.PartitionNameToSpec(args.PartName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_spec: " + err.Error())
    oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("partition_name_to_spec", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddIndex struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAddIndexArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAddIndexResult()
  if result.Success, result.O1, result.O2, result.O3, err = p.handler.AddIndex(args.NewIndex, args.IndexTable); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_index: " + err.Error())
    oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("add_index", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterIndex struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAlterIndexArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAlterIndexResult()
  if result.O1, result.O2, err = p.handler.AlterIndex(args.Dbname, args.BaseTblName, args.IdxName, args.NewIdx); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_index: " + err.Error())
    oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("alter_index", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropIndexByName struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropIndexByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDropIndexByNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDropIndexByNameResult()
  if result.Success, result.O1, result.O2, err = p.handler.DropIndexByName(args.DbName, args.TblName, args.IndexName, args.DeleteData); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_index_by_name: " + err.Error())
    oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("drop_index_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetIndexByName struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetIndexByNameArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetIndexByNameResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetIndexByName(args.DbName, args.TblName, args.IndexName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_by_name: " + err.Error())
    oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_index_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetIndexes struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetIndexesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetIndexesResult()
  if result.Success, result.O1, result.O2, err = p.handler.GetIndexes(args.DbName, args.TblName, args.MaxIndexes); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_indexes: " + err.Error())
    oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_indexes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetIndexNames struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetIndexNamesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetIndexNamesResult()
  if result.Success, result.O2, err = p.handler.GetIndexNames(args.DbName, args.TblName, args.MaxIndexes); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_names: " + err.Error())
    oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_index_names", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateRole struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCreateRoleArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCreateRoleResult()
  if result.Success, result.O1, err = p.handler.CreateRole(args.Role); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_role: " + err.Error())
    oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("create_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropRole struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDropRoleArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDropRoleResult()
  if result.Success, result.O1, err = p.handler.DropRole(args.RoleName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_role: " + err.Error())
    oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("drop_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetRoleNames struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetRoleNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRoleNamesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRoleNamesResult()
  if result.Success, result.O1, err = p.handler.GetRoleNames(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_role_names: " + err.Error())
    oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_role_names", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGrantRole struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGrantRoleArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGrantRoleResult()
  if result.Success, result.O1, err = p.handler.GrantRole(args.RoleName, args.PrincipalName, args.PrincipalType, args.Grantor, args.GrantorType, args.GrantOption); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_role: " + err.Error())
    oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("grant_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRevokeRole struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokeRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRevokeRoleArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRevokeRoleResult()
  if result.Success, result.O1, err = p.handler.RevokeRole(args.RoleName, args.PrincipalName, args.PrincipalType); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_role: " + err.Error())
    oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("revoke_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorListRoles struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListRoles) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewListRolesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewListRolesResult()
  if result.Success, result.O1, err = p.handler.ListRoles(args.PrincipalName, args.PrincipalType); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_roles: " + err.Error())
    oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("list_roles", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPrivilegeSet struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPrivilegeSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetPrivilegeSetArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetPrivilegeSetResult()
  if result.Success, result.O1, err = p.handler.GetPrivilegeSet(args.HiveObject, args.UserName, args.GroupNames); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_privilege_set: " + err.Error())
    oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_privilege_set", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorListPrivileges struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListPrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewListPrivilegesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewListPrivilegesResult()
  if result.Success, result.O1, err = p.handler.ListPrivileges(args.PrincipalName, args.PrincipalType, args.HiveObject); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_privileges: " + err.Error())
    oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("list_privileges", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGrantPrivileges struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantPrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGrantPrivilegesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGrantPrivilegesResult()
  if result.Success, result.O1, err = p.handler.GrantPrivileges(args.Privileges); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_privileges: " + err.Error())
    oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("grant_privileges", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRevokePrivileges struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokePrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRevokePrivilegesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRevokePrivilegesResult()
  if result.Success, result.O1, err = p.handler.RevokePrivileges(args.Privileges); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_privileges: " + err.Error())
    oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("revoke_privileges", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetDelegationToken struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetDelegationTokenArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetDelegationTokenResult()
  if result.Success, result.O1, err = p.handler.GetDelegationToken(args.RenewerKerberosPrincipalName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token: " + err.Error())
    oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_delegation_token", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetDelegationTokenWithSignature struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationTokenWithSignature) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetDelegationTokenWithSignatureArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetDelegationTokenWithSignatureResult()
  if result.Success, result.O1, err = p.handler.GetDelegationTokenWithSignature(args.RenewerKerberosPrincipalName, args.TokenSignature); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token_with_signature: " + err.Error())
    oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRenewDelegationToken struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRenewDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewRenewDelegationTokenArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewRenewDelegationTokenResult()
  if result.Success, result.O1, err = p.handler.RenewDelegationToken(args.TokenStrForm); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renew_delegation_token: " + err.Error())
    oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("renew_delegation_token", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCancelDelegationToken struct {
  handler IThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCancelDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCancelDelegationTokenArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCancelDelegationTokenResult()
  if result.O1, err = p.handler.CancelDelegationToken(args.TokenStrForm); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancel_delegation_token: " + err.Error())
    oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("cancel_delegation_token", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - Database
 */
type CreateDatabaseArgs struct {
  thrift.TStruct
  Database *Database "database"; // 1
}

func NewCreateDatabaseArgs() *CreateDatabaseArgs {
  output := &CreateDatabaseArgs{
    TStruct:thrift.NewTStruct("create_database_args", []thrift.TField{
    thrift.NewTField("database", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *CreateDatabaseArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "database" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateDatabaseArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Database = NewDatabase()
  err807 := p.Database.Read(iprot)
  if err807 != nil { return thrift.NewTProtocolExceptionReadStruct("p.DatabaseDatabase", err807); }
  return err
}

func (p *CreateDatabaseArgs) ReadFieldDatabase(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CreateDatabaseArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("create_database_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateDatabaseArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Database != nil {
    err = oprot.WriteFieldBegin("database", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "database", p.ThriftName(), err); }
    err = p.Database.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Database", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "database", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateDatabaseArgs) WriteFieldDatabase(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CreateDatabaseArgs) TStructName() string {
  return "CreateDatabaseArgs"
}

func (p *CreateDatabaseArgs) ThriftName() string {
  return "create_database_args"
}

func (p *CreateDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateDatabaseArgs(%+v)", *p)
}

func (p *CreateDatabaseArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateDatabaseArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Database.CompareTo(data.Database); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CreateDatabaseArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Database
  }
  return nil
}

func (p *CreateDatabaseArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("database", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - O1
 *  - O2
 *  - O3
 */
type CreateDatabaseResult struct {
  thrift.TStruct
  O1 *AlreadyExistsException "o1"; // 1
  O2 *InvalidObjectException "o2"; // 2
  O3 *MetaException "o3"; // 3
}

func NewCreateDatabaseResult() *CreateDatabaseResult {
  output := &CreateDatabaseResult{
    TStruct:thrift.NewTStruct("create_database_result", []thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *CreateDatabaseResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateDatabaseResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewAlreadyExistsException()
  err810 := p.O1.Read(iprot)
  if err810 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1AlreadyExistsException", err810); }
  return err
}

func (p *CreateDatabaseResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CreateDatabaseResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewInvalidObjectException()
  err813 := p.O2.Read(iprot)
  if err813 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2InvalidObjectException", err813); }
  return err
}

func (p *CreateDatabaseResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CreateDatabaseResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewMetaException()
  err816 := p.O3.Read(iprot)
  if err816 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3MetaException", err816); }
  return err
}

func (p *CreateDatabaseResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CreateDatabaseResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("create_database_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateDatabaseResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("AlreadyExistsException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateDatabaseResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CreateDatabaseResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateDatabaseResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CreateDatabaseResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateDatabaseResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CreateDatabaseResult) TStructName() string {
  return "CreateDatabaseResult"
}

func (p *CreateDatabaseResult) ThriftName() string {
  return "create_database_result"
}

func (p *CreateDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateDatabaseResult(%+v)", *p)
}

func (p *CreateDatabaseResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateDatabaseResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CreateDatabaseResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.O1
  case 2: return p.O2
  case 3: return p.O3
  }
  return nil
}

func (p *CreateDatabaseResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Name
 */
type GetDatabaseArgs struct {
  thrift.TStruct
  Name string "name"; // 1
}

func NewGetDatabaseArgs() *GetDatabaseArgs {
  output := &GetDatabaseArgs{
    TStruct:thrift.NewTStruct("get_database_args", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetDatabaseArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDatabaseArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v817, err818 := iprot.ReadString()
  if err818 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err818); }
  p.Name = v817
  return err
}

func (p *GetDatabaseArgs) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetDatabaseArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_database_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDatabaseArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *GetDatabaseArgs) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetDatabaseArgs) TStructName() string {
  return "GetDatabaseArgs"
}

func (p *GetDatabaseArgs) ThriftName() string {
  return "get_database_args"
}

func (p *GetDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDatabaseArgs(%+v)", *p)
}

func (p *GetDatabaseArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDatabaseArgs)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetDatabaseArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  }
  return nil
}

func (p *GetDatabaseArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetDatabaseResult struct {
  thrift.TStruct
  Success *Database "success"; // 0
  O1 *NoSuchObjectException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewGetDatabaseResult() *GetDatabaseResult {
  output := &GetDatabaseResult{
    TStruct:thrift.NewTStruct("get_database_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetDatabaseResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDatabaseResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewDatabase()
  err821 := p.Success.Read(iprot)
  if err821 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessDatabase", err821); }
  return err
}

func (p *GetDatabaseResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetDatabaseResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewNoSuchObjectException()
  err824 := p.O1.Read(iprot)
  if err824 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1NoSuchObjectException", err824); }
  return err
}

func (p *GetDatabaseResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetDatabaseResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err827 := p.O2.Read(iprot)
  if err827 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err827); }
  return err
}

func (p *GetDatabaseResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetDatabaseResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_database_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDatabaseResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Database", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetDatabaseResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetDatabaseResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetDatabaseResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetDatabaseResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetDatabaseResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetDatabaseResult) TStructName() string {
  return "GetDatabaseResult"
}

func (p *GetDatabaseResult) ThriftName() string {
  return "get_database_result"
}

func (p *GetDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDatabaseResult(%+v)", *p)
}

func (p *GetDatabaseResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDatabaseResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetDatabaseResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetDatabaseResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Name
 *  - DeleteData
 */
type DropDatabaseArgs struct {
  thrift.TStruct
  Name string "name"; // 1
  DeleteData bool "deleteData"; // 2
}

func NewDropDatabaseArgs() *DropDatabaseArgs {
  output := &DropDatabaseArgs{
    TStruct:thrift.NewTStruct("drop_database_args", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("deleteData", thrift.BOOL, 2),
    }),
  }
  {
  }
  return output
}

func (p *DropDatabaseArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "deleteData" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropDatabaseArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v828, err829 := iprot.ReadString()
  if err829 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err829); }
  p.Name = v828
  return err
}

func (p *DropDatabaseArgs) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropDatabaseArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v830, err831 := iprot.ReadBool()
  if err831 != nil { return thrift.NewTProtocolExceptionReadField(2, "deleteData", p.ThriftName(), err831); }
  p.DeleteData = v830
  return err
}

func (p *DropDatabaseArgs) ReadFieldDeleteData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropDatabaseArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_database_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropDatabaseArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *DropDatabaseArgs) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropDatabaseArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("deleteData", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "deleteData", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.DeleteData))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "deleteData", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "deleteData", p.ThriftName(), err); }
  return err
}

func (p *DropDatabaseArgs) WriteFieldDeleteData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropDatabaseArgs) TStructName() string {
  return "DropDatabaseArgs"
}

func (p *DropDatabaseArgs) ThriftName() string {
  return "drop_database_args"
}

func (p *DropDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropDatabaseArgs(%+v)", *p)
}

func (p *DropDatabaseArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropDatabaseArgs)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.DeleteData, data.DeleteData); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *DropDatabaseArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  case 2: return p.DeleteData
  }
  return nil
}

func (p *DropDatabaseArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("deleteData", thrift.BOOL, 2),
    })
}

/**
 * Attributes:
 *  - O1
 *  - O2
 *  - O3
 */
type DropDatabaseResult struct {
  thrift.TStruct
  O1 *NoSuchObjectException "o1"; // 1
  O2 *InvalidOperationException "o2"; // 2
  O3 *MetaException "o3"; // 3
}

func NewDropDatabaseResult() *DropDatabaseResult {
  output := &DropDatabaseResult{
    TStruct:thrift.NewTStruct("drop_database_result", []thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *DropDatabaseResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropDatabaseResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewNoSuchObjectException()
  err834 := p.O1.Read(iprot)
  if err834 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1NoSuchObjectException", err834); }
  return err
}

func (p *DropDatabaseResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropDatabaseResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewInvalidOperationException()
  err837 := p.O2.Read(iprot)
  if err837 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2InvalidOperationException", err837); }
  return err
}

func (p *DropDatabaseResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropDatabaseResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewMetaException()
  err840 := p.O3.Read(iprot)
  if err840 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3MetaException", err840); }
  return err
}

func (p *DropDatabaseResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DropDatabaseResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_database_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropDatabaseResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *DropDatabaseResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropDatabaseResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidOperationException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *DropDatabaseResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropDatabaseResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *DropDatabaseResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DropDatabaseResult) TStructName() string {
  return "DropDatabaseResult"
}

func (p *DropDatabaseResult) ThriftName() string {
  return "drop_database_result"
}

func (p *DropDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropDatabaseResult(%+v)", *p)
}

func (p *DropDatabaseResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropDatabaseResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DropDatabaseResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.O1
  case 2: return p.O2
  case 3: return p.O3
  }
  return nil
}

func (p *DropDatabaseResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Pattern
 */
type GetDatabasesArgs struct {
  thrift.TStruct
  Pattern string "pattern"; // 1
}

func NewGetDatabasesArgs() *GetDatabasesArgs {
  output := &GetDatabasesArgs{
    TStruct:thrift.NewTStruct("get_databases_args", []thrift.TField{
    thrift.NewTField("pattern", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetDatabasesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "pattern" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDatabasesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v841, err842 := iprot.ReadString()
  if err842 != nil { return thrift.NewTProtocolExceptionReadField(1, "pattern", p.ThriftName(), err842); }
  p.Pattern = v841
  return err
}

func (p *GetDatabasesArgs) ReadFieldPattern(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetDatabasesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_databases_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDatabasesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Pattern) < 1 { return nil}
  err = oprot.WriteFieldBegin("pattern", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "pattern", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Pattern))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "pattern", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "pattern", p.ThriftName(), err); }
  return err
}

func (p *GetDatabasesArgs) WriteFieldPattern(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetDatabasesArgs) TStructName() string {
  return "GetDatabasesArgs"
}

func (p *GetDatabasesArgs) ThriftName() string {
  return "get_databases_args"
}

func (p *GetDatabasesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDatabasesArgs(%+v)", *p)
}

func (p *GetDatabasesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDatabasesArgs)
  if !ok {
    return 0, false
  }
  if p.Pattern != data.Pattern {
    if p.Pattern < data.Pattern {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetDatabasesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Pattern
  }
  return nil
}

func (p *GetDatabasesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("pattern", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetDatabasesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGetDatabasesResult() *GetDatabasesResult {
  output := &GetDatabasesResult{
    TStruct:thrift.NewTStruct("get_databases_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetDatabasesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDatabasesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype848, _size845, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype848, _size845)
  for _i849:= 0; _i849 < _size845; _i849++ {
    v851, err852 := iprot.ReadString()
    if err852 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem850", "", err852); }
    _elem850 := v851
    p.Success.Push(_elem850)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetDatabasesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetDatabasesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err855 := p.O1.Read(iprot)
  if err855 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err855); }
  return err
}

func (p *GetDatabasesResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetDatabasesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_databases_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDatabasesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter856 := range p.Success.Iter() {
      Iter857 := Iter856.(string)
      err = oprot.WriteString(string(Iter857))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter857", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetDatabasesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetDatabasesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetDatabasesResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetDatabasesResult) TStructName() string {
  return "GetDatabasesResult"
}

func (p *GetDatabasesResult) ThriftName() string {
  return "get_databases_result"
}

func (p *GetDatabasesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDatabasesResult(%+v)", *p)
}

func (p *GetDatabasesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDatabasesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetDatabasesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetDatabasesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

type GetAllDatabasesArgs struct {
  thrift.TStruct
}

func NewGetAllDatabasesArgs() *GetAllDatabasesArgs {
  output := &GetAllDatabasesArgs{
    TStruct:thrift.NewTStruct("get_all_databases_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetAllDatabasesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllDatabasesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_all_databases_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllDatabasesArgs) TStructName() string {
  return "GetAllDatabasesArgs"
}

func (p *GetAllDatabasesArgs) ThriftName() string {
  return "get_all_databases_args"
}

func (p *GetAllDatabasesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllDatabasesArgs(%+v)", *p)
}

func (p *GetAllDatabasesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetAllDatabasesArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetAllDatabasesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetAllDatabasesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetAllDatabasesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGetAllDatabasesResult() *GetAllDatabasesResult {
  output := &GetAllDatabasesResult{
    TStruct:thrift.NewTStruct("get_all_databases_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetAllDatabasesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllDatabasesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype863, _size860, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype863, _size860)
  for _i864:= 0; _i864 < _size860; _i864++ {
    v866, err867 := iprot.ReadString()
    if err867 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem865", "", err867); }
    _elem865 := v866
    p.Success.Push(_elem865)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetAllDatabasesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetAllDatabasesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err870 := p.O1.Read(iprot)
  if err870 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err870); }
  return err
}

func (p *GetAllDatabasesResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAllDatabasesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_all_databases_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllDatabasesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter871 := range p.Success.Iter() {
      Iter872 := Iter871.(string)
      err = oprot.WriteString(string(Iter872))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter872", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAllDatabasesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetAllDatabasesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAllDatabasesResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAllDatabasesResult) TStructName() string {
  return "GetAllDatabasesResult"
}

func (p *GetAllDatabasesResult) ThriftName() string {
  return "get_all_databases_result"
}

func (p *GetAllDatabasesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllDatabasesResult(%+v)", *p)
}

func (p *GetAllDatabasesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAllDatabasesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAllDatabasesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetAllDatabasesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Dbname
 *  - Db
 */
type AlterDatabaseArgs struct {
  thrift.TStruct
  Dbname string "dbname"; // 1
  Db *Database "db"; // 2
}

func NewAlterDatabaseArgs() *AlterDatabaseArgs {
  output := &AlterDatabaseArgs{
    TStruct:thrift.NewTStruct("alter_database_args", []thrift.TField{
    thrift.NewTField("dbname", thrift.STRING, 1),
    thrift.NewTField("db", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *AlterDatabaseArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "dbname" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "db" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterDatabaseArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v873, err874 := iprot.ReadString()
  if err874 != nil { return thrift.NewTProtocolExceptionReadField(1, "dbname", p.ThriftName(), err874); }
  p.Dbname = v873
  return err
}

func (p *AlterDatabaseArgs) ReadFieldDbname(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AlterDatabaseArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Db = NewDatabase()
  err877 := p.Db.Read(iprot)
  if err877 != nil { return thrift.NewTProtocolExceptionReadStruct("p.DbDatabase", err877); }
  return err
}

func (p *AlterDatabaseArgs) ReadFieldDb(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AlterDatabaseArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("alter_database_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterDatabaseArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Dbname) < 1 { return nil}
  err = oprot.WriteFieldBegin("dbname", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Dbname))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  return err
}

func (p *AlterDatabaseArgs) WriteFieldDbname(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AlterDatabaseArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Db != nil {
    err = oprot.WriteFieldBegin("db", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "db", p.ThriftName(), err); }
    err = p.Db.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Database", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "db", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterDatabaseArgs) WriteFieldDb(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AlterDatabaseArgs) TStructName() string {
  return "AlterDatabaseArgs"
}

func (p *AlterDatabaseArgs) ThriftName() string {
  return "alter_database_args"
}

func (p *AlterDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterDatabaseArgs(%+v)", *p)
}

func (p *AlterDatabaseArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AlterDatabaseArgs)
  if !ok {
    return 0, false
  }
  if p.Dbname != data.Dbname {
    if p.Dbname < data.Dbname {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Db.CompareTo(data.Db); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AlterDatabaseArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Dbname
  case 2: return p.Db
  }
  return nil
}

func (p *AlterDatabaseArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("dbname", thrift.STRING, 1),
    thrift.NewTField("db", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - O1
 *  - O2
 */
type AlterDatabaseResult struct {
  thrift.TStruct
  O1 *MetaException "o1"; // 1
  O2 *NoSuchObjectException "o2"; // 2
}

func NewAlterDatabaseResult() *AlterDatabaseResult {
  output := &AlterDatabaseResult{
    TStruct:thrift.NewTStruct("alter_database_result", []thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *AlterDatabaseResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterDatabaseResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err880 := p.O1.Read(iprot)
  if err880 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err880); }
  return err
}

func (p *AlterDatabaseResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AlterDatabaseResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewNoSuchObjectException()
  err883 := p.O2.Read(iprot)
  if err883 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2NoSuchObjectException", err883); }
  return err
}

func (p *AlterDatabaseResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AlterDatabaseResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("alter_database_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterDatabaseResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterDatabaseResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AlterDatabaseResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterDatabaseResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AlterDatabaseResult) TStructName() string {
  return "AlterDatabaseResult"
}

func (p *AlterDatabaseResult) ThriftName() string {
  return "alter_database_result"
}

func (p *AlterDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterDatabaseResult(%+v)", *p)
}

func (p *AlterDatabaseResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AlterDatabaseResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AlterDatabaseResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *AlterDatabaseResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Name
 */
type GetTypeArgs struct {
  thrift.TStruct
  Name string "name"; // 1
}

func NewGetTypeArgs() *GetTypeArgs {
  output := &GetTypeArgs{
    TStruct:thrift.NewTStruct("get_type_args", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetTypeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTypeArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v884, err885 := iprot.ReadString()
  if err885 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err885); }
  p.Name = v884
  return err
}

func (p *GetTypeArgs) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTypeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_type_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTypeArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *GetTypeArgs) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTypeArgs) TStructName() string {
  return "GetTypeArgs"
}

func (p *GetTypeArgs) ThriftName() string {
  return "get_type_args"
}

func (p *GetTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTypeArgs(%+v)", *p)
}

func (p *GetTypeArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTypeArgs)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetTypeArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  }
  return nil
}

func (p *GetTypeArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetTypeResult struct {
  thrift.TStruct
  Success *Type "success"; // 0
  O1 *MetaException "o1"; // 1
  O2 *NoSuchObjectException "o2"; // 2
}

func NewGetTypeResult() *GetTypeResult {
  output := &GetTypeResult{
    TStruct:thrift.NewTStruct("get_type_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetTypeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTypeResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewType()
  err888 := p.Success.Read(iprot)
  if err888 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessType", err888); }
  return err
}

func (p *GetTypeResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetTypeResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err891 := p.O1.Read(iprot)
  if err891 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err891); }
  return err
}

func (p *GetTypeResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTypeResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewNoSuchObjectException()
  err894 := p.O2.Read(iprot)
  if err894 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2NoSuchObjectException", err894); }
  return err
}

func (p *GetTypeResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetTypeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_type_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTypeResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Type", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTypeResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetTypeResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTypeResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTypeResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTypeResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetTypeResult) TStructName() string {
  return "GetTypeResult"
}

func (p *GetTypeResult) ThriftName() string {
  return "get_type_result"
}

func (p *GetTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTypeResult(%+v)", *p)
}

func (p *GetTypeResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTypeResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetTypeResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetTypeResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - TypeA1
 */
type CreateTypeArgs struct {
  thrift.TStruct
  TypeA1 *Type "type"; // 1
}

func NewCreateTypeArgs() *CreateTypeArgs {
  output := &CreateTypeArgs{
    TStruct:thrift.NewTStruct("create_type_args", []thrift.TField{
    thrift.NewTField("type", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *CreateTypeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "type" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTypeArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.TypeA1 = NewType()
  err897 := p.TypeA1.Read(iprot)
  if err897 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TypeA1Type", err897); }
  return err
}

func (p *CreateTypeArgs) ReadFieldType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CreateTypeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("create_type_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTypeArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.TypeA1 != nil {
    err = oprot.WriteFieldBegin("type", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err); }
    err = p.TypeA1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Type", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTypeArgs) WriteFieldType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CreateTypeArgs) TStructName() string {
  return "CreateTypeArgs"
}

func (p *CreateTypeArgs) ThriftName() string {
  return "create_type_args"
}

func (p *CreateTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTypeArgs(%+v)", *p)
}

func (p *CreateTypeArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateTypeArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.TypeA1.CompareTo(data.TypeA1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CreateTypeArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TypeA1
  }
  return nil
}

func (p *CreateTypeArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("type", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 *  - O3
 */
type CreateTypeResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *AlreadyExistsException "o1"; // 1
  O2 *InvalidObjectException "o2"; // 2
  O3 *MetaException "o3"; // 3
}

func NewCreateTypeResult() *CreateTypeResult {
  output := &CreateTypeResult{
    TStruct:thrift.NewTStruct("create_type_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *CreateTypeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTypeResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v898, err899 := iprot.ReadBool()
  if err899 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err899); }
  p.Success = v898
  return err
}

func (p *CreateTypeResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *CreateTypeResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewAlreadyExistsException()
  err902 := p.O1.Read(iprot)
  if err902 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1AlreadyExistsException", err902); }
  return err
}

func (p *CreateTypeResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CreateTypeResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewInvalidObjectException()
  err905 := p.O2.Read(iprot)
  if err905 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2InvalidObjectException", err905); }
  return err
}

func (p *CreateTypeResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CreateTypeResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewMetaException()
  err908 := p.O3.Read(iprot)
  if err908 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3MetaException", err908); }
  return err
}

func (p *CreateTypeResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CreateTypeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("create_type_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTypeResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *CreateTypeResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *CreateTypeResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("AlreadyExistsException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTypeResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CreateTypeResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTypeResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CreateTypeResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTypeResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CreateTypeResult) TStructName() string {
  return "CreateTypeResult"
}

func (p *CreateTypeResult) ThriftName() string {
  return "create_type_result"
}

func (p *CreateTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTypeResult(%+v)", *p)
}

func (p *CreateTypeResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateTypeResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CreateTypeResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  case 3: return p.O3
  }
  return nil
}

func (p *CreateTypeResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - TypeA1
 */
type DropTypeArgs struct {
  thrift.TStruct
  TypeA1 string "type"; // 1
}

func NewDropTypeArgs() *DropTypeArgs {
  output := &DropTypeArgs{
    TStruct:thrift.NewTStruct("drop_type_args", []thrift.TField{
    thrift.NewTField("type", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *DropTypeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "type" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropTypeArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v909, err910 := iprot.ReadString()
  if err910 != nil { return thrift.NewTProtocolExceptionReadField(1, "type", p.ThriftName(), err910); }
  p.TypeA1 = v909
  return err
}

func (p *DropTypeArgs) ReadFieldType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropTypeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_type_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropTypeArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TypeA1) < 1 { return nil}
  err = oprot.WriteFieldBegin("type", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TypeA1))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err); }
  return err
}

func (p *DropTypeArgs) WriteFieldType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropTypeArgs) TStructName() string {
  return "DropTypeArgs"
}

func (p *DropTypeArgs) ThriftName() string {
  return "drop_type_args"
}

func (p *DropTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropTypeArgs(%+v)", *p)
}

func (p *DropTypeArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropTypeArgs)
  if !ok {
    return 0, false
  }
  if p.TypeA1 != data.TypeA1 {
    if p.TypeA1 < data.TypeA1 {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DropTypeArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TypeA1
  }
  return nil
}

func (p *DropTypeArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("type", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type DropTypeResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *MetaException "o1"; // 1
  O2 *NoSuchObjectException "o2"; // 2
}

func NewDropTypeResult() *DropTypeResult {
  output := &DropTypeResult{
    TStruct:thrift.NewTStruct("drop_type_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *DropTypeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropTypeResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v911, err912 := iprot.ReadBool()
  if err912 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err912); }
  p.Success = v911
  return err
}

func (p *DropTypeResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *DropTypeResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err915 := p.O1.Read(iprot)
  if err915 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err915); }
  return err
}

func (p *DropTypeResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropTypeResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewNoSuchObjectException()
  err918 := p.O2.Read(iprot)
  if err918 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2NoSuchObjectException", err918); }
  return err
}

func (p *DropTypeResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropTypeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_type_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropTypeResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *DropTypeResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *DropTypeResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *DropTypeResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropTypeResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *DropTypeResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropTypeResult) TStructName() string {
  return "DropTypeResult"
}

func (p *DropTypeResult) ThriftName() string {
  return "drop_type_result"
}

func (p *DropTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropTypeResult(%+v)", *p)
}

func (p *DropTypeResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropTypeResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DropTypeResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *DropTypeResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Name
 */
type GetTypeAllArgs struct {
  thrift.TStruct
  Name string "name"; // 1
}

func NewGetTypeAllArgs() *GetTypeAllArgs {
  output := &GetTypeAllArgs{
    TStruct:thrift.NewTStruct("get_type_all_args", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetTypeAllArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTypeAllArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v919, err920 := iprot.ReadString()
  if err920 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err920); }
  p.Name = v919
  return err
}

func (p *GetTypeAllArgs) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTypeAllArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_type_all_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTypeAllArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *GetTypeAllArgs) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTypeAllArgs) TStructName() string {
  return "GetTypeAllArgs"
}

func (p *GetTypeAllArgs) ThriftName() string {
  return "get_type_all_args"
}

func (p *GetTypeAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTypeAllArgs(%+v)", *p)
}

func (p *GetTypeAllArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTypeAllArgs)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetTypeAllArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  }
  return nil
}

func (p *GetTypeAllArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O2
 */
type GetTypeAllResult struct {
  thrift.TStruct
  Success thrift.TMap "success"; // 0
  O2 *MetaException "o2"; // 1
}

func NewGetTypeAllResult() *GetTypeAllResult {
  output := &GetTypeAllResult{
    TStruct:thrift.NewTStruct("get_type_all_result", []thrift.TField{
    thrift.NewTField("success", thrift.MAP, 0),
    thrift.NewTField("o2", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetTypeAllResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTypeAllResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype924, _vtype925, _size923, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTMap(_ktype924, _vtype925, _size923)
  for _i927:= 0; _i927 < _size923; _i927++ {
    v930, err931 := iprot.ReadString()
    if err931 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key928", "", err931); }
    _key928 := v930
    _val929 := NewType()
    err934 := _val929.Read(iprot)
    if err934 != nil { return thrift.NewTProtocolExceptionReadStruct("_val929Type", err934); }
    p.Success.Set(_key928, _val929)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *GetTypeAllResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetTypeAllResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err937 := p.O2.Read(iprot)
  if err937 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err937); }
  return err
}

func (p *GetTypeAllResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTypeAllResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_type_all_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTypeAllResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter938 := range p.Success.Iter() {
      Kiter939, Viter940 := Miter938.Key().(string), Miter938.Value().(*Type)
      err = oprot.WriteString(string(Kiter939))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter939", "", err); }
      err = Viter940.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Type", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTypeAllResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetTypeAllResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTypeAllResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTypeAllResult) TStructName() string {
  return "GetTypeAllResult"
}

func (p *GetTypeAllResult) ThriftName() string {
  return "get_type_all_result"
}

func (p *GetTypeAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTypeAllResult(%+v)", *p)
}

func (p *GetTypeAllResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTypeAllResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetTypeAllResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O2
  }
  return nil
}

func (p *GetTypeAllResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.MAP, 0),
    thrift.NewTField("o2", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TableName
 */
type GetFieldsArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TableName string "table_name"; // 2
}

func NewGetFieldsArgs() *GetFieldsArgs {
  output := &GetFieldsArgs{
    TStruct:thrift.NewTStruct("get_fields_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("table_name", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetFieldsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "table_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetFieldsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v941, err942 := iprot.ReadString()
  if err942 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err942); }
  p.DbName = v941
  return err
}

func (p *GetFieldsArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetFieldsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v943, err944 := iprot.ReadString()
  if err944 != nil { return thrift.NewTProtocolExceptionReadField(2, "table_name", p.ThriftName(), err944); }
  p.TableName = v943
  return err
}

func (p *GetFieldsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetFieldsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_fields_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetFieldsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetFieldsArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetFieldsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "table_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "table_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "table_name", p.ThriftName(), err); }
  return err
}

func (p *GetFieldsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetFieldsArgs) TStructName() string {
  return "GetFieldsArgs"
}

func (p *GetFieldsArgs) ThriftName() string {
  return "get_fields_args"
}

func (p *GetFieldsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFieldsArgs(%+v)", *p)
}

func (p *GetFieldsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetFieldsArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetFieldsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TableName
  }
  return nil
}

func (p *GetFieldsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("table_name", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 *  - O3
 */
type GetFieldsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
  O2 *UnknownTableException "o2"; // 2
  O3 *UnknownDBException "o3"; // 3
}

func NewGetFieldsResult() *GetFieldsResult {
  output := &GetFieldsResult{
    TStruct:thrift.NewTStruct("get_fields_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetFieldsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetFieldsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype950, _size947, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype950, _size947)
  for _i951:= 0; _i951 < _size947; _i951++ {
    _elem952 := NewFieldSchema()
    err955 := _elem952.Read(iprot)
    if err955 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem952FieldSchema", err955); }
    p.Success.Push(_elem952)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetFieldsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetFieldsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err958 := p.O1.Read(iprot)
  if err958 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err958); }
  return err
}

func (p *GetFieldsResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetFieldsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewUnknownTableException()
  err961 := p.O2.Read(iprot)
  if err961 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2UnknownTableException", err961); }
  return err
}

func (p *GetFieldsResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetFieldsResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewUnknownDBException()
  err964 := p.O3.Read(iprot)
  if err964 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3UnknownDBException", err964); }
  return err
}

func (p *GetFieldsResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetFieldsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_fields_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetFieldsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter965 := range p.Success.Iter() {
      Iter966 := Iter965.(*FieldSchema)
      err = Iter966.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("FieldSchema", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetFieldsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetFieldsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetFieldsResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetFieldsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("UnknownTableException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetFieldsResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetFieldsResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("UnknownDBException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *GetFieldsResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetFieldsResult) TStructName() string {
  return "GetFieldsResult"
}

func (p *GetFieldsResult) ThriftName() string {
  return "get_fields_result"
}

func (p *GetFieldsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFieldsResult(%+v)", *p)
}

func (p *GetFieldsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetFieldsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetFieldsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  case 3: return p.O3
  }
  return nil
}

func (p *GetFieldsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TableName
 */
type GetSchemaArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TableName string "table_name"; // 2
}

func NewGetSchemaArgs() *GetSchemaArgs {
  output := &GetSchemaArgs{
    TStruct:thrift.NewTStruct("get_schema_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("table_name", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetSchemaArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "table_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSchemaArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v967, err968 := iprot.ReadString()
  if err968 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err968); }
  p.DbName = v967
  return err
}

func (p *GetSchemaArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSchemaArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v969, err970 := iprot.ReadString()
  if err970 != nil { return thrift.NewTProtocolExceptionReadField(2, "table_name", p.ThriftName(), err970); }
  p.TableName = v969
  return err
}

func (p *GetSchemaArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetSchemaArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_schema_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSchemaArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetSchemaArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSchemaArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "table_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "table_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "table_name", p.ThriftName(), err); }
  return err
}

func (p *GetSchemaArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetSchemaArgs) TStructName() string {
  return "GetSchemaArgs"
}

func (p *GetSchemaArgs) ThriftName() string {
  return "get_schema_args"
}

func (p *GetSchemaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSchemaArgs(%+v)", *p)
}

func (p *GetSchemaArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSchemaArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSchemaArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TableName
  }
  return nil
}

func (p *GetSchemaArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("table_name", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 *  - O3
 */
type GetSchemaResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
  O2 *UnknownTableException "o2"; // 2
  O3 *UnknownDBException "o3"; // 3
}

func NewGetSchemaResult() *GetSchemaResult {
  output := &GetSchemaResult{
    TStruct:thrift.NewTStruct("get_schema_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetSchemaResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSchemaResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype976, _size973, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype976, _size973)
  for _i977:= 0; _i977 < _size973; _i977++ {
    _elem978 := NewFieldSchema()
    err981 := _elem978.Read(iprot)
    if err981 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem978FieldSchema", err981); }
    p.Success.Push(_elem978)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetSchemaResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSchemaResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err984 := p.O1.Read(iprot)
  if err984 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err984); }
  return err
}

func (p *GetSchemaResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSchemaResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewUnknownTableException()
  err987 := p.O2.Read(iprot)
  if err987 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2UnknownTableException", err987); }
  return err
}

func (p *GetSchemaResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetSchemaResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewUnknownDBException()
  err990 := p.O3.Read(iprot)
  if err990 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3UnknownDBException", err990); }
  return err
}

func (p *GetSchemaResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetSchemaResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_schema_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSchemaResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter991 := range p.Success.Iter() {
      Iter992 := Iter991.(*FieldSchema)
      err = Iter992.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("FieldSchema", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSchemaResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSchemaResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSchemaResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSchemaResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("UnknownTableException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSchemaResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetSchemaResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("UnknownDBException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSchemaResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetSchemaResult) TStructName() string {
  return "GetSchemaResult"
}

func (p *GetSchemaResult) ThriftName() string {
  return "get_schema_result"
}

func (p *GetSchemaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSchemaResult(%+v)", *p)
}

func (p *GetSchemaResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSchemaResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetSchemaResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  case 3: return p.O3
  }
  return nil
}

func (p *GetSchemaResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Tbl
 */
type CreateTableArgs struct {
  thrift.TStruct
  Tbl *Table "tbl"; // 1
}

func NewCreateTableArgs() *CreateTableArgs {
  output := &CreateTableArgs{
    TStruct:thrift.NewTStruct("create_table_args", []thrift.TField{
    thrift.NewTField("tbl", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *CreateTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tbl" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Tbl = NewTable()
  err995 := p.Tbl.Read(iprot)
  if err995 != nil { return thrift.NewTProtocolExceptionReadStruct("p.TblTable", err995); }
  return err
}

func (p *CreateTableArgs) ReadFieldTbl(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CreateTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("create_table_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tbl != nil {
    err = oprot.WriteFieldBegin("tbl", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tbl", p.ThriftName(), err); }
    err = p.Tbl.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Table", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tbl", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTableArgs) WriteFieldTbl(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CreateTableArgs) TStructName() string {
  return "CreateTableArgs"
}

func (p *CreateTableArgs) ThriftName() string {
  return "create_table_args"
}

func (p *CreateTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTableArgs(%+v)", *p)
}

func (p *CreateTableArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateTableArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Tbl.CompareTo(data.Tbl); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CreateTableArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Tbl
  }
  return nil
}

func (p *CreateTableArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tbl", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - O1
 *  - O2
 *  - O3
 *  - O4
 */
type CreateTableResult struct {
  thrift.TStruct
  O1 *AlreadyExistsException "o1"; // 1
  O2 *InvalidObjectException "o2"; // 2
  O3 *MetaException "o3"; // 3
  O4 *NoSuchObjectException "o4"; // 4
}

func NewCreateTableResult() *CreateTableResult {
  output := &CreateTableResult{
    TStruct:thrift.NewTStruct("create_table_result", []thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    thrift.NewTField("o4", thrift.STRUCT, 4),
    }),
  }
  {
  }
  return output
}

func (p *CreateTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "o4" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewAlreadyExistsException()
  err998 := p.O1.Read(iprot)
  if err998 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1AlreadyExistsException", err998); }
  return err
}

func (p *CreateTableResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CreateTableResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewInvalidObjectException()
  err1001 := p.O2.Read(iprot)
  if err1001 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2InvalidObjectException", err1001); }
  return err
}

func (p *CreateTableResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CreateTableResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewMetaException()
  err1004 := p.O3.Read(iprot)
  if err1004 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3MetaException", err1004); }
  return err
}

func (p *CreateTableResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CreateTableResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O4 = NewNoSuchObjectException()
  err1007 := p.O4.Read(iprot)
  if err1007 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O4NoSuchObjectException", err1007); }
  return err
}

func (p *CreateTableResult) ReadFieldO4(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *CreateTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("create_table_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O4 != nil:
    if err = p.WriteField4(oprot); err != nil {
      return err
    }
  case p.O3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("AlreadyExistsException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTableResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CreateTableResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTableResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CreateTableResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTableResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CreateTableResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O4 != nil {
    err = oprot.WriteFieldBegin("o4", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "o4", p.ThriftName(), err); }
    err = p.O4.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "o4", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTableResult) WriteFieldO4(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *CreateTableResult) TStructName() string {
  return "CreateTableResult"
}

func (p *CreateTableResult) ThriftName() string {
  return "create_table_result"
}

func (p *CreateTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTableResult(%+v)", *p)
}

func (p *CreateTableResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateTableResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O4.CompareTo(data.O4); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CreateTableResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.O1
  case 2: return p.O2
  case 3: return p.O3
  case 4: return p.O4
  }
  return nil
}

func (p *CreateTableResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    thrift.NewTField("o4", thrift.STRUCT, 4),
    })
}

/**
 * Attributes:
 *  - Dbname
 *  - Name
 *  - DeleteData
 */
type DropTableArgs struct {
  thrift.TStruct
  Dbname string "dbname"; // 1
  Name string "name"; // 2
  DeleteData bool "deleteData"; // 3
}

func NewDropTableArgs() *DropTableArgs {
  output := &DropTableArgs{
    TStruct:thrift.NewTStruct("drop_table_args", []thrift.TField{
    thrift.NewTField("dbname", thrift.STRING, 1),
    thrift.NewTField("name", thrift.STRING, 2),
    thrift.NewTField("deleteData", thrift.BOOL, 3),
    }),
  }
  {
  }
  return output
}

func (p *DropTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "dbname" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "deleteData" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1008, err1009 := iprot.ReadString()
  if err1009 != nil { return thrift.NewTProtocolExceptionReadField(1, "dbname", p.ThriftName(), err1009); }
  p.Dbname = v1008
  return err
}

func (p *DropTableArgs) ReadFieldDbname(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropTableArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1010, err1011 := iprot.ReadString()
  if err1011 != nil { return thrift.NewTProtocolExceptionReadField(2, "name", p.ThriftName(), err1011); }
  p.Name = v1010
  return err
}

func (p *DropTableArgs) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropTableArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1012, err1013 := iprot.ReadBool()
  if err1013 != nil { return thrift.NewTProtocolExceptionReadField(3, "deleteData", p.ThriftName(), err1013); }
  p.DeleteData = v1012
  return err
}

func (p *DropTableArgs) ReadFieldDeleteData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DropTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_table_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Dbname) < 1 { return nil}
  err = oprot.WriteFieldBegin("dbname", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Dbname))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  return err
}

func (p *DropTableArgs) WriteFieldDbname(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropTableArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "name", p.ThriftName(), err); }
  return err
}

func (p *DropTableArgs) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropTableArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("deleteData", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "deleteData", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.DeleteData))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "deleteData", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "deleteData", p.ThriftName(), err); }
  return err
}

func (p *DropTableArgs) WriteFieldDeleteData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DropTableArgs) TStructName() string {
  return "DropTableArgs"
}

func (p *DropTableArgs) ThriftName() string {
  return "drop_table_args"
}

func (p *DropTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropTableArgs(%+v)", *p)
}

func (p *DropTableArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropTableArgs)
  if !ok {
    return 0, false
  }
  if p.Dbname != data.Dbname {
    if p.Dbname < data.Dbname {
      return -1, true
    }
    return 1, true
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.DeleteData, data.DeleteData); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *DropTableArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Dbname
  case 2: return p.Name
  case 3: return p.DeleteData
  }
  return nil
}

func (p *DropTableArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("dbname", thrift.STRING, 1),
    thrift.NewTField("name", thrift.STRING, 2),
    thrift.NewTField("deleteData", thrift.BOOL, 3),
    })
}

/**
 * Attributes:
 *  - O1
 *  - O3
 */
type DropTableResult struct {
  thrift.TStruct
  O1 *NoSuchObjectException "o1"; // 1
  O3 *MetaException "o3"; // 2
}

func NewDropTableResult() *DropTableResult {
  output := &DropTableResult{
    TStruct:thrift.NewTStruct("drop_table_result", []thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o3", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *DropTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewNoSuchObjectException()
  err1016 := p.O1.Read(iprot)
  if err1016 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1NoSuchObjectException", err1016); }
  return err
}

func (p *DropTableResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropTableResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewMetaException()
  err1019 := p.O3.Read(iprot)
  if err1019 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3MetaException", err1019); }
  return err
}

func (p *DropTableResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_table_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O3 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *DropTableResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropTableResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *DropTableResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropTableResult) TStructName() string {
  return "DropTableResult"
}

func (p *DropTableResult) ThriftName() string {
  return "drop_table_result"
}

func (p *DropTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropTableResult(%+v)", *p)
}

func (p *DropTableResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropTableResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DropTableResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.O1
  case 2: return p.O3
  }
  return nil
}

func (p *DropTableResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o3", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - Pattern
 */
type GetTablesArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  Pattern string "pattern"; // 2
}

func NewGetTablesArgs() *GetTablesArgs {
  output := &GetTablesArgs{
    TStruct:thrift.NewTStruct("get_tables_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("pattern", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetTablesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "pattern" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTablesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1020, err1021 := iprot.ReadString()
  if err1021 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1021); }
  p.DbName = v1020
  return err
}

func (p *GetTablesArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTablesArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1022, err1023 := iprot.ReadString()
  if err1023 != nil { return thrift.NewTProtocolExceptionReadField(2, "pattern", p.ThriftName(), err1023); }
  p.Pattern = v1022
  return err
}

func (p *GetTablesArgs) ReadFieldPattern(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetTablesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_tables_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTablesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetTablesArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTablesArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Pattern) < 1 { return nil}
  err = oprot.WriteFieldBegin("pattern", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "pattern", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Pattern))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "pattern", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "pattern", p.ThriftName(), err); }
  return err
}

func (p *GetTablesArgs) WriteFieldPattern(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetTablesArgs) TStructName() string {
  return "GetTablesArgs"
}

func (p *GetTablesArgs) ThriftName() string {
  return "get_tables_args"
}

func (p *GetTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTablesArgs(%+v)", *p)
}

func (p *GetTablesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTablesArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.Pattern != data.Pattern {
    if p.Pattern < data.Pattern {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetTablesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.Pattern
  }
  return nil
}

func (p *GetTablesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("pattern", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetTablesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGetTablesResult() *GetTablesResult {
  output := &GetTablesResult{
    TStruct:thrift.NewTStruct("get_tables_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetTablesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTablesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1029, _size1026, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1029, _size1026)
  for _i1030:= 0; _i1030 < _size1026; _i1030++ {
    v1032, err1033 := iprot.ReadString()
    if err1033 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1031", "", err1033); }
    _elem1031 := v1032
    p.Success.Push(_elem1031)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetTablesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetTablesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1036 := p.O1.Read(iprot)
  if err1036 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1036); }
  return err
}

func (p *GetTablesResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTablesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_tables_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTablesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1037 := range p.Success.Iter() {
      Iter1038 := Iter1037.(string)
      err = oprot.WriteString(string(Iter1038))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1038", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTablesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetTablesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTablesResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTablesResult) TStructName() string {
  return "GetTablesResult"
}

func (p *GetTablesResult) ThriftName() string {
  return "get_tables_result"
}

func (p *GetTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTablesResult(%+v)", *p)
}

func (p *GetTablesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTablesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetTablesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetTablesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - DbName
 */
type GetAllTablesArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
}

func NewGetAllTablesArgs() *GetAllTablesArgs {
  output := &GetAllTablesArgs{
    TStruct:thrift.NewTStruct("get_all_tables_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetAllTablesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllTablesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1039, err1040 := iprot.ReadString()
  if err1040 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1040); }
  p.DbName = v1039
  return err
}

func (p *GetAllTablesArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAllTablesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_all_tables_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllTablesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetAllTablesArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAllTablesArgs) TStructName() string {
  return "GetAllTablesArgs"
}

func (p *GetAllTablesArgs) ThriftName() string {
  return "get_all_tables_args"
}

func (p *GetAllTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllTablesArgs(%+v)", *p)
}

func (p *GetAllTablesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAllTablesArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetAllTablesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  }
  return nil
}

func (p *GetAllTablesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetAllTablesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGetAllTablesResult() *GetAllTablesResult {
  output := &GetAllTablesResult{
    TStruct:thrift.NewTStruct("get_all_tables_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetAllTablesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllTablesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1046, _size1043, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1046, _size1043)
  for _i1047:= 0; _i1047 < _size1043; _i1047++ {
    v1049, err1050 := iprot.ReadString()
    if err1050 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1048", "", err1050); }
    _elem1048 := v1049
    p.Success.Push(_elem1048)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetAllTablesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetAllTablesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1053 := p.O1.Read(iprot)
  if err1053 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1053); }
  return err
}

func (p *GetAllTablesResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetAllTablesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_all_tables_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetAllTablesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1054 := range p.Success.Iter() {
      Iter1055 := Iter1054.(string)
      err = oprot.WriteString(string(Iter1055))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1055", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAllTablesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetAllTablesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetAllTablesResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetAllTablesResult) TStructName() string {
  return "GetAllTablesResult"
}

func (p *GetAllTablesResult) ThriftName() string {
  return "get_all_tables_result"
}

func (p *GetAllTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllTablesResult(%+v)", *p)
}

func (p *GetAllTablesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetAllTablesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetAllTablesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetAllTablesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Dbname
 *  - TblName
 */
type GetTableArgs struct {
  thrift.TStruct
  Dbname string "dbname"; // 1
  TblName string "tbl_name"; // 2
}

func NewGetTableArgs() *GetTableArgs {
  output := &GetTableArgs{
    TStruct:thrift.NewTStruct("get_table_args", []thrift.TField{
    thrift.NewTField("dbname", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "dbname" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1056, err1057 := iprot.ReadString()
  if err1057 != nil { return thrift.NewTProtocolExceptionReadField(1, "dbname", p.ThriftName(), err1057); }
  p.Dbname = v1056
  return err
}

func (p *GetTableArgs) ReadFieldDbname(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTableArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1058, err1059 := iprot.ReadString()
  if err1059 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1059); }
  p.TblName = v1058
  return err
}

func (p *GetTableArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_table_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Dbname) < 1 { return nil}
  err = oprot.WriteFieldBegin("dbname", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Dbname))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  return err
}

func (p *GetTableArgs) WriteFieldDbname(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTableArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetTableArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetTableArgs) TStructName() string {
  return "GetTableArgs"
}

func (p *GetTableArgs) ThriftName() string {
  return "get_table_args"
}

func (p *GetTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTableArgs(%+v)", *p)
}

func (p *GetTableArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTableArgs)
  if !ok {
    return 0, false
  }
  if p.Dbname != data.Dbname {
    if p.Dbname < data.Dbname {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetTableArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Dbname
  case 2: return p.TblName
  }
  return nil
}

func (p *GetTableArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("dbname", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetTableResult struct {
  thrift.TStruct
  Success *Table "success"; // 0
  O1 *MetaException "o1"; // 1
  O2 *NoSuchObjectException "o2"; // 2
}

func NewGetTableResult() *GetTableResult {
  output := &GetTableResult{
    TStruct:thrift.NewTStruct("get_table_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewTable()
  err1062 := p.Success.Read(iprot)
  if err1062 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessTable", err1062); }
  return err
}

func (p *GetTableResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1065 := p.O1.Read(iprot)
  if err1065 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1065); }
  return err
}

func (p *GetTableResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTableResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewNoSuchObjectException()
  err1068 := p.O2.Read(iprot)
  if err1068 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2NoSuchObjectException", err1068); }
  return err
}

func (p *GetTableResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_table_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Table", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTableResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTableResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTableResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTableResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetTableResult) TStructName() string {
  return "GetTableResult"
}

func (p *GetTableResult) ThriftName() string {
  return "get_table_result"
}

func (p *GetTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTableResult(%+v)", *p)
}

func (p *GetTableResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTableResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetTableResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetTableResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Dbname
 *  - TblName
 *  - NewTbl
 */
type AlterTableArgs struct {
  thrift.TStruct
  Dbname string "dbname"; // 1
  TblName string "tbl_name"; // 2
  NewTbl *Table "new_tbl"; // 3
}

func NewAlterTableArgs() *AlterTableArgs {
  output := &AlterTableArgs{
    TStruct:thrift.NewTStruct("alter_table_args", []thrift.TField{
    thrift.NewTField("dbname", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("new_tbl", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *AlterTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "dbname" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "new_tbl" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1069, err1070 := iprot.ReadString()
  if err1070 != nil { return thrift.NewTProtocolExceptionReadField(1, "dbname", p.ThriftName(), err1070); }
  p.Dbname = v1069
  return err
}

func (p *AlterTableArgs) ReadFieldDbname(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AlterTableArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1071, err1072 := iprot.ReadString()
  if err1072 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1072); }
  p.TblName = v1071
  return err
}

func (p *AlterTableArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AlterTableArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.NewTbl = NewTable()
  err1075 := p.NewTbl.Read(iprot)
  if err1075 != nil { return thrift.NewTProtocolExceptionReadStruct("p.NewTblTable", err1075); }
  return err
}

func (p *AlterTableArgs) ReadFieldNewTbl(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AlterTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("alter_table_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Dbname) < 1 { return nil}
  err = oprot.WriteFieldBegin("dbname", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Dbname))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  return err
}

func (p *AlterTableArgs) WriteFieldDbname(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AlterTableArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *AlterTableArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AlterTableArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.NewTbl != nil {
    err = oprot.WriteFieldBegin("new_tbl", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "new_tbl", p.ThriftName(), err); }
    err = p.NewTbl.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Table", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "new_tbl", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterTableArgs) WriteFieldNewTbl(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AlterTableArgs) TStructName() string {
  return "AlterTableArgs"
}

func (p *AlterTableArgs) ThriftName() string {
  return "alter_table_args"
}

func (p *AlterTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterTableArgs(%+v)", *p)
}

func (p *AlterTableArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AlterTableArgs)
  if !ok {
    return 0, false
  }
  if p.Dbname != data.Dbname {
    if p.Dbname < data.Dbname {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.NewTbl.CompareTo(data.NewTbl); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AlterTableArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Dbname
  case 2: return p.TblName
  case 3: return p.NewTbl
  }
  return nil
}

func (p *AlterTableArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("dbname", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("new_tbl", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - O1
 *  - O2
 */
type AlterTableResult struct {
  thrift.TStruct
  O1 *InvalidOperationException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewAlterTableResult() *AlterTableResult {
  output := &AlterTableResult{
    TStruct:thrift.NewTStruct("alter_table_result", []thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *AlterTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewInvalidOperationException()
  err1078 := p.O1.Read(iprot)
  if err1078 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1InvalidOperationException", err1078); }
  return err
}

func (p *AlterTableResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AlterTableResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1081 := p.O2.Read(iprot)
  if err1081 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1081); }
  return err
}

func (p *AlterTableResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AlterTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("alter_table_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidOperationException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterTableResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AlterTableResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterTableResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AlterTableResult) TStructName() string {
  return "AlterTableResult"
}

func (p *AlterTableResult) ThriftName() string {
  return "alter_table_result"
}

func (p *AlterTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterTableResult(%+v)", *p)
}

func (p *AlterTableResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AlterTableResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AlterTableResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *AlterTableResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - NewPart
 */
type AddPartitionArgs struct {
  thrift.TStruct
  NewPart *Partition "new_part"; // 1
}

func NewAddPartitionArgs() *AddPartitionArgs {
  output := &AddPartitionArgs{
    TStruct:thrift.NewTStruct("add_partition_args", []thrift.TField{
    thrift.NewTField("new_part", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *AddPartitionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "new_part" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddPartitionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.NewPart = NewPartition()
  err1084 := p.NewPart.Read(iprot)
  if err1084 != nil { return thrift.NewTProtocolExceptionReadStruct("p.NewPartPartition", err1084); }
  return err
}

func (p *AddPartitionArgs) ReadFieldNewPart(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddPartitionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("add_partition_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddPartitionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.NewPart != nil {
    err = oprot.WriteFieldBegin("new_part", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "new_part", p.ThriftName(), err); }
    err = p.NewPart.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "new_part", p.ThriftName(), err); }
  }
  return err
}

func (p *AddPartitionArgs) WriteFieldNewPart(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddPartitionArgs) TStructName() string {
  return "AddPartitionArgs"
}

func (p *AddPartitionArgs) ThriftName() string {
  return "add_partition_args"
}

func (p *AddPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddPartitionArgs(%+v)", *p)
}

func (p *AddPartitionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddPartitionArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.NewPart.CompareTo(data.NewPart); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AddPartitionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.NewPart
  }
  return nil
}

func (p *AddPartitionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("new_part", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 *  - O3
 */
type AddPartitionResult struct {
  thrift.TStruct
  Success *Partition "success"; // 0
  O1 *InvalidObjectException "o1"; // 1
  O2 *AlreadyExistsException "o2"; // 2
  O3 *MetaException "o3"; // 3
}

func NewAddPartitionResult() *AddPartitionResult {
  output := &AddPartitionResult{
    TStruct:thrift.NewTStruct("add_partition_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddPartitionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddPartitionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewPartition()
  err1087 := p.Success.Read(iprot)
  if err1087 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessPartition", err1087); }
  return err
}

func (p *AddPartitionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddPartitionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewInvalidObjectException()
  err1090 := p.O1.Read(iprot)
  if err1090 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1InvalidObjectException", err1090); }
  return err
}

func (p *AddPartitionResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddPartitionResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewAlreadyExistsException()
  err1093 := p.O2.Read(iprot)
  if err1093 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2AlreadyExistsException", err1093); }
  return err
}

func (p *AddPartitionResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddPartitionResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewMetaException()
  err1096 := p.O3.Read(iprot)
  if err1096 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3MetaException", err1096); }
  return err
}

func (p *AddPartitionResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddPartitionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("add_partition_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddPartitionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *AddPartitionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddPartitionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *AddPartitionResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddPartitionResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("AlreadyExistsException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *AddPartitionResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddPartitionResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *AddPartitionResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddPartitionResult) TStructName() string {
  return "AddPartitionResult"
}

func (p *AddPartitionResult) ThriftName() string {
  return "add_partition_result"
}

func (p *AddPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddPartitionResult(%+v)", *p)
}

func (p *AddPartitionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddPartitionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AddPartitionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  case 3: return p.O3
  }
  return nil
}

func (p *AddPartitionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - PartVals
 */
type AppendPartitionArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  PartVals thrift.TList "part_vals"; // 3
}

func NewAppendPartitionArgs() *AppendPartitionArgs {
  output := &AppendPartitionArgs{
    TStruct:thrift.NewTStruct("append_partition_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    }),
  }
  {
  }
  return output
}

func (p *AppendPartitionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "part_vals" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1097, err1098 := iprot.ReadString()
  if err1098 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1098); }
  p.DbName = v1097
  return err
}

func (p *AppendPartitionArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AppendPartitionArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1099, err1100 := iprot.ReadString()
  if err1100 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1100); }
  p.TblName = v1099
  return err
}

func (p *AppendPartitionArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AppendPartitionArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1106, _size1103, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PartVals", "", err)
  }
  p.PartVals = thrift.NewTList(_etype1106, _size1103)
  for _i1107:= 0; _i1107 < _size1103; _i1107++ {
    v1109, err1110 := iprot.ReadString()
    if err1110 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1108", "", err1110); }
    _elem1108 := v1109
    p.PartVals.Push(_elem1108)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *AppendPartitionArgs) ReadFieldPartVals(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AppendPartitionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("append_partition_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AppendPartitionArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AppendPartitionArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PartVals != nil {
    err = oprot.WriteFieldBegin("part_vals", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.PartVals.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1111 := range p.PartVals.Iter() {
      Iter1112 := Iter1111.(string)
      err = oprot.WriteString(string(Iter1112))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1112", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendPartitionArgs) WriteFieldPartVals(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AppendPartitionArgs) TStructName() string {
  return "AppendPartitionArgs"
}

func (p *AppendPartitionArgs) ThriftName() string {
  return "append_partition_args"
}

func (p *AppendPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendPartitionArgs(%+v)", *p)
}

func (p *AppendPartitionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AppendPartitionArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.PartVals.CompareTo(data.PartVals); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AppendPartitionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.PartVals
  }
  return nil
}

func (p *AppendPartitionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 *  - O3
 */
type AppendPartitionResult struct {
  thrift.TStruct
  Success *Partition "success"; // 0
  O1 *InvalidObjectException "o1"; // 1
  O2 *AlreadyExistsException "o2"; // 2
  O3 *MetaException "o3"; // 3
}

func NewAppendPartitionResult() *AppendPartitionResult {
  output := &AppendPartitionResult{
    TStruct:thrift.NewTStruct("append_partition_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *AppendPartitionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewPartition()
  err1115 := p.Success.Read(iprot)
  if err1115 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessPartition", err1115); }
  return err
}

func (p *AppendPartitionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AppendPartitionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewInvalidObjectException()
  err1118 := p.O1.Read(iprot)
  if err1118 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1InvalidObjectException", err1118); }
  return err
}

func (p *AppendPartitionResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AppendPartitionResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewAlreadyExistsException()
  err1121 := p.O2.Read(iprot)
  if err1121 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2AlreadyExistsException", err1121); }
  return err
}

func (p *AppendPartitionResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AppendPartitionResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewMetaException()
  err1124 := p.O3.Read(iprot)
  if err1124 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3MetaException", err1124); }
  return err
}

func (p *AppendPartitionResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AppendPartitionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("append_partition_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendPartitionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AppendPartitionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendPartitionResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AppendPartitionResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("AlreadyExistsException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendPartitionResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AppendPartitionResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendPartitionResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AppendPartitionResult) TStructName() string {
  return "AppendPartitionResult"
}

func (p *AppendPartitionResult) ThriftName() string {
  return "append_partition_result"
}

func (p *AppendPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendPartitionResult(%+v)", *p)
}

func (p *AppendPartitionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AppendPartitionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AppendPartitionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  case 3: return p.O3
  }
  return nil
}

func (p *AppendPartitionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - PartName
 */
type AppendPartitionByNameArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  PartName string "part_name"; // 3
}

func NewAppendPartitionByNameArgs() *AppendPartitionByNameArgs {
  output := &AppendPartitionByNameArgs{
    TStruct:thrift.NewTStruct("append_partition_by_name_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_name", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *AppendPartitionByNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "part_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionByNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1125, err1126 := iprot.ReadString()
  if err1126 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1126); }
  p.DbName = v1125
  return err
}

func (p *AppendPartitionByNameArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AppendPartitionByNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1127, err1128 := iprot.ReadString()
  if err1128 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1128); }
  p.TblName = v1127
  return err
}

func (p *AppendPartitionByNameArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AppendPartitionByNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1129, err1130 := iprot.ReadString()
  if err1130 != nil { return thrift.NewTProtocolExceptionReadField(3, "part_name", p.ThriftName(), err1130); }
  p.PartName = v1129
  return err
}

func (p *AppendPartitionByNameArgs) ReadFieldPartName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AppendPartitionByNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("append_partition_by_name_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionByNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionByNameArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AppendPartitionByNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionByNameArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AppendPartitionByNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.PartName) < 1 { return nil}
  err = oprot.WriteFieldBegin("part_name", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PartName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_name", p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionByNameArgs) WriteFieldPartName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AppendPartitionByNameArgs) TStructName() string {
  return "AppendPartitionByNameArgs"
}

func (p *AppendPartitionByNameArgs) ThriftName() string {
  return "append_partition_by_name_args"
}

func (p *AppendPartitionByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendPartitionByNameArgs(%+v)", *p)
}

func (p *AppendPartitionByNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AppendPartitionByNameArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.PartName != data.PartName {
    if p.PartName < data.PartName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AppendPartitionByNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.PartName
  }
  return nil
}

func (p *AppendPartitionByNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_name", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 *  - O3
 */
type AppendPartitionByNameResult struct {
  thrift.TStruct
  Success *Partition "success"; // 0
  O1 *InvalidObjectException "o1"; // 1
  O2 *AlreadyExistsException "o2"; // 2
  O3 *MetaException "o3"; // 3
}

func NewAppendPartitionByNameResult() *AppendPartitionByNameResult {
  output := &AppendPartitionByNameResult{
    TStruct:thrift.NewTStruct("append_partition_by_name_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *AppendPartitionByNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionByNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewPartition()
  err1133 := p.Success.Read(iprot)
  if err1133 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessPartition", err1133); }
  return err
}

func (p *AppendPartitionByNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AppendPartitionByNameResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewInvalidObjectException()
  err1136 := p.O1.Read(iprot)
  if err1136 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1InvalidObjectException", err1136); }
  return err
}

func (p *AppendPartitionByNameResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AppendPartitionByNameResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewAlreadyExistsException()
  err1139 := p.O2.Read(iprot)
  if err1139 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2AlreadyExistsException", err1139); }
  return err
}

func (p *AppendPartitionByNameResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AppendPartitionByNameResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewMetaException()
  err1142 := p.O3.Read(iprot)
  if err1142 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3MetaException", err1142); }
  return err
}

func (p *AppendPartitionByNameResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AppendPartitionByNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("append_partition_by_name_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendPartitionByNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendPartitionByNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AppendPartitionByNameResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendPartitionByNameResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AppendPartitionByNameResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("AlreadyExistsException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendPartitionByNameResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AppendPartitionByNameResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendPartitionByNameResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AppendPartitionByNameResult) TStructName() string {
  return "AppendPartitionByNameResult"
}

func (p *AppendPartitionByNameResult) ThriftName() string {
  return "append_partition_by_name_result"
}

func (p *AppendPartitionByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendPartitionByNameResult(%+v)", *p)
}

func (p *AppendPartitionByNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AppendPartitionByNameResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AppendPartitionByNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  case 3: return p.O3
  }
  return nil
}

func (p *AppendPartitionByNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - PartVals
 *  - DeleteData
 */
type DropPartitionArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  PartVals thrift.TList "part_vals"; // 3
  DeleteData bool "deleteData"; // 4
}

func NewDropPartitionArgs() *DropPartitionArgs {
  output := &DropPartitionArgs{
    TStruct:thrift.NewTStruct("drop_partition_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    thrift.NewTField("deleteData", thrift.BOOL, 4),
    }),
  }
  {
  }
  return output
}

func (p *DropPartitionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "part_vals" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "deleteData" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropPartitionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1143, err1144 := iprot.ReadString()
  if err1144 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1144); }
  p.DbName = v1143
  return err
}

func (p *DropPartitionArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropPartitionArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1145, err1146 := iprot.ReadString()
  if err1146 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1146); }
  p.TblName = v1145
  return err
}

func (p *DropPartitionArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropPartitionArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1152, _size1149, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PartVals", "", err)
  }
  p.PartVals = thrift.NewTList(_etype1152, _size1149)
  for _i1153:= 0; _i1153 < _size1149; _i1153++ {
    v1155, err1156 := iprot.ReadString()
    if err1156 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1154", "", err1156); }
    _elem1154 := v1155
    p.PartVals.Push(_elem1154)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *DropPartitionArgs) ReadFieldPartVals(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DropPartitionArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1157, err1158 := iprot.ReadBool()
  if err1158 != nil { return thrift.NewTProtocolExceptionReadField(4, "deleteData", p.ThriftName(), err1158); }
  p.DeleteData = v1157
  return err
}

func (p *DropPartitionArgs) ReadFieldDeleteData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *DropPartitionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_partition_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropPartitionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *DropPartitionArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropPartitionArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *DropPartitionArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropPartitionArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PartVals != nil {
    err = oprot.WriteFieldBegin("part_vals", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.PartVals.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1159 := range p.PartVals.Iter() {
      Iter1160 := Iter1159.(string)
      err = oprot.WriteString(string(Iter1160))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1160", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
  }
  return err
}

func (p *DropPartitionArgs) WriteFieldPartVals(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DropPartitionArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteData", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.DeleteData))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteData", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteData", p.ThriftName(), err); }
  return err
}

func (p *DropPartitionArgs) WriteFieldDeleteData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *DropPartitionArgs) TStructName() string {
  return "DropPartitionArgs"
}

func (p *DropPartitionArgs) ThriftName() string {
  return "drop_partition_args"
}

func (p *DropPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropPartitionArgs(%+v)", *p)
}

func (p *DropPartitionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropPartitionArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.PartVals.CompareTo(data.PartVals); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.DeleteData, data.DeleteData); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *DropPartitionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.PartVals
  case 4: return p.DeleteData
  }
  return nil
}

func (p *DropPartitionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    thrift.NewTField("deleteData", thrift.BOOL, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type DropPartitionResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *NoSuchObjectException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewDropPartitionResult() *DropPartitionResult {
  output := &DropPartitionResult{
    TStruct:thrift.NewTStruct("drop_partition_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *DropPartitionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropPartitionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1161, err1162 := iprot.ReadBool()
  if err1162 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1162); }
  p.Success = v1161
  return err
}

func (p *DropPartitionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *DropPartitionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewNoSuchObjectException()
  err1165 := p.O1.Read(iprot)
  if err1165 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1NoSuchObjectException", err1165); }
  return err
}

func (p *DropPartitionResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropPartitionResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1168 := p.O2.Read(iprot)
  if err1168 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1168); }
  return err
}

func (p *DropPartitionResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropPartitionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_partition_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropPartitionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *DropPartitionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *DropPartitionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *DropPartitionResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropPartitionResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *DropPartitionResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropPartitionResult) TStructName() string {
  return "DropPartitionResult"
}

func (p *DropPartitionResult) ThriftName() string {
  return "drop_partition_result"
}

func (p *DropPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropPartitionResult(%+v)", *p)
}

func (p *DropPartitionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropPartitionResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DropPartitionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *DropPartitionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - PartName
 *  - DeleteData
 */
type DropPartitionByNameArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  PartName string "part_name"; // 3
  DeleteData bool "deleteData"; // 4
}

func NewDropPartitionByNameArgs() *DropPartitionByNameArgs {
  output := &DropPartitionByNameArgs{
    TStruct:thrift.NewTStruct("drop_partition_by_name_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_name", thrift.STRING, 3),
    thrift.NewTField("deleteData", thrift.BOOL, 4),
    }),
  }
  {
  }
  return output
}

func (p *DropPartitionByNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "part_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "deleteData" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropPartitionByNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1169, err1170 := iprot.ReadString()
  if err1170 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1170); }
  p.DbName = v1169
  return err
}

func (p *DropPartitionByNameArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropPartitionByNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1171, err1172 := iprot.ReadString()
  if err1172 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1172); }
  p.TblName = v1171
  return err
}

func (p *DropPartitionByNameArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropPartitionByNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1173, err1174 := iprot.ReadString()
  if err1174 != nil { return thrift.NewTProtocolExceptionReadField(3, "part_name", p.ThriftName(), err1174); }
  p.PartName = v1173
  return err
}

func (p *DropPartitionByNameArgs) ReadFieldPartName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DropPartitionByNameArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1175, err1176 := iprot.ReadBool()
  if err1176 != nil { return thrift.NewTProtocolExceptionReadField(4, "deleteData", p.ThriftName(), err1176); }
  p.DeleteData = v1175
  return err
}

func (p *DropPartitionByNameArgs) ReadFieldDeleteData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *DropPartitionByNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_partition_by_name_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropPartitionByNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *DropPartitionByNameArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropPartitionByNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *DropPartitionByNameArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropPartitionByNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.PartName) < 1 { return nil}
  err = oprot.WriteFieldBegin("part_name", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PartName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_name", p.ThriftName(), err); }
  return err
}

func (p *DropPartitionByNameArgs) WriteFieldPartName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DropPartitionByNameArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteData", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.DeleteData))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteData", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteData", p.ThriftName(), err); }
  return err
}

func (p *DropPartitionByNameArgs) WriteFieldDeleteData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *DropPartitionByNameArgs) TStructName() string {
  return "DropPartitionByNameArgs"
}

func (p *DropPartitionByNameArgs) ThriftName() string {
  return "drop_partition_by_name_args"
}

func (p *DropPartitionByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropPartitionByNameArgs(%+v)", *p)
}

func (p *DropPartitionByNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropPartitionByNameArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.PartName != data.PartName {
    if p.PartName < data.PartName {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.DeleteData, data.DeleteData); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *DropPartitionByNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.PartName
  case 4: return p.DeleteData
  }
  return nil
}

func (p *DropPartitionByNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_name", thrift.STRING, 3),
    thrift.NewTField("deleteData", thrift.BOOL, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type DropPartitionByNameResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *NoSuchObjectException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewDropPartitionByNameResult() *DropPartitionByNameResult {
  output := &DropPartitionByNameResult{
    TStruct:thrift.NewTStruct("drop_partition_by_name_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *DropPartitionByNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropPartitionByNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1177, err1178 := iprot.ReadBool()
  if err1178 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1178); }
  p.Success = v1177
  return err
}

func (p *DropPartitionByNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *DropPartitionByNameResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewNoSuchObjectException()
  err1181 := p.O1.Read(iprot)
  if err1181 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1NoSuchObjectException", err1181); }
  return err
}

func (p *DropPartitionByNameResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropPartitionByNameResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1184 := p.O2.Read(iprot)
  if err1184 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1184); }
  return err
}

func (p *DropPartitionByNameResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropPartitionByNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_partition_by_name_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropPartitionByNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *DropPartitionByNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *DropPartitionByNameResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *DropPartitionByNameResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropPartitionByNameResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *DropPartitionByNameResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropPartitionByNameResult) TStructName() string {
  return "DropPartitionByNameResult"
}

func (p *DropPartitionByNameResult) ThriftName() string {
  return "drop_partition_by_name_result"
}

func (p *DropPartitionByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropPartitionByNameResult(%+v)", *p)
}

func (p *DropPartitionByNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropPartitionByNameResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DropPartitionByNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *DropPartitionByNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - PartVals
 */
type GetPartitionArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  PartVals thrift.TList "part_vals"; // 3
}

func NewGetPartitionArgs() *GetPartitionArgs {
  output := &GetPartitionArgs{
    TStruct:thrift.NewTStruct("get_partition_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "part_vals" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1185, err1186 := iprot.ReadString()
  if err1186 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1186); }
  p.DbName = v1185
  return err
}

func (p *GetPartitionArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1187, err1188 := iprot.ReadString()
  if err1188 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1188); }
  p.TblName = v1187
  return err
}

func (p *GetPartitionArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1194, _size1191, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PartVals", "", err)
  }
  p.PartVals = thrift.NewTList(_etype1194, _size1191)
  for _i1195:= 0; _i1195 < _size1191; _i1195++ {
    v1197, err1198 := iprot.ReadString()
    if err1198 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1196", "", err1198); }
    _elem1196 := v1197
    p.PartVals.Push(_elem1196)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionArgs) ReadFieldPartVals(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPartitionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partition_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PartVals != nil {
    err = oprot.WriteFieldBegin("part_vals", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.PartVals.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1199 := range p.PartVals.Iter() {
      Iter1200 := Iter1199.(string)
      err = oprot.WriteString(string(Iter1200))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1200", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionArgs) WriteFieldPartVals(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPartitionArgs) TStructName() string {
  return "GetPartitionArgs"
}

func (p *GetPartitionArgs) ThriftName() string {
  return "get_partition_args"
}

func (p *GetPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionArgs(%+v)", *p)
}

func (p *GetPartitionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.PartVals.CompareTo(data.PartVals); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.PartVals
  }
  return nil
}

func (p *GetPartitionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetPartitionResult struct {
  thrift.TStruct
  Success *Partition "success"; // 0
  O1 *MetaException "o1"; // 1
  O2 *NoSuchObjectException "o2"; // 2
}

func NewGetPartitionResult() *GetPartitionResult {
  output := &GetPartitionResult{
    TStruct:thrift.NewTStruct("get_partition_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewPartition()
  err1203 := p.Success.Read(iprot)
  if err1203 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessPartition", err1203); }
  return err
}

func (p *GetPartitionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPartitionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1206 := p.O1.Read(iprot)
  if err1206 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1206); }
  return err
}

func (p *GetPartitionResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewNoSuchObjectException()
  err1209 := p.O2.Read(iprot)
  if err1209 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2NoSuchObjectException", err1209); }
  return err
}

func (p *GetPartitionResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partition_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPartitionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionResult) TStructName() string {
  return "GetPartitionResult"
}

func (p *GetPartitionResult) ThriftName() string {
  return "get_partition_result"
}

func (p *GetPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionResult(%+v)", *p)
}

func (p *GetPartitionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetPartitionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - PartVals
 *  - UserName
 *  - GroupNames
 */
type GetPartitionWithAuthArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  PartVals thrift.TList "part_vals"; // 3
  UserName string "user_name"; // 4
  GroupNames thrift.TList "group_names"; // 5
}

func NewGetPartitionWithAuthArgs() *GetPartitionWithAuthArgs {
  output := &GetPartitionWithAuthArgs{
    TStruct:thrift.NewTStruct("get_partition_with_auth_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    thrift.NewTField("user_name", thrift.STRING, 4),
    thrift.NewTField("group_names", thrift.LIST, 5),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionWithAuthArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "part_vals" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "user_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "group_names" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionWithAuthArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1210, err1211 := iprot.ReadString()
  if err1211 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1211); }
  p.DbName = v1210
  return err
}

func (p *GetPartitionWithAuthArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionWithAuthArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1212, err1213 := iprot.ReadString()
  if err1213 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1213); }
  p.TblName = v1212
  return err
}

func (p *GetPartitionWithAuthArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionWithAuthArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1219, _size1216, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PartVals", "", err)
  }
  p.PartVals = thrift.NewTList(_etype1219, _size1216)
  for _i1220:= 0; _i1220 < _size1216; _i1220++ {
    v1222, err1223 := iprot.ReadString()
    if err1223 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1221", "", err1223); }
    _elem1221 := v1222
    p.PartVals.Push(_elem1221)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionWithAuthArgs) ReadFieldPartVals(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPartitionWithAuthArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1224, err1225 := iprot.ReadString()
  if err1225 != nil { return thrift.NewTProtocolExceptionReadField(4, "user_name", p.ThriftName(), err1225); }
  p.UserName = v1224
  return err
}

func (p *GetPartitionWithAuthArgs) ReadFieldUserName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetPartitionWithAuthArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1231, _size1228, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.GroupNames", "", err)
  }
  p.GroupNames = thrift.NewTList(_etype1231, _size1228)
  for _i1232:= 0; _i1232 < _size1228; _i1232++ {
    v1234, err1235 := iprot.ReadString()
    if err1235 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1233", "", err1235); }
    _elem1233 := v1234
    p.GroupNames.Push(_elem1233)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionWithAuthArgs) ReadFieldGroupNames(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *GetPartitionWithAuthArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partition_with_auth_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionWithAuthArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionWithAuthArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionWithAuthArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionWithAuthArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionWithAuthArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PartVals != nil {
    err = oprot.WriteFieldBegin("part_vals", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.PartVals.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1236 := range p.PartVals.Iter() {
      Iter1237 := Iter1236.(string)
      err = oprot.WriteString(string(Iter1237))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1237", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionWithAuthArgs) WriteFieldPartVals(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPartitionWithAuthArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.UserName) < 1 { return nil}
  err = oprot.WriteFieldBegin("user_name", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "user_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.UserName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "user_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "user_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionWithAuthArgs) WriteFieldUserName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetPartitionWithAuthArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.GroupNames != nil {
    err = oprot.WriteFieldBegin("group_names", thrift.LIST, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "group_names", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.GroupNames.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1238 := range p.GroupNames.Iter() {
      Iter1239 := Iter1238.(string)
      err = oprot.WriteString(string(Iter1239))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1239", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "group_names", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionWithAuthArgs) WriteFieldGroupNames(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *GetPartitionWithAuthArgs) TStructName() string {
  return "GetPartitionWithAuthArgs"
}

func (p *GetPartitionWithAuthArgs) ThriftName() string {
  return "get_partition_with_auth_args"
}

func (p *GetPartitionWithAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionWithAuthArgs(%+v)", *p)
}

func (p *GetPartitionWithAuthArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionWithAuthArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.PartVals.CompareTo(data.PartVals); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.UserName != data.UserName {
    if p.UserName < data.UserName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.GroupNames.CompareTo(data.GroupNames); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionWithAuthArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.PartVals
  case 4: return p.UserName
  case 5: return p.GroupNames
  }
  return nil
}

func (p *GetPartitionWithAuthArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    thrift.NewTField("user_name", thrift.STRING, 4),
    thrift.NewTField("group_names", thrift.LIST, 5),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetPartitionWithAuthResult struct {
  thrift.TStruct
  Success *Partition "success"; // 0
  O1 *MetaException "o1"; // 1
  O2 *NoSuchObjectException "o2"; // 2
}

func NewGetPartitionWithAuthResult() *GetPartitionWithAuthResult {
  output := &GetPartitionWithAuthResult{
    TStruct:thrift.NewTStruct("get_partition_with_auth_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionWithAuthResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionWithAuthResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewPartition()
  err1242 := p.Success.Read(iprot)
  if err1242 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessPartition", err1242); }
  return err
}

func (p *GetPartitionWithAuthResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPartitionWithAuthResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1245 := p.O1.Read(iprot)
  if err1245 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1245); }
  return err
}

func (p *GetPartitionWithAuthResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionWithAuthResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewNoSuchObjectException()
  err1248 := p.O2.Read(iprot)
  if err1248 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2NoSuchObjectException", err1248); }
  return err
}

func (p *GetPartitionWithAuthResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionWithAuthResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partition_with_auth_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionWithAuthResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionWithAuthResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPartitionWithAuthResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionWithAuthResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionWithAuthResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionWithAuthResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionWithAuthResult) TStructName() string {
  return "GetPartitionWithAuthResult"
}

func (p *GetPartitionWithAuthResult) ThriftName() string {
  return "get_partition_with_auth_result"
}

func (p *GetPartitionWithAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionWithAuthResult(%+v)", *p)
}

func (p *GetPartitionWithAuthResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionWithAuthResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionWithAuthResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetPartitionWithAuthResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - PartName
 */
type GetPartitionByNameArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  PartName string "part_name"; // 3
}

func NewGetPartitionByNameArgs() *GetPartitionByNameArgs {
  output := &GetPartitionByNameArgs{
    TStruct:thrift.NewTStruct("get_partition_by_name_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_name", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionByNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "part_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionByNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1249, err1250 := iprot.ReadString()
  if err1250 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1250); }
  p.DbName = v1249
  return err
}

func (p *GetPartitionByNameArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionByNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1251, err1252 := iprot.ReadString()
  if err1252 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1252); }
  p.TblName = v1251
  return err
}

func (p *GetPartitionByNameArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionByNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1253, err1254 := iprot.ReadString()
  if err1254 != nil { return thrift.NewTProtocolExceptionReadField(3, "part_name", p.ThriftName(), err1254); }
  p.PartName = v1253
  return err
}

func (p *GetPartitionByNameArgs) ReadFieldPartName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPartitionByNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partition_by_name_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionByNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionByNameArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionByNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionByNameArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionByNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.PartName) < 1 { return nil}
  err = oprot.WriteFieldBegin("part_name", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PartName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionByNameArgs) WriteFieldPartName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPartitionByNameArgs) TStructName() string {
  return "GetPartitionByNameArgs"
}

func (p *GetPartitionByNameArgs) ThriftName() string {
  return "get_partition_by_name_args"
}

func (p *GetPartitionByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionByNameArgs(%+v)", *p)
}

func (p *GetPartitionByNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionByNameArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.PartName != data.PartName {
    if p.PartName < data.PartName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetPartitionByNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.PartName
  }
  return nil
}

func (p *GetPartitionByNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_name", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetPartitionByNameResult struct {
  thrift.TStruct
  Success *Partition "success"; // 0
  O1 *MetaException "o1"; // 1
  O2 *NoSuchObjectException "o2"; // 2
}

func NewGetPartitionByNameResult() *GetPartitionByNameResult {
  output := &GetPartitionByNameResult{
    TStruct:thrift.NewTStruct("get_partition_by_name_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionByNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionByNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewPartition()
  err1257 := p.Success.Read(iprot)
  if err1257 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessPartition", err1257); }
  return err
}

func (p *GetPartitionByNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPartitionByNameResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1260 := p.O1.Read(iprot)
  if err1260 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1260); }
  return err
}

func (p *GetPartitionByNameResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionByNameResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewNoSuchObjectException()
  err1263 := p.O2.Read(iprot)
  if err1263 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2NoSuchObjectException", err1263); }
  return err
}

func (p *GetPartitionByNameResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionByNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partition_by_name_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionByNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionByNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPartitionByNameResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionByNameResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionByNameResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionByNameResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionByNameResult) TStructName() string {
  return "GetPartitionByNameResult"
}

func (p *GetPartitionByNameResult) ThriftName() string {
  return "get_partition_by_name_result"
}

func (p *GetPartitionByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionByNameResult(%+v)", *p)
}

func (p *GetPartitionByNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionByNameResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionByNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetPartitionByNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - MaxParts
 */
type GetPartitionsArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  MaxParts int16 "max_parts"; // 3
}

func NewGetPartitionsArgs() *GetPartitionsArgs {
  output := &GetPartitionsArgs{
    TStruct:thrift.NewTStruct("get_partitions_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("max_parts", thrift.I16, 3),
    }),
  }
  {
    output.MaxParts = -1
  }
  return output
}

func (p *GetPartitionsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "max_parts" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1264, err1265 := iprot.ReadString()
  if err1265 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1265); }
  p.DbName = v1264
  return err
}

func (p *GetPartitionsArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1266, err1267 := iprot.ReadString()
  if err1267 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1267); }
  p.TblName = v1266
  return err
}

func (p *GetPartitionsArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1268, err1269 := iprot.ReadI16()
  if err1269 != nil { return thrift.NewTProtocolExceptionReadField(3, "max_parts", p.ThriftName(), err1269); }
  p.MaxParts = v1268
  return err
}

func (p *GetPartitionsArgs) ReadFieldMaxParts(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPartitionsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partitions_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.MaxParts) == 0 { return nil}
  err = oprot.WriteFieldBegin("max_parts", thrift.I16, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.MaxParts))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_parts", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsArgs) WriteFieldMaxParts(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPartitionsArgs) TStructName() string {
  return "GetPartitionsArgs"
}

func (p *GetPartitionsArgs) ThriftName() string {
  return "get_partitions_args"
}

func (p *GetPartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionsArgs(%+v)", *p)
}

func (p *GetPartitionsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionsArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.MaxParts != data.MaxParts {
    if p.MaxParts < data.MaxParts {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetPartitionsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.MaxParts
  }
  return nil
}

func (p *GetPartitionsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("max_parts", thrift.I16, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetPartitionsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *NoSuchObjectException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewGetPartitionsResult() *GetPartitionsResult {
  output := &GetPartitionsResult{
    TStruct:thrift.NewTStruct("get_partitions_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1275, _size1272, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1275, _size1272)
  for _i1276:= 0; _i1276 < _size1272; _i1276++ {
    _elem1277 := NewPartition()
    err1280 := _elem1277.Read(iprot)
    if err1280 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1277Partition", err1280); }
    p.Success.Push(_elem1277)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPartitionsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewNoSuchObjectException()
  err1283 := p.O1.Read(iprot)
  if err1283 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1NoSuchObjectException", err1283); }
  return err
}

func (p *GetPartitionsResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1286 := p.O2.Read(iprot)
  if err1286 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1286); }
  return err
}

func (p *GetPartitionsResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partitions_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1287 := range p.Success.Iter() {
      Iter1288 := Iter1287.(*Partition)
      err = Iter1288.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPartitionsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionsResult) TStructName() string {
  return "GetPartitionsResult"
}

func (p *GetPartitionsResult) ThriftName() string {
  return "get_partitions_result"
}

func (p *GetPartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionsResult(%+v)", *p)
}

func (p *GetPartitionsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetPartitionsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - MaxParts
 *  - UserName
 *  - GroupNames
 */
type GetPartitionsWithAuthArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  MaxParts int16 "max_parts"; // 3
  UserName string "user_name"; // 4
  GroupNames thrift.TList "group_names"; // 5
}

func NewGetPartitionsWithAuthArgs() *GetPartitionsWithAuthArgs {
  output := &GetPartitionsWithAuthArgs{
    TStruct:thrift.NewTStruct("get_partitions_with_auth_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("max_parts", thrift.I16, 3),
    thrift.NewTField("user_name", thrift.STRING, 4),
    thrift.NewTField("group_names", thrift.LIST, 5),
    }),
  }
  {
    output.MaxParts = -1
  }
  return output
}

func (p *GetPartitionsWithAuthArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "max_parts" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "user_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "group_names" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsWithAuthArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1289, err1290 := iprot.ReadString()
  if err1290 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1290); }
  p.DbName = v1289
  return err
}

func (p *GetPartitionsWithAuthArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionsWithAuthArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1291, err1292 := iprot.ReadString()
  if err1292 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1292); }
  p.TblName = v1291
  return err
}

func (p *GetPartitionsWithAuthArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionsWithAuthArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1293, err1294 := iprot.ReadI16()
  if err1294 != nil { return thrift.NewTProtocolExceptionReadField(3, "max_parts", p.ThriftName(), err1294); }
  p.MaxParts = v1293
  return err
}

func (p *GetPartitionsWithAuthArgs) ReadFieldMaxParts(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPartitionsWithAuthArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1295, err1296 := iprot.ReadString()
  if err1296 != nil { return thrift.NewTProtocolExceptionReadField(4, "user_name", p.ThriftName(), err1296); }
  p.UserName = v1295
  return err
}

func (p *GetPartitionsWithAuthArgs) ReadFieldUserName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetPartitionsWithAuthArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1302, _size1299, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.GroupNames", "", err)
  }
  p.GroupNames = thrift.NewTList(_etype1302, _size1299)
  for _i1303:= 0; _i1303 < _size1299; _i1303++ {
    v1305, err1306 := iprot.ReadString()
    if err1306 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1304", "", err1306); }
    _elem1304 := v1305
    p.GroupNames.Push(_elem1304)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionsWithAuthArgs) ReadFieldGroupNames(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *GetPartitionsWithAuthArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partitions_with_auth_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsWithAuthArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsWithAuthArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionsWithAuthArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsWithAuthArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionsWithAuthArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.MaxParts) == 0 { return nil}
  err = oprot.WriteFieldBegin("max_parts", thrift.I16, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.MaxParts))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_parts", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsWithAuthArgs) WriteFieldMaxParts(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPartitionsWithAuthArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.UserName) < 1 { return nil}
  err = oprot.WriteFieldBegin("user_name", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "user_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.UserName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "user_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "user_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsWithAuthArgs) WriteFieldUserName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetPartitionsWithAuthArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.GroupNames != nil {
    err = oprot.WriteFieldBegin("group_names", thrift.LIST, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "group_names", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.GroupNames.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1307 := range p.GroupNames.Iter() {
      Iter1308 := Iter1307.(string)
      err = oprot.WriteString(string(Iter1308))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1308", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "group_names", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsWithAuthArgs) WriteFieldGroupNames(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *GetPartitionsWithAuthArgs) TStructName() string {
  return "GetPartitionsWithAuthArgs"
}

func (p *GetPartitionsWithAuthArgs) ThriftName() string {
  return "get_partitions_with_auth_args"
}

func (p *GetPartitionsWithAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionsWithAuthArgs(%+v)", *p)
}

func (p *GetPartitionsWithAuthArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionsWithAuthArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.MaxParts != data.MaxParts {
    if p.MaxParts < data.MaxParts {
      return -1, true
    }
    return 1, true
  }
  if p.UserName != data.UserName {
    if p.UserName < data.UserName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.GroupNames.CompareTo(data.GroupNames); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionsWithAuthArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.MaxParts
  case 4: return p.UserName
  case 5: return p.GroupNames
  }
  return nil
}

func (p *GetPartitionsWithAuthArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("max_parts", thrift.I16, 3),
    thrift.NewTField("user_name", thrift.STRING, 4),
    thrift.NewTField("group_names", thrift.LIST, 5),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetPartitionsWithAuthResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *NoSuchObjectException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewGetPartitionsWithAuthResult() *GetPartitionsWithAuthResult {
  output := &GetPartitionsWithAuthResult{
    TStruct:thrift.NewTStruct("get_partitions_with_auth_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionsWithAuthResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsWithAuthResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1314, _size1311, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1314, _size1311)
  for _i1315:= 0; _i1315 < _size1311; _i1315++ {
    _elem1316 := NewPartition()
    err1319 := _elem1316.Read(iprot)
    if err1319 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1316Partition", err1319); }
    p.Success.Push(_elem1316)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionsWithAuthResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPartitionsWithAuthResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewNoSuchObjectException()
  err1322 := p.O1.Read(iprot)
  if err1322 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1NoSuchObjectException", err1322); }
  return err
}

func (p *GetPartitionsWithAuthResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionsWithAuthResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1325 := p.O2.Read(iprot)
  if err1325 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1325); }
  return err
}

func (p *GetPartitionsWithAuthResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionsWithAuthResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partitions_with_auth_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsWithAuthResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1326 := range p.Success.Iter() {
      Iter1327 := Iter1326.(*Partition)
      err = Iter1327.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsWithAuthResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPartitionsWithAuthResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsWithAuthResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionsWithAuthResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsWithAuthResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionsWithAuthResult) TStructName() string {
  return "GetPartitionsWithAuthResult"
}

func (p *GetPartitionsWithAuthResult) ThriftName() string {
  return "get_partitions_with_auth_result"
}

func (p *GetPartitionsWithAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionsWithAuthResult(%+v)", *p)
}

func (p *GetPartitionsWithAuthResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionsWithAuthResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionsWithAuthResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetPartitionsWithAuthResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - MaxParts
 */
type GetPartitionNamesArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  MaxParts int16 "max_parts"; // 3
}

func NewGetPartitionNamesArgs() *GetPartitionNamesArgs {
  output := &GetPartitionNamesArgs{
    TStruct:thrift.NewTStruct("get_partition_names_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("max_parts", thrift.I16, 3),
    }),
  }
  {
    output.MaxParts = -1
  }
  return output
}

func (p *GetPartitionNamesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "max_parts" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1328, err1329 := iprot.ReadString()
  if err1329 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1329); }
  p.DbName = v1328
  return err
}

func (p *GetPartitionNamesArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionNamesArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1330, err1331 := iprot.ReadString()
  if err1331 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1331); }
  p.TblName = v1330
  return err
}

func (p *GetPartitionNamesArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionNamesArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1332, err1333 := iprot.ReadI16()
  if err1333 != nil { return thrift.NewTProtocolExceptionReadField(3, "max_parts", p.ThriftName(), err1333); }
  p.MaxParts = v1332
  return err
}

func (p *GetPartitionNamesArgs) ReadFieldMaxParts(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPartitionNamesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partition_names_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionNamesArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionNamesArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.MaxParts) == 0 { return nil}
  err = oprot.WriteFieldBegin("max_parts", thrift.I16, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.MaxParts))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_parts", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesArgs) WriteFieldMaxParts(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPartitionNamesArgs) TStructName() string {
  return "GetPartitionNamesArgs"
}

func (p *GetPartitionNamesArgs) ThriftName() string {
  return "get_partition_names_args"
}

func (p *GetPartitionNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionNamesArgs(%+v)", *p)
}

func (p *GetPartitionNamesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionNamesArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.MaxParts != data.MaxParts {
    if p.MaxParts < data.MaxParts {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetPartitionNamesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.MaxParts
  }
  return nil
}

func (p *GetPartitionNamesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("max_parts", thrift.I16, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O2
 */
type GetPartitionNamesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O2 *MetaException "o2"; // 1
}

func NewGetPartitionNamesResult() *GetPartitionNamesResult {
  output := &GetPartitionNamesResult{
    TStruct:thrift.NewTStruct("get_partition_names_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o2", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionNamesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1339, _size1336, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1339, _size1336)
  for _i1340:= 0; _i1340 < _size1336; _i1340++ {
    v1342, err1343 := iprot.ReadString()
    if err1343 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1341", "", err1343); }
    _elem1341 := v1342
    p.Success.Push(_elem1341)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionNamesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPartitionNamesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1346 := p.O2.Read(iprot)
  if err1346 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1346); }
  return err
}

func (p *GetPartitionNamesResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionNamesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partition_names_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1347 := range p.Success.Iter() {
      Iter1348 := Iter1347.(string)
      err = oprot.WriteString(string(Iter1348))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1348", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionNamesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPartitionNamesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionNamesResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionNamesResult) TStructName() string {
  return "GetPartitionNamesResult"
}

func (p *GetPartitionNamesResult) ThriftName() string {
  return "get_partition_names_result"
}

func (p *GetPartitionNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionNamesResult(%+v)", *p)
}

func (p *GetPartitionNamesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionNamesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionNamesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O2
  }
  return nil
}

func (p *GetPartitionNamesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o2", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - PartVals
 *  - MaxParts
 */
type GetPartitionsPsArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  PartVals thrift.TList "part_vals"; // 3
  MaxParts int16 "max_parts"; // 4
}

func NewGetPartitionsPsArgs() *GetPartitionsPsArgs {
  output := &GetPartitionsPsArgs{
    TStruct:thrift.NewTStruct("get_partitions_ps_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    thrift.NewTField("max_parts", thrift.I16, 4),
    }),
  }
  {
    output.MaxParts = -1
  }
  return output
}

func (p *GetPartitionsPsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "part_vals" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "max_parts" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1349, err1350 := iprot.ReadString()
  if err1350 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1350); }
  p.DbName = v1349
  return err
}

func (p *GetPartitionsPsArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionsPsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1351, err1352 := iprot.ReadString()
  if err1352 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1352); }
  p.TblName = v1351
  return err
}

func (p *GetPartitionsPsArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionsPsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1358, _size1355, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PartVals", "", err)
  }
  p.PartVals = thrift.NewTList(_etype1358, _size1355)
  for _i1359:= 0; _i1359 < _size1355; _i1359++ {
    v1361, err1362 := iprot.ReadString()
    if err1362 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1360", "", err1362); }
    _elem1360 := v1361
    p.PartVals.Push(_elem1360)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionsPsArgs) ReadFieldPartVals(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPartitionsPsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1363, err1364 := iprot.ReadI16()
  if err1364 != nil { return thrift.NewTProtocolExceptionReadField(4, "max_parts", p.ThriftName(), err1364); }
  p.MaxParts = v1363
  return err
}

func (p *GetPartitionsPsArgs) ReadFieldMaxParts(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetPartitionsPsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partitions_ps_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionsPsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionsPsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PartVals != nil {
    err = oprot.WriteFieldBegin("part_vals", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.PartVals.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1365 := range p.PartVals.Iter() {
      Iter1366 := Iter1365.(string)
      err = oprot.WriteString(string(Iter1366))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1366", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsPsArgs) WriteFieldPartVals(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPartitionsPsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.MaxParts) == 0 { return nil}
  err = oprot.WriteFieldBegin("max_parts", thrift.I16, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.MaxParts))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsArgs) WriteFieldMaxParts(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetPartitionsPsArgs) TStructName() string {
  return "GetPartitionsPsArgs"
}

func (p *GetPartitionsPsArgs) ThriftName() string {
  return "get_partitions_ps_args"
}

func (p *GetPartitionsPsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionsPsArgs(%+v)", *p)
}

func (p *GetPartitionsPsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionsPsArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.PartVals.CompareTo(data.PartVals); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.MaxParts != data.MaxParts {
    if p.MaxParts < data.MaxParts {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetPartitionsPsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.PartVals
  case 4: return p.MaxParts
  }
  return nil
}

func (p *GetPartitionsPsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    thrift.NewTField("max_parts", thrift.I16, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetPartitionsPsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGetPartitionsPsResult() *GetPartitionsPsResult {
  output := &GetPartitionsPsResult{
    TStruct:thrift.NewTStruct("get_partitions_ps_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionsPsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1372, _size1369, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1372, _size1369)
  for _i1373:= 0; _i1373 < _size1369; _i1373++ {
    _elem1374 := NewPartition()
    err1377 := _elem1374.Read(iprot)
    if err1377 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1374Partition", err1377); }
    p.Success.Push(_elem1374)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionsPsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPartitionsPsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1380 := p.O1.Read(iprot)
  if err1380 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1380); }
  return err
}

func (p *GetPartitionsPsResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionsPsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partitions_ps_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1381 := range p.Success.Iter() {
      Iter1382 := Iter1381.(*Partition)
      err = Iter1382.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsPsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPartitionsPsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsPsResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionsPsResult) TStructName() string {
  return "GetPartitionsPsResult"
}

func (p *GetPartitionsPsResult) ThriftName() string {
  return "get_partitions_ps_result"
}

func (p *GetPartitionsPsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionsPsResult(%+v)", *p)
}

func (p *GetPartitionsPsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionsPsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionsPsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetPartitionsPsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - PartVals
 *  - MaxParts
 *  - UserName
 *  - GroupNames
 */
type GetPartitionsPsWithAuthArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  PartVals thrift.TList "part_vals"; // 3
  MaxParts int16 "max_parts"; // 4
  UserName string "user_name"; // 5
  GroupNames thrift.TList "group_names"; // 6
}

func NewGetPartitionsPsWithAuthArgs() *GetPartitionsPsWithAuthArgs {
  output := &GetPartitionsPsWithAuthArgs{
    TStruct:thrift.NewTStruct("get_partitions_ps_with_auth_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    thrift.NewTField("max_parts", thrift.I16, 4),
    thrift.NewTField("user_name", thrift.STRING, 5),
    thrift.NewTField("group_names", thrift.LIST, 6),
    }),
  }
  {
    output.MaxParts = -1
  }
  return output
}

func (p *GetPartitionsPsWithAuthArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "part_vals" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "max_parts" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "user_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "group_names" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsWithAuthArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1383, err1384 := iprot.ReadString()
  if err1384 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1384); }
  p.DbName = v1383
  return err
}

func (p *GetPartitionsPsWithAuthArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionsPsWithAuthArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1385, err1386 := iprot.ReadString()
  if err1386 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1386); }
  p.TblName = v1385
  return err
}

func (p *GetPartitionsPsWithAuthArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionsPsWithAuthArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1392, _size1389, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PartVals", "", err)
  }
  p.PartVals = thrift.NewTList(_etype1392, _size1389)
  for _i1393:= 0; _i1393 < _size1389; _i1393++ {
    v1395, err1396 := iprot.ReadString()
    if err1396 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1394", "", err1396); }
    _elem1394 := v1395
    p.PartVals.Push(_elem1394)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionsPsWithAuthArgs) ReadFieldPartVals(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPartitionsPsWithAuthArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1397, err1398 := iprot.ReadI16()
  if err1398 != nil { return thrift.NewTProtocolExceptionReadField(4, "max_parts", p.ThriftName(), err1398); }
  p.MaxParts = v1397
  return err
}

func (p *GetPartitionsPsWithAuthArgs) ReadFieldMaxParts(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetPartitionsPsWithAuthArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1399, err1400 := iprot.ReadString()
  if err1400 != nil { return thrift.NewTProtocolExceptionReadField(5, "user_name", p.ThriftName(), err1400); }
  p.UserName = v1399
  return err
}

func (p *GetPartitionsPsWithAuthArgs) ReadFieldUserName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *GetPartitionsPsWithAuthArgs) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1406, _size1403, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.GroupNames", "", err)
  }
  p.GroupNames = thrift.NewTList(_etype1406, _size1403)
  for _i1407:= 0; _i1407 < _size1403; _i1407++ {
    v1409, err1410 := iprot.ReadString()
    if err1410 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1408", "", err1410); }
    _elem1408 := v1409
    p.GroupNames.Push(_elem1408)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionsPsWithAuthArgs) ReadFieldGroupNames(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *GetPartitionsPsWithAuthArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partitions_ps_with_auth_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsWithAuthArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsWithAuthArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionsPsWithAuthArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsWithAuthArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionsPsWithAuthArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PartVals != nil {
    err = oprot.WriteFieldBegin("part_vals", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.PartVals.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1411 := range p.PartVals.Iter() {
      Iter1412 := Iter1411.(string)
      err = oprot.WriteString(string(Iter1412))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1412", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsPsWithAuthArgs) WriteFieldPartVals(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPartitionsPsWithAuthArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.MaxParts) == 0 { return nil}
  err = oprot.WriteFieldBegin("max_parts", thrift.I16, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.MaxParts))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsWithAuthArgs) WriteFieldMaxParts(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetPartitionsPsWithAuthArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.UserName) < 1 { return nil}
  err = oprot.WriteFieldBegin("user_name", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "user_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.UserName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "user_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "user_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsWithAuthArgs) WriteFieldUserName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *GetPartitionsPsWithAuthArgs) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.GroupNames != nil {
    err = oprot.WriteFieldBegin("group_names", thrift.LIST, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "group_names", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.GroupNames.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1413 := range p.GroupNames.Iter() {
      Iter1414 := Iter1413.(string)
      err = oprot.WriteString(string(Iter1414))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1414", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "group_names", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsPsWithAuthArgs) WriteFieldGroupNames(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *GetPartitionsPsWithAuthArgs) TStructName() string {
  return "GetPartitionsPsWithAuthArgs"
}

func (p *GetPartitionsPsWithAuthArgs) ThriftName() string {
  return "get_partitions_ps_with_auth_args"
}

func (p *GetPartitionsPsWithAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionsPsWithAuthArgs(%+v)", *p)
}

func (p *GetPartitionsPsWithAuthArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionsPsWithAuthArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.PartVals.CompareTo(data.PartVals); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.MaxParts != data.MaxParts {
    if p.MaxParts < data.MaxParts {
      return -1, true
    }
    return 1, true
  }
  if p.UserName != data.UserName {
    if p.UserName < data.UserName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.GroupNames.CompareTo(data.GroupNames); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionsPsWithAuthArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.PartVals
  case 4: return p.MaxParts
  case 5: return p.UserName
  case 6: return p.GroupNames
  }
  return nil
}

func (p *GetPartitionsPsWithAuthArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    thrift.NewTField("max_parts", thrift.I16, 4),
    thrift.NewTField("user_name", thrift.STRING, 5),
    thrift.NewTField("group_names", thrift.LIST, 6),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetPartitionsPsWithAuthResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *NoSuchObjectException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewGetPartitionsPsWithAuthResult() *GetPartitionsPsWithAuthResult {
  output := &GetPartitionsPsWithAuthResult{
    TStruct:thrift.NewTStruct("get_partitions_ps_with_auth_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionsPsWithAuthResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsWithAuthResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1420, _size1417, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1420, _size1417)
  for _i1421:= 0; _i1421 < _size1417; _i1421++ {
    _elem1422 := NewPartition()
    err1425 := _elem1422.Read(iprot)
    if err1425 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1422Partition", err1425); }
    p.Success.Push(_elem1422)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionsPsWithAuthResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPartitionsPsWithAuthResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewNoSuchObjectException()
  err1428 := p.O1.Read(iprot)
  if err1428 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1NoSuchObjectException", err1428); }
  return err
}

func (p *GetPartitionsPsWithAuthResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionsPsWithAuthResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1431 := p.O2.Read(iprot)
  if err1431 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1431); }
  return err
}

func (p *GetPartitionsPsWithAuthResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionsPsWithAuthResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partitions_ps_with_auth_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsPsWithAuthResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1432 := range p.Success.Iter() {
      Iter1433 := Iter1432.(*Partition)
      err = Iter1433.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsPsWithAuthResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPartitionsPsWithAuthResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsPsWithAuthResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionsPsWithAuthResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsPsWithAuthResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionsPsWithAuthResult) TStructName() string {
  return "GetPartitionsPsWithAuthResult"
}

func (p *GetPartitionsPsWithAuthResult) ThriftName() string {
  return "get_partitions_ps_with_auth_result"
}

func (p *GetPartitionsPsWithAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionsPsWithAuthResult(%+v)", *p)
}

func (p *GetPartitionsPsWithAuthResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionsPsWithAuthResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionsPsWithAuthResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetPartitionsPsWithAuthResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - PartVals
 *  - MaxParts
 */
type GetPartitionNamesPsArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  PartVals thrift.TList "part_vals"; // 3
  MaxParts int16 "max_parts"; // 4
}

func NewGetPartitionNamesPsArgs() *GetPartitionNamesPsArgs {
  output := &GetPartitionNamesPsArgs{
    TStruct:thrift.NewTStruct("get_partition_names_ps_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    thrift.NewTField("max_parts", thrift.I16, 4),
    }),
  }
  {
    output.MaxParts = -1
  }
  return output
}

func (p *GetPartitionNamesPsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "part_vals" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "max_parts" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesPsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1434, err1435 := iprot.ReadString()
  if err1435 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1435); }
  p.DbName = v1434
  return err
}

func (p *GetPartitionNamesPsArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionNamesPsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1436, err1437 := iprot.ReadString()
  if err1437 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1437); }
  p.TblName = v1436
  return err
}

func (p *GetPartitionNamesPsArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionNamesPsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1443, _size1440, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PartVals", "", err)
  }
  p.PartVals = thrift.NewTList(_etype1443, _size1440)
  for _i1444:= 0; _i1444 < _size1440; _i1444++ {
    v1446, err1447 := iprot.ReadString()
    if err1447 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1445", "", err1447); }
    _elem1445 := v1446
    p.PartVals.Push(_elem1445)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionNamesPsArgs) ReadFieldPartVals(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPartitionNamesPsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1448, err1449 := iprot.ReadI16()
  if err1449 != nil { return thrift.NewTProtocolExceptionReadField(4, "max_parts", p.ThriftName(), err1449); }
  p.MaxParts = v1448
  return err
}

func (p *GetPartitionNamesPsArgs) ReadFieldMaxParts(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetPartitionNamesPsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partition_names_ps_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesPsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesPsArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionNamesPsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesPsArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionNamesPsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PartVals != nil {
    err = oprot.WriteFieldBegin("part_vals", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.PartVals.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1450 := range p.PartVals.Iter() {
      Iter1451 := Iter1450.(string)
      err = oprot.WriteString(string(Iter1451))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1451", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "part_vals", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionNamesPsArgs) WriteFieldPartVals(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPartitionNamesPsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.MaxParts) == 0 { return nil}
  err = oprot.WriteFieldBegin("max_parts", thrift.I16, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.MaxParts))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesPsArgs) WriteFieldMaxParts(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetPartitionNamesPsArgs) TStructName() string {
  return "GetPartitionNamesPsArgs"
}

func (p *GetPartitionNamesPsArgs) ThriftName() string {
  return "get_partition_names_ps_args"
}

func (p *GetPartitionNamesPsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionNamesPsArgs(%+v)", *p)
}

func (p *GetPartitionNamesPsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionNamesPsArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.PartVals.CompareTo(data.PartVals); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.MaxParts != data.MaxParts {
    if p.MaxParts < data.MaxParts {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetPartitionNamesPsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.PartVals
  case 4: return p.MaxParts
  }
  return nil
}

func (p *GetPartitionNamesPsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("part_vals", thrift.LIST, 3),
    thrift.NewTField("max_parts", thrift.I16, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetPartitionNamesPsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGetPartitionNamesPsResult() *GetPartitionNamesPsResult {
  output := &GetPartitionNamesPsResult{
    TStruct:thrift.NewTStruct("get_partition_names_ps_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionNamesPsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesPsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1457, _size1454, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1457, _size1454)
  for _i1458:= 0; _i1458 < _size1454; _i1458++ {
    v1460, err1461 := iprot.ReadString()
    if err1461 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1459", "", err1461); }
    _elem1459 := v1460
    p.Success.Push(_elem1459)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionNamesPsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPartitionNamesPsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1464 := p.O1.Read(iprot)
  if err1464 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1464); }
  return err
}

func (p *GetPartitionNamesPsResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionNamesPsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partition_names_ps_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionNamesPsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1465 := range p.Success.Iter() {
      Iter1466 := Iter1465.(string)
      err = oprot.WriteString(string(Iter1466))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1466", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionNamesPsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPartitionNamesPsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionNamesPsResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionNamesPsResult) TStructName() string {
  return "GetPartitionNamesPsResult"
}

func (p *GetPartitionNamesPsResult) ThriftName() string {
  return "get_partition_names_ps_result"
}

func (p *GetPartitionNamesPsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionNamesPsResult(%+v)", *p)
}

func (p *GetPartitionNamesPsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionNamesPsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionNamesPsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetPartitionNamesPsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - Filter
 *  - MaxParts
 */
type GetPartitionsByFilterArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  Filter string "filter"; // 3
  MaxParts int16 "max_parts"; // 4
}

func NewGetPartitionsByFilterArgs() *GetPartitionsByFilterArgs {
  output := &GetPartitionsByFilterArgs{
    TStruct:thrift.NewTStruct("get_partitions_by_filter_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("filter", thrift.STRING, 3),
    thrift.NewTField("max_parts", thrift.I16, 4),
    }),
  }
  {
    output.MaxParts = -1
  }
  return output
}

func (p *GetPartitionsByFilterArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "filter" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "max_parts" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsByFilterArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1467, err1468 := iprot.ReadString()
  if err1468 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1468); }
  p.DbName = v1467
  return err
}

func (p *GetPartitionsByFilterArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionsByFilterArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1469, err1470 := iprot.ReadString()
  if err1470 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1470); }
  p.TblName = v1469
  return err
}

func (p *GetPartitionsByFilterArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionsByFilterArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1471, err1472 := iprot.ReadString()
  if err1472 != nil { return thrift.NewTProtocolExceptionReadField(3, "filter", p.ThriftName(), err1472); }
  p.Filter = v1471
  return err
}

func (p *GetPartitionsByFilterArgs) ReadFieldFilter(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPartitionsByFilterArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1473, err1474 := iprot.ReadI16()
  if err1474 != nil { return thrift.NewTProtocolExceptionReadField(4, "max_parts", p.ThriftName(), err1474); }
  p.MaxParts = v1473
  return err
}

func (p *GetPartitionsByFilterArgs) ReadFieldMaxParts(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetPartitionsByFilterArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partitions_by_filter_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsByFilterArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsByFilterArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionsByFilterArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsByFilterArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionsByFilterArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Filter) < 1 { return nil}
  err = oprot.WriteFieldBegin("filter", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "filter", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Filter))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "filter", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "filter", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsByFilterArgs) WriteFieldFilter(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPartitionsByFilterArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.MaxParts) == 0 { return nil}
  err = oprot.WriteFieldBegin("max_parts", thrift.I16, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.MaxParts))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "max_parts", p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsByFilterArgs) WriteFieldMaxParts(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetPartitionsByFilterArgs) TStructName() string {
  return "GetPartitionsByFilterArgs"
}

func (p *GetPartitionsByFilterArgs) ThriftName() string {
  return "get_partitions_by_filter_args"
}

func (p *GetPartitionsByFilterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionsByFilterArgs(%+v)", *p)
}

func (p *GetPartitionsByFilterArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionsByFilterArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.Filter != data.Filter {
    if p.Filter < data.Filter {
      return -1, true
    }
    return 1, true
  }
  if p.MaxParts != data.MaxParts {
    if p.MaxParts < data.MaxParts {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetPartitionsByFilterArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.Filter
  case 4: return p.MaxParts
  }
  return nil
}

func (p *GetPartitionsByFilterArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("filter", thrift.STRING, 3),
    thrift.NewTField("max_parts", thrift.I16, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetPartitionsByFilterResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
  O2 *NoSuchObjectException "o2"; // 2
}

func NewGetPartitionsByFilterResult() *GetPartitionsByFilterResult {
  output := &GetPartitionsByFilterResult{
    TStruct:thrift.NewTStruct("get_partitions_by_filter_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetPartitionsByFilterResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsByFilterResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1480, _size1477, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1480, _size1477)
  for _i1481:= 0; _i1481 < _size1477; _i1481++ {
    _elem1482 := NewPartition()
    err1485 := _elem1482.Read(iprot)
    if err1485 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1482Partition", err1485); }
    p.Success.Push(_elem1482)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPartitionsByFilterResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPartitionsByFilterResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1488 := p.O1.Read(iprot)
  if err1488 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1488); }
  return err
}

func (p *GetPartitionsByFilterResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPartitionsByFilterResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewNoSuchObjectException()
  err1491 := p.O2.Read(iprot)
  if err1491 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2NoSuchObjectException", err1491); }
  return err
}

func (p *GetPartitionsByFilterResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPartitionsByFilterResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_partitions_by_filter_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPartitionsByFilterResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1492 := range p.Success.Iter() {
      Iter1493 := Iter1492.(*Partition)
      err = Iter1493.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsByFilterResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPartitionsByFilterResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsByFilterResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPartitionsByFilterResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPartitionsByFilterResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPartitionsByFilterResult) TStructName() string {
  return "GetPartitionsByFilterResult"
}

func (p *GetPartitionsByFilterResult) ThriftName() string {
  return "get_partitions_by_filter_result"
}

func (p *GetPartitionsByFilterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartitionsByFilterResult(%+v)", *p)
}

func (p *GetPartitionsByFilterResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPartitionsByFilterResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPartitionsByFilterResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetPartitionsByFilterResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - NewPart
 */
type AlterPartitionArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  NewPart *Partition "new_part"; // 3
}

func NewAlterPartitionArgs() *AlterPartitionArgs {
  output := &AlterPartitionArgs{
    TStruct:thrift.NewTStruct("alter_partition_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("new_part", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *AlterPartitionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "new_part" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterPartitionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1494, err1495 := iprot.ReadString()
  if err1495 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1495); }
  p.DbName = v1494
  return err
}

func (p *AlterPartitionArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AlterPartitionArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1496, err1497 := iprot.ReadString()
  if err1497 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1497); }
  p.TblName = v1496
  return err
}

func (p *AlterPartitionArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AlterPartitionArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.NewPart = NewPartition()
  err1500 := p.NewPart.Read(iprot)
  if err1500 != nil { return thrift.NewTProtocolExceptionReadStruct("p.NewPartPartition", err1500); }
  return err
}

func (p *AlterPartitionArgs) ReadFieldNewPart(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AlterPartitionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("alter_partition_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterPartitionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *AlterPartitionArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AlterPartitionArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *AlterPartitionArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AlterPartitionArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.NewPart != nil {
    err = oprot.WriteFieldBegin("new_part", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "new_part", p.ThriftName(), err); }
    err = p.NewPart.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Partition", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "new_part", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterPartitionArgs) WriteFieldNewPart(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AlterPartitionArgs) TStructName() string {
  return "AlterPartitionArgs"
}

func (p *AlterPartitionArgs) ThriftName() string {
  return "alter_partition_args"
}

func (p *AlterPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterPartitionArgs(%+v)", *p)
}

func (p *AlterPartitionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AlterPartitionArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.NewPart.CompareTo(data.NewPart); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AlterPartitionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.NewPart
  }
  return nil
}

func (p *AlterPartitionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("new_part", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - O1
 *  - O2
 */
type AlterPartitionResult struct {
  thrift.TStruct
  O1 *InvalidOperationException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewAlterPartitionResult() *AlterPartitionResult {
  output := &AlterPartitionResult{
    TStruct:thrift.NewTStruct("alter_partition_result", []thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *AlterPartitionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterPartitionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewInvalidOperationException()
  err1503 := p.O1.Read(iprot)
  if err1503 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1InvalidOperationException", err1503); }
  return err
}

func (p *AlterPartitionResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AlterPartitionResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1506 := p.O2.Read(iprot)
  if err1506 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1506); }
  return err
}

func (p *AlterPartitionResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AlterPartitionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("alter_partition_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterPartitionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidOperationException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterPartitionResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AlterPartitionResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterPartitionResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AlterPartitionResult) TStructName() string {
  return "AlterPartitionResult"
}

func (p *AlterPartitionResult) ThriftName() string {
  return "alter_partition_result"
}

func (p *AlterPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterPartitionResult(%+v)", *p)
}

func (p *AlterPartitionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AlterPartitionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AlterPartitionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *AlterPartitionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Name
 *  - DefaultValue
 */
type GetConfigValueArgs struct {
  thrift.TStruct
  Name string "name"; // 1
  DefaultValue string "defaultValue"; // 2
}

func NewGetConfigValueArgs() *GetConfigValueArgs {
  output := &GetConfigValueArgs{
    TStruct:thrift.NewTStruct("get_config_value_args", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("defaultValue", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetConfigValueArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "defaultValue" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetConfigValueArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1507, err1508 := iprot.ReadString()
  if err1508 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err1508); }
  p.Name = v1507
  return err
}

func (p *GetConfigValueArgs) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetConfigValueArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1509, err1510 := iprot.ReadString()
  if err1510 != nil { return thrift.NewTProtocolExceptionReadField(2, "defaultValue", p.ThriftName(), err1510); }
  p.DefaultValue = v1509
  return err
}

func (p *GetConfigValueArgs) ReadFieldDefaultValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetConfigValueArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_config_value_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetConfigValueArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *GetConfigValueArgs) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetConfigValueArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DefaultValue) < 1 { return nil}
  err = oprot.WriteFieldBegin("defaultValue", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "defaultValue", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DefaultValue))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "defaultValue", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "defaultValue", p.ThriftName(), err); }
  return err
}

func (p *GetConfigValueArgs) WriteFieldDefaultValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetConfigValueArgs) TStructName() string {
  return "GetConfigValueArgs"
}

func (p *GetConfigValueArgs) ThriftName() string {
  return "get_config_value_args"
}

func (p *GetConfigValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetConfigValueArgs(%+v)", *p)
}

func (p *GetConfigValueArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetConfigValueArgs)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  if p.DefaultValue != data.DefaultValue {
    if p.DefaultValue < data.DefaultValue {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetConfigValueArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  case 2: return p.DefaultValue
  }
  return nil
}

func (p *GetConfigValueArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("defaultValue", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetConfigValueResult struct {
  thrift.TStruct
  Success string "success"; // 0
  O1 *ConfigValSecurityException "o1"; // 1
}

func NewGetConfigValueResult() *GetConfigValueResult {
  output := &GetConfigValueResult{
    TStruct:thrift.NewTStruct("get_config_value_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetConfigValueResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetConfigValueResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1511, err1512 := iprot.ReadString()
  if err1512 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1512); }
  p.Success = v1511
  return err
}

func (p *GetConfigValueResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetConfigValueResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewConfigValSecurityException()
  err1515 := p.O1.Read(iprot)
  if err1515 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1ConfigValSecurityException", err1515); }
  return err
}

func (p *GetConfigValueResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetConfigValueResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_config_value_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetConfigValueResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Success) < 1 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetConfigValueResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetConfigValueResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ConfigValSecurityException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetConfigValueResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetConfigValueResult) TStructName() string {
  return "GetConfigValueResult"
}

func (p *GetConfigValueResult) ThriftName() string {
  return "get_config_value_result"
}

func (p *GetConfigValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetConfigValueResult(%+v)", *p)
}

func (p *GetConfigValueResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetConfigValueResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetConfigValueResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetConfigValueResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - PartName
 */
type PartitionNameToValsArgs struct {
  thrift.TStruct
  PartName string "part_name"; // 1
}

func NewPartitionNameToValsArgs() *PartitionNameToValsArgs {
  output := &PartitionNameToValsArgs{
    TStruct:thrift.NewTStruct("partition_name_to_vals_args", []thrift.TField{
    thrift.NewTField("part_name", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *PartitionNameToValsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "part_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PartitionNameToValsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1516, err1517 := iprot.ReadString()
  if err1517 != nil { return thrift.NewTProtocolExceptionReadField(1, "part_name", p.ThriftName(), err1517); }
  p.PartName = v1516
  return err
}

func (p *PartitionNameToValsArgs) ReadFieldPartName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PartitionNameToValsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("partition_name_to_vals_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PartitionNameToValsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.PartName) < 1 { return nil}
  err = oprot.WriteFieldBegin("part_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "part_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PartName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "part_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "part_name", p.ThriftName(), err); }
  return err
}

func (p *PartitionNameToValsArgs) WriteFieldPartName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PartitionNameToValsArgs) TStructName() string {
  return "PartitionNameToValsArgs"
}

func (p *PartitionNameToValsArgs) ThriftName() string {
  return "partition_name_to_vals_args"
}

func (p *PartitionNameToValsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionNameToValsArgs(%+v)", *p)
}

func (p *PartitionNameToValsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PartitionNameToValsArgs)
  if !ok {
    return 0, false
  }
  if p.PartName != data.PartName {
    if p.PartName < data.PartName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *PartitionNameToValsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.PartName
  }
  return nil
}

func (p *PartitionNameToValsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("part_name", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type PartitionNameToValsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewPartitionNameToValsResult() *PartitionNameToValsResult {
  output := &PartitionNameToValsResult{
    TStruct:thrift.NewTStruct("partition_name_to_vals_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *PartitionNameToValsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PartitionNameToValsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1523, _size1520, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1523, _size1520)
  for _i1524:= 0; _i1524 < _size1520; _i1524++ {
    v1526, err1527 := iprot.ReadString()
    if err1527 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1525", "", err1527); }
    _elem1525 := v1526
    p.Success.Push(_elem1525)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *PartitionNameToValsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *PartitionNameToValsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1530 := p.O1.Read(iprot)
  if err1530 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1530); }
  return err
}

func (p *PartitionNameToValsResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PartitionNameToValsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("partition_name_to_vals_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PartitionNameToValsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1531 := range p.Success.Iter() {
      Iter1532 := Iter1531.(string)
      err = oprot.WriteString(string(Iter1532))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1532", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *PartitionNameToValsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *PartitionNameToValsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *PartitionNameToValsResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PartitionNameToValsResult) TStructName() string {
  return "PartitionNameToValsResult"
}

func (p *PartitionNameToValsResult) ThriftName() string {
  return "partition_name_to_vals_result"
}

func (p *PartitionNameToValsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionNameToValsResult(%+v)", *p)
}

func (p *PartitionNameToValsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PartitionNameToValsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PartitionNameToValsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *PartitionNameToValsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - PartName
 */
type PartitionNameToSpecArgs struct {
  thrift.TStruct
  PartName string "part_name"; // 1
}

func NewPartitionNameToSpecArgs() *PartitionNameToSpecArgs {
  output := &PartitionNameToSpecArgs{
    TStruct:thrift.NewTStruct("partition_name_to_spec_args", []thrift.TField{
    thrift.NewTField("part_name", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *PartitionNameToSpecArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "part_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PartitionNameToSpecArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1533, err1534 := iprot.ReadString()
  if err1534 != nil { return thrift.NewTProtocolExceptionReadField(1, "part_name", p.ThriftName(), err1534); }
  p.PartName = v1533
  return err
}

func (p *PartitionNameToSpecArgs) ReadFieldPartName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PartitionNameToSpecArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("partition_name_to_spec_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PartitionNameToSpecArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.PartName) < 1 { return nil}
  err = oprot.WriteFieldBegin("part_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "part_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PartName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "part_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "part_name", p.ThriftName(), err); }
  return err
}

func (p *PartitionNameToSpecArgs) WriteFieldPartName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PartitionNameToSpecArgs) TStructName() string {
  return "PartitionNameToSpecArgs"
}

func (p *PartitionNameToSpecArgs) ThriftName() string {
  return "partition_name_to_spec_args"
}

func (p *PartitionNameToSpecArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionNameToSpecArgs(%+v)", *p)
}

func (p *PartitionNameToSpecArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PartitionNameToSpecArgs)
  if !ok {
    return 0, false
  }
  if p.PartName != data.PartName {
    if p.PartName < data.PartName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *PartitionNameToSpecArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.PartName
  }
  return nil
}

func (p *PartitionNameToSpecArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("part_name", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type PartitionNameToSpecResult struct {
  thrift.TStruct
  Success thrift.TMap "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewPartitionNameToSpecResult() *PartitionNameToSpecResult {
  output := &PartitionNameToSpecResult{
    TStruct:thrift.NewTStruct("partition_name_to_spec_result", []thrift.TField{
    thrift.NewTField("success", thrift.MAP, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *PartitionNameToSpecResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PartitionNameToSpecResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype1538, _vtype1539, _size1537, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTMap(_ktype1538, _vtype1539, _size1537)
  for _i1541:= 0; _i1541 < _size1537; _i1541++ {
    v1544, err1545 := iprot.ReadString()
    if err1545 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key1542", "", err1545); }
    _key1542 := v1544
    v1546, err1547 := iprot.ReadString()
    if err1547 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val1543", "", err1547); }
    _val1543 := v1546
    p.Success.Set(_key1542, _val1543)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *PartitionNameToSpecResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *PartitionNameToSpecResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1550 := p.O1.Read(iprot)
  if err1550 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1550); }
  return err
}

func (p *PartitionNameToSpecResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PartitionNameToSpecResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("partition_name_to_spec_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PartitionNameToSpecResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter1551 := range p.Success.Iter() {
      Kiter1552, Viter1553 := Miter1551.Key().(string), Miter1551.Value().(string)
      err = oprot.WriteString(string(Kiter1552))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter1552", "", err); }
      err = oprot.WriteString(string(Viter1553))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter1553", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *PartitionNameToSpecResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *PartitionNameToSpecResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *PartitionNameToSpecResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PartitionNameToSpecResult) TStructName() string {
  return "PartitionNameToSpecResult"
}

func (p *PartitionNameToSpecResult) ThriftName() string {
  return "partition_name_to_spec_result"
}

func (p *PartitionNameToSpecResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionNameToSpecResult(%+v)", *p)
}

func (p *PartitionNameToSpecResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PartitionNameToSpecResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *PartitionNameToSpecResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *PartitionNameToSpecResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.MAP, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - NewIndex
 *  - IndexTable
 */
type AddIndexArgs struct {
  thrift.TStruct
  NewIndex *Index "new_index"; // 1
  IndexTable *Table "index_table"; // 2
}

func NewAddIndexArgs() *AddIndexArgs {
  output := &AddIndexArgs{
    TStruct:thrift.NewTStruct("add_index_args", []thrift.TField{
    thrift.NewTField("new_index", thrift.STRUCT, 1),
    thrift.NewTField("index_table", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *AddIndexArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "new_index" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "index_table" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddIndexArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.NewIndex = NewIndex()
  err1556 := p.NewIndex.Read(iprot)
  if err1556 != nil { return thrift.NewTProtocolExceptionReadStruct("p.NewIndexIndex", err1556); }
  return err
}

func (p *AddIndexArgs) ReadFieldNewIndex(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddIndexArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.IndexTable = NewTable()
  err1559 := p.IndexTable.Read(iprot)
  if err1559 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IndexTableTable", err1559); }
  return err
}

func (p *AddIndexArgs) ReadFieldIndexTable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddIndexArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("add_index_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddIndexArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.NewIndex != nil {
    err = oprot.WriteFieldBegin("new_index", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "new_index", p.ThriftName(), err); }
    err = p.NewIndex.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Index", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "new_index", p.ThriftName(), err); }
  }
  return err
}

func (p *AddIndexArgs) WriteFieldNewIndex(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddIndexArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.IndexTable != nil {
    err = oprot.WriteFieldBegin("index_table", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "index_table", p.ThriftName(), err); }
    err = p.IndexTable.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Table", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "index_table", p.ThriftName(), err); }
  }
  return err
}

func (p *AddIndexArgs) WriteFieldIndexTable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddIndexArgs) TStructName() string {
  return "AddIndexArgs"
}

func (p *AddIndexArgs) ThriftName() string {
  return "add_index_args"
}

func (p *AddIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddIndexArgs(%+v)", *p)
}

func (p *AddIndexArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddIndexArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.NewIndex.CompareTo(data.NewIndex); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.IndexTable.CompareTo(data.IndexTable); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AddIndexArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.NewIndex
  case 2: return p.IndexTable
  }
  return nil
}

func (p *AddIndexArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("new_index", thrift.STRUCT, 1),
    thrift.NewTField("index_table", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 *  - O3
 */
type AddIndexResult struct {
  thrift.TStruct
  Success *Index "success"; // 0
  O1 *InvalidObjectException "o1"; // 1
  O2 *AlreadyExistsException "o2"; // 2
  O3 *MetaException "o3"; // 3
}

func NewAddIndexResult() *AddIndexResult {
  output := &AddIndexResult{
    TStruct:thrift.NewTStruct("add_index_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *AddIndexResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "o3" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AddIndexResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewIndex()
  err1562 := p.Success.Read(iprot)
  if err1562 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessIndex", err1562); }
  return err
}

func (p *AddIndexResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AddIndexResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewInvalidObjectException()
  err1565 := p.O1.Read(iprot)
  if err1565 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1InvalidObjectException", err1565); }
  return err
}

func (p *AddIndexResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AddIndexResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewAlreadyExistsException()
  err1568 := p.O2.Read(iprot)
  if err1568 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2AlreadyExistsException", err1568); }
  return err
}

func (p *AddIndexResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AddIndexResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O3 = NewMetaException()
  err1571 := p.O3.Read(iprot)
  if err1571 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O3MetaException", err1571); }
  return err
}

func (p *AddIndexResult) ReadFieldO3(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AddIndexResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("add_index_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O3 != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AddIndexResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Index", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *AddIndexResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AddIndexResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *AddIndexResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AddIndexResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("AlreadyExistsException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *AddIndexResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AddIndexResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O3 != nil {
    err = oprot.WriteFieldBegin("o3", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
    err = p.O3.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "o3", p.ThriftName(), err); }
  }
  return err
}

func (p *AddIndexResult) WriteFieldO3(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AddIndexResult) TStructName() string {
  return "AddIndexResult"
}

func (p *AddIndexResult) ThriftName() string {
  return "add_index_result"
}

func (p *AddIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddIndexResult(%+v)", *p)
}

func (p *AddIndexResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AddIndexResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O3.CompareTo(data.O3); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AddIndexResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  case 3: return p.O3
  }
  return nil
}

func (p *AddIndexResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    thrift.NewTField("o3", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Dbname
 *  - BaseTblName
 *  - IdxName
 *  - NewIdx
 */
type AlterIndexArgs struct {
  thrift.TStruct
  Dbname string "dbname"; // 1
  BaseTblName string "base_tbl_name"; // 2
  IdxName string "idx_name"; // 3
  NewIdx *Index "new_idx"; // 4
}

func NewAlterIndexArgs() *AlterIndexArgs {
  output := &AlterIndexArgs{
    TStruct:thrift.NewTStruct("alter_index_args", []thrift.TField{
    thrift.NewTField("dbname", thrift.STRING, 1),
    thrift.NewTField("base_tbl_name", thrift.STRING, 2),
    thrift.NewTField("idx_name", thrift.STRING, 3),
    thrift.NewTField("new_idx", thrift.STRUCT, 4),
    }),
  }
  {
  }
  return output
}

func (p *AlterIndexArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "dbname" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "base_tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "idx_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "new_idx" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterIndexArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1572, err1573 := iprot.ReadString()
  if err1573 != nil { return thrift.NewTProtocolExceptionReadField(1, "dbname", p.ThriftName(), err1573); }
  p.Dbname = v1572
  return err
}

func (p *AlterIndexArgs) ReadFieldDbname(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AlterIndexArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1574, err1575 := iprot.ReadString()
  if err1575 != nil { return thrift.NewTProtocolExceptionReadField(2, "base_tbl_name", p.ThriftName(), err1575); }
  p.BaseTblName = v1574
  return err
}

func (p *AlterIndexArgs) ReadFieldBaseTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AlterIndexArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1576, err1577 := iprot.ReadString()
  if err1577 != nil { return thrift.NewTProtocolExceptionReadField(3, "idx_name", p.ThriftName(), err1577); }
  p.IdxName = v1576
  return err
}

func (p *AlterIndexArgs) ReadFieldIdxName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AlterIndexArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.NewIdx = NewIndex()
  err1580 := p.NewIdx.Read(iprot)
  if err1580 != nil { return thrift.NewTProtocolExceptionReadStruct("p.NewIdxIndex", err1580); }
  return err
}

func (p *AlterIndexArgs) ReadFieldNewIdx(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *AlterIndexArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("alter_index_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterIndexArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Dbname) < 1 { return nil}
  err = oprot.WriteFieldBegin("dbname", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Dbname))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "dbname", p.ThriftName(), err); }
  return err
}

func (p *AlterIndexArgs) WriteFieldDbname(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AlterIndexArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.BaseTblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("base_tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "base_tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.BaseTblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "base_tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "base_tbl_name", p.ThriftName(), err); }
  return err
}

func (p *AlterIndexArgs) WriteFieldBaseTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AlterIndexArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.IdxName) < 1 { return nil}
  err = oprot.WriteFieldBegin("idx_name", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "idx_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.IdxName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "idx_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "idx_name", p.ThriftName(), err); }
  return err
}

func (p *AlterIndexArgs) WriteFieldIdxName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AlterIndexArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.NewIdx != nil {
    err = oprot.WriteFieldBegin("new_idx", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "new_idx", p.ThriftName(), err); }
    err = p.NewIdx.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Index", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "new_idx", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterIndexArgs) WriteFieldNewIdx(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *AlterIndexArgs) TStructName() string {
  return "AlterIndexArgs"
}

func (p *AlterIndexArgs) ThriftName() string {
  return "alter_index_args"
}

func (p *AlterIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterIndexArgs(%+v)", *p)
}

func (p *AlterIndexArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AlterIndexArgs)
  if !ok {
    return 0, false
  }
  if p.Dbname != data.Dbname {
    if p.Dbname < data.Dbname {
      return -1, true
    }
    return 1, true
  }
  if p.BaseTblName != data.BaseTblName {
    if p.BaseTblName < data.BaseTblName {
      return -1, true
    }
    return 1, true
  }
  if p.IdxName != data.IdxName {
    if p.IdxName < data.IdxName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.NewIdx.CompareTo(data.NewIdx); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AlterIndexArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Dbname
  case 2: return p.BaseTblName
  case 3: return p.IdxName
  case 4: return p.NewIdx
  }
  return nil
}

func (p *AlterIndexArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("dbname", thrift.STRING, 1),
    thrift.NewTField("base_tbl_name", thrift.STRING, 2),
    thrift.NewTField("idx_name", thrift.STRING, 3),
    thrift.NewTField("new_idx", thrift.STRUCT, 4),
    })
}

/**
 * Attributes:
 *  - O1
 *  - O2
 */
type AlterIndexResult struct {
  thrift.TStruct
  O1 *InvalidOperationException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewAlterIndexResult() *AlterIndexResult {
  output := &AlterIndexResult{
    TStruct:thrift.NewTStruct("alter_index_result", []thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *AlterIndexResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterIndexResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewInvalidOperationException()
  err1583 := p.O1.Read(iprot)
  if err1583 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1InvalidOperationException", err1583); }
  return err
}

func (p *AlterIndexResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AlterIndexResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1586 := p.O2.Read(iprot)
  if err1586 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1586); }
  return err
}

func (p *AlterIndexResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AlterIndexResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("alter_index_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AlterIndexResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("InvalidOperationException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterIndexResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AlterIndexResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *AlterIndexResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AlterIndexResult) TStructName() string {
  return "AlterIndexResult"
}

func (p *AlterIndexResult) ThriftName() string {
  return "alter_index_result"
}

func (p *AlterIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterIndexResult(%+v)", *p)
}

func (p *AlterIndexResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AlterIndexResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AlterIndexResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *AlterIndexResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - IndexName
 *  - DeleteData
 */
type DropIndexByNameArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  IndexName string "index_name"; // 3
  DeleteData bool "deleteData"; // 4
}

func NewDropIndexByNameArgs() *DropIndexByNameArgs {
  output := &DropIndexByNameArgs{
    TStruct:thrift.NewTStruct("drop_index_by_name_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("index_name", thrift.STRING, 3),
    thrift.NewTField("deleteData", thrift.BOOL, 4),
    }),
  }
  {
  }
  return output
}

func (p *DropIndexByNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "index_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "deleteData" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropIndexByNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1587, err1588 := iprot.ReadString()
  if err1588 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1588); }
  p.DbName = v1587
  return err
}

func (p *DropIndexByNameArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropIndexByNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1589, err1590 := iprot.ReadString()
  if err1590 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1590); }
  p.TblName = v1589
  return err
}

func (p *DropIndexByNameArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropIndexByNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1591, err1592 := iprot.ReadString()
  if err1592 != nil { return thrift.NewTProtocolExceptionReadField(3, "index_name", p.ThriftName(), err1592); }
  p.IndexName = v1591
  return err
}

func (p *DropIndexByNameArgs) ReadFieldIndexName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DropIndexByNameArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1593, err1594 := iprot.ReadBool()
  if err1594 != nil { return thrift.NewTProtocolExceptionReadField(4, "deleteData", p.ThriftName(), err1594); }
  p.DeleteData = v1593
  return err
}

func (p *DropIndexByNameArgs) ReadFieldDeleteData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *DropIndexByNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_index_by_name_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropIndexByNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *DropIndexByNameArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropIndexByNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *DropIndexByNameArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropIndexByNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.IndexName) < 1 { return nil}
  err = oprot.WriteFieldBegin("index_name", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "index_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.IndexName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "index_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "index_name", p.ThriftName(), err); }
  return err
}

func (p *DropIndexByNameArgs) WriteFieldIndexName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DropIndexByNameArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteData", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.DeleteData))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteData", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "deleteData", p.ThriftName(), err); }
  return err
}

func (p *DropIndexByNameArgs) WriteFieldDeleteData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *DropIndexByNameArgs) TStructName() string {
  return "DropIndexByNameArgs"
}

func (p *DropIndexByNameArgs) ThriftName() string {
  return "drop_index_by_name_args"
}

func (p *DropIndexByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropIndexByNameArgs(%+v)", *p)
}

func (p *DropIndexByNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropIndexByNameArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.IndexName != data.IndexName {
    if p.IndexName < data.IndexName {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.DeleteData, data.DeleteData); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *DropIndexByNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.IndexName
  case 4: return p.DeleteData
  }
  return nil
}

func (p *DropIndexByNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("index_name", thrift.STRING, 3),
    thrift.NewTField("deleteData", thrift.BOOL, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type DropIndexByNameResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *NoSuchObjectException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewDropIndexByNameResult() *DropIndexByNameResult {
  output := &DropIndexByNameResult{
    TStruct:thrift.NewTStruct("drop_index_by_name_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *DropIndexByNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropIndexByNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1595, err1596 := iprot.ReadBool()
  if err1596 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1596); }
  p.Success = v1595
  return err
}

func (p *DropIndexByNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *DropIndexByNameResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewNoSuchObjectException()
  err1599 := p.O1.Read(iprot)
  if err1599 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1NoSuchObjectException", err1599); }
  return err
}

func (p *DropIndexByNameResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropIndexByNameResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1602 := p.O2.Read(iprot)
  if err1602 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1602); }
  return err
}

func (p *DropIndexByNameResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DropIndexByNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_index_by_name_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropIndexByNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *DropIndexByNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *DropIndexByNameResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *DropIndexByNameResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropIndexByNameResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *DropIndexByNameResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DropIndexByNameResult) TStructName() string {
  return "DropIndexByNameResult"
}

func (p *DropIndexByNameResult) ThriftName() string {
  return "drop_index_by_name_result"
}

func (p *DropIndexByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropIndexByNameResult(%+v)", *p)
}

func (p *DropIndexByNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropIndexByNameResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DropIndexByNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *DropIndexByNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - IndexName
 */
type GetIndexByNameArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  IndexName string "index_name"; // 3
}

func NewGetIndexByNameArgs() *GetIndexByNameArgs {
  output := &GetIndexByNameArgs{
    TStruct:thrift.NewTStruct("get_index_by_name_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("index_name", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetIndexByNameArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "index_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexByNameArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1603, err1604 := iprot.ReadString()
  if err1604 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1604); }
  p.DbName = v1603
  return err
}

func (p *GetIndexByNameArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetIndexByNameArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1605, err1606 := iprot.ReadString()
  if err1606 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1606); }
  p.TblName = v1605
  return err
}

func (p *GetIndexByNameArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetIndexByNameArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1607, err1608 := iprot.ReadString()
  if err1608 != nil { return thrift.NewTProtocolExceptionReadField(3, "index_name", p.ThriftName(), err1608); }
  p.IndexName = v1607
  return err
}

func (p *GetIndexByNameArgs) ReadFieldIndexName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetIndexByNameArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_index_by_name_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexByNameArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetIndexByNameArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetIndexByNameArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetIndexByNameArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetIndexByNameArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.IndexName) < 1 { return nil}
  err = oprot.WriteFieldBegin("index_name", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "index_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.IndexName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "index_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "index_name", p.ThriftName(), err); }
  return err
}

func (p *GetIndexByNameArgs) WriteFieldIndexName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetIndexByNameArgs) TStructName() string {
  return "GetIndexByNameArgs"
}

func (p *GetIndexByNameArgs) ThriftName() string {
  return "get_index_by_name_args"
}

func (p *GetIndexByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetIndexByNameArgs(%+v)", *p)
}

func (p *GetIndexByNameArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetIndexByNameArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.IndexName != data.IndexName {
    if p.IndexName < data.IndexName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetIndexByNameArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.IndexName
  }
  return nil
}

func (p *GetIndexByNameArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("index_name", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetIndexByNameResult struct {
  thrift.TStruct
  Success *Index "success"; // 0
  O1 *MetaException "o1"; // 1
  O2 *NoSuchObjectException "o2"; // 2
}

func NewGetIndexByNameResult() *GetIndexByNameResult {
  output := &GetIndexByNameResult{
    TStruct:thrift.NewTStruct("get_index_by_name_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetIndexByNameResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexByNameResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewIndex()
  err1611 := p.Success.Read(iprot)
  if err1611 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessIndex", err1611); }
  return err
}

func (p *GetIndexByNameResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetIndexByNameResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1614 := p.O1.Read(iprot)
  if err1614 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1614); }
  return err
}

func (p *GetIndexByNameResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetIndexByNameResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewNoSuchObjectException()
  err1617 := p.O2.Read(iprot)
  if err1617 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2NoSuchObjectException", err1617); }
  return err
}

func (p *GetIndexByNameResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetIndexByNameResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_index_by_name_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexByNameResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Index", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetIndexByNameResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetIndexByNameResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetIndexByNameResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetIndexByNameResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetIndexByNameResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetIndexByNameResult) TStructName() string {
  return "GetIndexByNameResult"
}

func (p *GetIndexByNameResult) ThriftName() string {
  return "get_index_by_name_result"
}

func (p *GetIndexByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetIndexByNameResult(%+v)", *p)
}

func (p *GetIndexByNameResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetIndexByNameResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetIndexByNameResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetIndexByNameResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - MaxIndexes
 */
type GetIndexesArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  MaxIndexes int16 "max_indexes"; // 3
}

func NewGetIndexesArgs() *GetIndexesArgs {
  output := &GetIndexesArgs{
    TStruct:thrift.NewTStruct("get_indexes_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("max_indexes", thrift.I16, 3),
    }),
  }
  {
    output.MaxIndexes = -1
  }
  return output
}

func (p *GetIndexesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "max_indexes" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1618, err1619 := iprot.ReadString()
  if err1619 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1619); }
  p.DbName = v1618
  return err
}

func (p *GetIndexesArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetIndexesArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1620, err1621 := iprot.ReadString()
  if err1621 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1621); }
  p.TblName = v1620
  return err
}

func (p *GetIndexesArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetIndexesArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1622, err1623 := iprot.ReadI16()
  if err1623 != nil { return thrift.NewTProtocolExceptionReadField(3, "max_indexes", p.ThriftName(), err1623); }
  p.MaxIndexes = v1622
  return err
}

func (p *GetIndexesArgs) ReadFieldMaxIndexes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetIndexesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_indexes_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetIndexesArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetIndexesArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetIndexesArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetIndexesArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.MaxIndexes) == 0 { return nil}
  err = oprot.WriteFieldBegin("max_indexes", thrift.I16, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_indexes", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.MaxIndexes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_indexes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_indexes", p.ThriftName(), err); }
  return err
}

func (p *GetIndexesArgs) WriteFieldMaxIndexes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetIndexesArgs) TStructName() string {
  return "GetIndexesArgs"
}

func (p *GetIndexesArgs) ThriftName() string {
  return "get_indexes_args"
}

func (p *GetIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetIndexesArgs(%+v)", *p)
}

func (p *GetIndexesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetIndexesArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.MaxIndexes != data.MaxIndexes {
    if p.MaxIndexes < data.MaxIndexes {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetIndexesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.MaxIndexes
  }
  return nil
}

func (p *GetIndexesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("max_indexes", thrift.I16, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 *  - O2
 */
type GetIndexesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *NoSuchObjectException "o1"; // 1
  O2 *MetaException "o2"; // 2
}

func NewGetIndexesResult() *GetIndexesResult {
  output := &GetIndexesResult{
    TStruct:thrift.NewTStruct("get_indexes_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetIndexesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1629, _size1626, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1629, _size1626)
  for _i1630:= 0; _i1630 < _size1626; _i1630++ {
    _elem1631 := NewIndex()
    err1634 := _elem1631.Read(iprot)
    if err1634 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1631Index", err1634); }
    p.Success.Push(_elem1631)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetIndexesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetIndexesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewNoSuchObjectException()
  err1637 := p.O1.Read(iprot)
  if err1637 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1NoSuchObjectException", err1637); }
  return err
}

func (p *GetIndexesResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetIndexesResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1640 := p.O2.Read(iprot)
  if err1640 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1640); }
  return err
}

func (p *GetIndexesResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetIndexesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_indexes_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1641 := range p.Success.Iter() {
      Iter1642 := Iter1641.(*Index)
      err = Iter1642.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Index", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetIndexesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetIndexesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("NoSuchObjectException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetIndexesResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetIndexesResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetIndexesResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetIndexesResult) TStructName() string {
  return "GetIndexesResult"
}

func (p *GetIndexesResult) ThriftName() string {
  return "get_indexes_result"
}

func (p *GetIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetIndexesResult(%+v)", *p)
}

func (p *GetIndexesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetIndexesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetIndexesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  case 2: return p.O2
  }
  return nil
}

func (p *GetIndexesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    thrift.NewTField("o2", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - DbName
 *  - TblName
 *  - MaxIndexes
 */
type GetIndexNamesArgs struct {
  thrift.TStruct
  DbName string "db_name"; // 1
  TblName string "tbl_name"; // 2
  MaxIndexes int16 "max_indexes"; // 3
}

func NewGetIndexNamesArgs() *GetIndexNamesArgs {
  output := &GetIndexNamesArgs{
    TStruct:thrift.NewTStruct("get_index_names_args", []thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("max_indexes", thrift.I16, 3),
    }),
  }
  {
    output.MaxIndexes = -1
  }
  return output
}

func (p *GetIndexNamesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "db_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tbl_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "max_indexes" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexNamesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1643, err1644 := iprot.ReadString()
  if err1644 != nil { return thrift.NewTProtocolExceptionReadField(1, "db_name", p.ThriftName(), err1644); }
  p.DbName = v1643
  return err
}

func (p *GetIndexNamesArgs) ReadFieldDbName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetIndexNamesArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1645, err1646 := iprot.ReadString()
  if err1646 != nil { return thrift.NewTProtocolExceptionReadField(2, "tbl_name", p.ThriftName(), err1646); }
  p.TblName = v1645
  return err
}

func (p *GetIndexNamesArgs) ReadFieldTblName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetIndexNamesArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1647, err1648 := iprot.ReadI16()
  if err1648 != nil { return thrift.NewTProtocolExceptionReadField(3, "max_indexes", p.ThriftName(), err1648); }
  p.MaxIndexes = v1647
  return err
}

func (p *GetIndexNamesArgs) ReadFieldMaxIndexes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetIndexNamesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_index_names_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexNamesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.DbName) < 1 { return nil}
  err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DbName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "db_name", p.ThriftName(), err); }
  return err
}

func (p *GetIndexNamesArgs) WriteFieldDbName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetIndexNamesArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TblName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TblName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tbl_name", p.ThriftName(), err); }
  return err
}

func (p *GetIndexNamesArgs) WriteFieldTblName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetIndexNamesArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.MaxIndexes) == 0 { return nil}
  err = oprot.WriteFieldBegin("max_indexes", thrift.I16, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_indexes", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.MaxIndexes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_indexes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "max_indexes", p.ThriftName(), err); }
  return err
}

func (p *GetIndexNamesArgs) WriteFieldMaxIndexes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetIndexNamesArgs) TStructName() string {
  return "GetIndexNamesArgs"
}

func (p *GetIndexNamesArgs) ThriftName() string {
  return "get_index_names_args"
}

func (p *GetIndexNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetIndexNamesArgs(%+v)", *p)
}

func (p *GetIndexNamesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetIndexNamesArgs)
  if !ok {
    return 0, false
  }
  if p.DbName != data.DbName {
    if p.DbName < data.DbName {
      return -1, true
    }
    return 1, true
  }
  if p.TblName != data.TblName {
    if p.TblName < data.TblName {
      return -1, true
    }
    return 1, true
  }
  if p.MaxIndexes != data.MaxIndexes {
    if p.MaxIndexes < data.MaxIndexes {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetIndexNamesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DbName
  case 2: return p.TblName
  case 3: return p.MaxIndexes
  }
  return nil
}

func (p *GetIndexNamesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("db_name", thrift.STRING, 1),
    thrift.NewTField("tbl_name", thrift.STRING, 2),
    thrift.NewTField("max_indexes", thrift.I16, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O2
 */
type GetIndexNamesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O2 *MetaException "o2"; // 1
}

func NewGetIndexNamesResult() *GetIndexNamesResult {
  output := &GetIndexNamesResult{
    TStruct:thrift.NewTStruct("get_index_names_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o2", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetIndexNamesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o2" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexNamesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1654, _size1651, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1654, _size1651)
  for _i1655:= 0; _i1655 < _size1651; _i1655++ {
    v1657, err1658 := iprot.ReadString()
    if err1658 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1656", "", err1658); }
    _elem1656 := v1657
    p.Success.Push(_elem1656)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetIndexNamesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetIndexNamesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O2 = NewMetaException()
  err1661 := p.O2.Read(iprot)
  if err1661 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O2MetaException", err1661); }
  return err
}

func (p *GetIndexNamesResult) ReadFieldO2(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetIndexNamesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_index_names_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O2 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetIndexNamesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1662 := range p.Success.Iter() {
      Iter1663 := Iter1662.(string)
      err = oprot.WriteString(string(Iter1663))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1663", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetIndexNamesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetIndexNamesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O2 != nil {
    err = oprot.WriteFieldBegin("o2", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o2", p.ThriftName(), err); }
    err = p.O2.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o2", p.ThriftName(), err); }
  }
  return err
}

func (p *GetIndexNamesResult) WriteFieldO2(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetIndexNamesResult) TStructName() string {
  return "GetIndexNamesResult"
}

func (p *GetIndexNamesResult) ThriftName() string {
  return "get_index_names_result"
}

func (p *GetIndexNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetIndexNamesResult(%+v)", *p)
}

func (p *GetIndexNamesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetIndexNamesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O2.CompareTo(data.O2); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetIndexNamesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O2
  }
  return nil
}

func (p *GetIndexNamesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o2", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Role
 */
type CreateRoleArgs struct {
  thrift.TStruct
  Role *Role "role"; // 1
}

func NewCreateRoleArgs() *CreateRoleArgs {
  output := &CreateRoleArgs{
    TStruct:thrift.NewTStruct("create_role_args", []thrift.TField{
    thrift.NewTField("role", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *CreateRoleArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "role" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateRoleArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Role = NewRole()
  err1666 := p.Role.Read(iprot)
  if err1666 != nil { return thrift.NewTProtocolExceptionReadStruct("p.RoleRole", err1666); }
  return err
}

func (p *CreateRoleArgs) ReadFieldRole(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CreateRoleArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("create_role_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateRoleArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Role != nil {
    err = oprot.WriteFieldBegin("role", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role", p.ThriftName(), err); }
    err = p.Role.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Role", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateRoleArgs) WriteFieldRole(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CreateRoleArgs) TStructName() string {
  return "CreateRoleArgs"
}

func (p *CreateRoleArgs) ThriftName() string {
  return "create_role_args"
}

func (p *CreateRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateRoleArgs(%+v)", *p)
}

func (p *CreateRoleArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateRoleArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Role.CompareTo(data.Role); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CreateRoleArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Role
  }
  return nil
}

func (p *CreateRoleArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("role", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type CreateRoleResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewCreateRoleResult() *CreateRoleResult {
  output := &CreateRoleResult{
    TStruct:thrift.NewTStruct("create_role_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *CreateRoleResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateRoleResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1667, err1668 := iprot.ReadBool()
  if err1668 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1668); }
  p.Success = v1667
  return err
}

func (p *CreateRoleResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *CreateRoleResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1671 := p.O1.Read(iprot)
  if err1671 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1671); }
  return err
}

func (p *CreateRoleResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CreateRoleResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("create_role_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateRoleResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *CreateRoleResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *CreateRoleResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateRoleResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CreateRoleResult) TStructName() string {
  return "CreateRoleResult"
}

func (p *CreateRoleResult) ThriftName() string {
  return "create_role_result"
}

func (p *CreateRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateRoleResult(%+v)", *p)
}

func (p *CreateRoleResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateRoleResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CreateRoleResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *CreateRoleResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - RoleName
 */
type DropRoleArgs struct {
  thrift.TStruct
  RoleName string "role_name"; // 1
}

func NewDropRoleArgs() *DropRoleArgs {
  output := &DropRoleArgs{
    TStruct:thrift.NewTStruct("drop_role_args", []thrift.TField{
    thrift.NewTField("role_name", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *DropRoleArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "role_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropRoleArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1672, err1673 := iprot.ReadString()
  if err1673 != nil { return thrift.NewTProtocolExceptionReadField(1, "role_name", p.ThriftName(), err1673); }
  p.RoleName = v1672
  return err
}

func (p *DropRoleArgs) ReadFieldRoleName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropRoleArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_role_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropRoleArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.RoleName) < 1 { return nil}
  err = oprot.WriteFieldBegin("role_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.RoleName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role_name", p.ThriftName(), err); }
  return err
}

func (p *DropRoleArgs) WriteFieldRoleName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropRoleArgs) TStructName() string {
  return "DropRoleArgs"
}

func (p *DropRoleArgs) ThriftName() string {
  return "drop_role_args"
}

func (p *DropRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropRoleArgs(%+v)", *p)
}

func (p *DropRoleArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropRoleArgs)
  if !ok {
    return 0, false
  }
  if p.RoleName != data.RoleName {
    if p.RoleName < data.RoleName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DropRoleArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.RoleName
  }
  return nil
}

func (p *DropRoleArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("role_name", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type DropRoleResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewDropRoleResult() *DropRoleResult {
  output := &DropRoleResult{
    TStruct:thrift.NewTStruct("drop_role_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DropRoleResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DropRoleResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1674, err1675 := iprot.ReadBool()
  if err1675 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1675); }
  p.Success = v1674
  return err
}

func (p *DropRoleResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *DropRoleResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1678 := p.O1.Read(iprot)
  if err1678 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1678); }
  return err
}

func (p *DropRoleResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DropRoleResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("drop_role_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DropRoleResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *DropRoleResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *DropRoleResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *DropRoleResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DropRoleResult) TStructName() string {
  return "DropRoleResult"
}

func (p *DropRoleResult) ThriftName() string {
  return "drop_role_result"
}

func (p *DropRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropRoleResult(%+v)", *p)
}

func (p *DropRoleResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DropRoleResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DropRoleResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *DropRoleResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

type GetRoleNamesArgs struct {
  thrift.TStruct
}

func NewGetRoleNamesArgs() *GetRoleNamesArgs {
  output := &GetRoleNamesArgs{
    TStruct:thrift.NewTStruct("get_role_names_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetRoleNamesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRoleNamesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_role_names_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRoleNamesArgs) TStructName() string {
  return "GetRoleNamesArgs"
}

func (p *GetRoleNamesArgs) ThriftName() string {
  return "get_role_names_args"
}

func (p *GetRoleNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRoleNamesArgs(%+v)", *p)
}

func (p *GetRoleNamesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetRoleNamesArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetRoleNamesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetRoleNamesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetRoleNamesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGetRoleNamesResult() *GetRoleNamesResult {
  output := &GetRoleNamesResult{
    TStruct:thrift.NewTStruct("get_role_names_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRoleNamesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRoleNamesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1684, _size1681, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1684, _size1681)
  for _i1685:= 0; _i1685 < _size1681; _i1685++ {
    v1687, err1688 := iprot.ReadString()
    if err1688 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1686", "", err1688); }
    _elem1686 := v1687
    p.Success.Push(_elem1686)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRoleNamesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRoleNamesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1691 := p.O1.Read(iprot)
  if err1691 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1691); }
  return err
}

func (p *GetRoleNamesResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRoleNamesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_role_names_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRoleNamesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1692 := range p.Success.Iter() {
      Iter1693 := Iter1692.(string)
      err = oprot.WriteString(string(Iter1693))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1693", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRoleNamesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRoleNamesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRoleNamesResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRoleNamesResult) TStructName() string {
  return "GetRoleNamesResult"
}

func (p *GetRoleNamesResult) ThriftName() string {
  return "get_role_names_result"
}

func (p *GetRoleNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRoleNamesResult(%+v)", *p)
}

func (p *GetRoleNamesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRoleNamesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRoleNamesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetRoleNamesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - RoleName
 *  - PrincipalName
 *  - PrincipalType
 *  - Grantor
 *  - GrantorType
 *  - GrantOption
 */
type GrantRoleArgs struct {
  thrift.TStruct
  RoleName string "role_name"; // 1
  PrincipalName string "principal_name"; // 2
  PrincipalType PrincipalType "principal_type"; // 3
  Grantor string "grantor"; // 4
  GrantorType PrincipalType "grantorType"; // 5
  GrantOption bool "grant_option"; // 6
}

func NewGrantRoleArgs() *GrantRoleArgs {
  output := &GrantRoleArgs{
    TStruct:thrift.NewTStruct("grant_role_args", []thrift.TField{
    thrift.NewTField("role_name", thrift.STRING, 1),
    thrift.NewTField("principal_name", thrift.STRING, 2),
    thrift.NewTField("principal_type", thrift.I32, 3),
    thrift.NewTField("grantor", thrift.STRING, 4),
    thrift.NewTField("grantorType", thrift.I32, 5),
    thrift.NewTField("grant_option", thrift.BOOL, 6),
    }),
  }
  {
  }
  return output
}

func (p *GrantRoleArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "role_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "principal_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "principal_type" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "grantor" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "grantorType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "grant_option" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GrantRoleArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1694, err1695 := iprot.ReadString()
  if err1695 != nil { return thrift.NewTProtocolExceptionReadField(1, "role_name", p.ThriftName(), err1695); }
  p.RoleName = v1694
  return err
}

func (p *GrantRoleArgs) ReadFieldRoleName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GrantRoleArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1696, err1697 := iprot.ReadString()
  if err1697 != nil { return thrift.NewTProtocolExceptionReadField(2, "principal_name", p.ThriftName(), err1697); }
  p.PrincipalName = v1696
  return err
}

func (p *GrantRoleArgs) ReadFieldPrincipalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GrantRoleArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1698, err1699 := iprot.ReadI32()
  if err1699 != nil { return thrift.NewTProtocolExceptionReadField(3, "principal_type", p.ThriftName(), err1699); }
  p.PrincipalType = PrincipalType(v1698)
  return err
}

func (p *GrantRoleArgs) ReadFieldPrincipalType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GrantRoleArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1700, err1701 := iprot.ReadString()
  if err1701 != nil { return thrift.NewTProtocolExceptionReadField(4, "grantor", p.ThriftName(), err1701); }
  p.Grantor = v1700
  return err
}

func (p *GrantRoleArgs) ReadFieldGrantor(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GrantRoleArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1702, err1703 := iprot.ReadI32()
  if err1703 != nil { return thrift.NewTProtocolExceptionReadField(5, "grantorType", p.ThriftName(), err1703); }
  p.GrantorType = PrincipalType(v1702)
  return err
}

func (p *GrantRoleArgs) ReadFieldGrantorType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *GrantRoleArgs) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1704, err1705 := iprot.ReadBool()
  if err1705 != nil { return thrift.NewTProtocolExceptionReadField(6, "grant_option", p.ThriftName(), err1705); }
  p.GrantOption = v1704
  return err
}

func (p *GrantRoleArgs) ReadFieldGrantOption(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *GrantRoleArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("grant_role_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GrantRoleArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.RoleName) < 1 { return nil}
  err = oprot.WriteFieldBegin("role_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.RoleName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role_name", p.ThriftName(), err); }
  return err
}

func (p *GrantRoleArgs) WriteFieldRoleName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GrantRoleArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.PrincipalName) < 1 { return nil}
  err = oprot.WriteFieldBegin("principal_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PrincipalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_name", p.ThriftName(), err); }
  return err
}

func (p *GrantRoleArgs) WriteFieldPrincipalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GrantRoleArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("principal_type", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "principal_type", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.PrincipalType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "principal_type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "principal_type", p.ThriftName(), err); }
  return err
}

func (p *GrantRoleArgs) WriteFieldPrincipalType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GrantRoleArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Grantor) < 1 { return nil}
  err = oprot.WriteFieldBegin("grantor", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "grantor", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Grantor))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "grantor", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "grantor", p.ThriftName(), err); }
  return err
}

func (p *GrantRoleArgs) WriteFieldGrantor(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GrantRoleArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("grantorType", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "grantorType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.GrantorType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "grantorType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "grantorType", p.ThriftName(), err); }
  return err
}

func (p *GrantRoleArgs) WriteFieldGrantorType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *GrantRoleArgs) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("grant_option", thrift.BOOL, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "grant_option", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.GrantOption))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "grant_option", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "grant_option", p.ThriftName(), err); }
  return err
}

func (p *GrantRoleArgs) WriteFieldGrantOption(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *GrantRoleArgs) TStructName() string {
  return "GrantRoleArgs"
}

func (p *GrantRoleArgs) ThriftName() string {
  return "grant_role_args"
}

func (p *GrantRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantRoleArgs(%+v)", *p)
}

func (p *GrantRoleArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GrantRoleArgs)
  if !ok {
    return 0, false
  }
  if p.RoleName != data.RoleName {
    if p.RoleName < data.RoleName {
      return -1, true
    }
    return 1, true
  }
  if p.PrincipalName != data.PrincipalName {
    if p.PrincipalName < data.PrincipalName {
      return -1, true
    }
    return 1, true
  }
  if p.PrincipalType != data.PrincipalType {
    if p.PrincipalType < data.PrincipalType {
      return -1, true
    }
    return 1, true
  }
  if p.Grantor != data.Grantor {
    if p.Grantor < data.Grantor {
      return -1, true
    }
    return 1, true
  }
  if p.GrantorType != data.GrantorType {
    if p.GrantorType < data.GrantorType {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.GrantOption, data.GrantOption); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *GrantRoleArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.RoleName
  case 2: return p.PrincipalName
  case 3: return p.PrincipalType
  case 4: return p.Grantor
  case 5: return p.GrantorType
  case 6: return p.GrantOption
  }
  return nil
}

func (p *GrantRoleArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("role_name", thrift.STRING, 1),
    thrift.NewTField("principal_name", thrift.STRING, 2),
    thrift.NewTField("principal_type", thrift.I32, 3),
    thrift.NewTField("grantor", thrift.STRING, 4),
    thrift.NewTField("grantorType", thrift.I32, 5),
    thrift.NewTField("grant_option", thrift.BOOL, 6),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GrantRoleResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGrantRoleResult() *GrantRoleResult {
  output := &GrantRoleResult{
    TStruct:thrift.NewTStruct("grant_role_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GrantRoleResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GrantRoleResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1706, err1707 := iprot.ReadBool()
  if err1707 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1707); }
  p.Success = v1706
  return err
}

func (p *GrantRoleResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GrantRoleResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1710 := p.O1.Read(iprot)
  if err1710 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1710); }
  return err
}

func (p *GrantRoleResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GrantRoleResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("grant_role_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GrantRoleResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GrantRoleResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GrantRoleResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GrantRoleResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GrantRoleResult) TStructName() string {
  return "GrantRoleResult"
}

func (p *GrantRoleResult) ThriftName() string {
  return "grant_role_result"
}

func (p *GrantRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantRoleResult(%+v)", *p)
}

func (p *GrantRoleResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GrantRoleResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GrantRoleResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GrantRoleResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - RoleName
 *  - PrincipalName
 *  - PrincipalType
 */
type RevokeRoleArgs struct {
  thrift.TStruct
  RoleName string "role_name"; // 1
  PrincipalName string "principal_name"; // 2
  PrincipalType PrincipalType "principal_type"; // 3
}

func NewRevokeRoleArgs() *RevokeRoleArgs {
  output := &RevokeRoleArgs{
    TStruct:thrift.NewTStruct("revoke_role_args", []thrift.TField{
    thrift.NewTField("role_name", thrift.STRING, 1),
    thrift.NewTField("principal_name", thrift.STRING, 2),
    thrift.NewTField("principal_type", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *RevokeRoleArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "role_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "principal_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "principal_type" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RevokeRoleArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1711, err1712 := iprot.ReadString()
  if err1712 != nil { return thrift.NewTProtocolExceptionReadField(1, "role_name", p.ThriftName(), err1712); }
  p.RoleName = v1711
  return err
}

func (p *RevokeRoleArgs) ReadFieldRoleName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RevokeRoleArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1713, err1714 := iprot.ReadString()
  if err1714 != nil { return thrift.NewTProtocolExceptionReadField(2, "principal_name", p.ThriftName(), err1714); }
  p.PrincipalName = v1713
  return err
}

func (p *RevokeRoleArgs) ReadFieldPrincipalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RevokeRoleArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1715, err1716 := iprot.ReadI32()
  if err1716 != nil { return thrift.NewTProtocolExceptionReadField(3, "principal_type", p.ThriftName(), err1716); }
  p.PrincipalType = PrincipalType(v1715)
  return err
}

func (p *RevokeRoleArgs) ReadFieldPrincipalType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RevokeRoleArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("revoke_role_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RevokeRoleArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.RoleName) < 1 { return nil}
  err = oprot.WriteFieldBegin("role_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.RoleName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "role_name", p.ThriftName(), err); }
  return err
}

func (p *RevokeRoleArgs) WriteFieldRoleName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RevokeRoleArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.PrincipalName) < 1 { return nil}
  err = oprot.WriteFieldBegin("principal_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PrincipalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_name", p.ThriftName(), err); }
  return err
}

func (p *RevokeRoleArgs) WriteFieldPrincipalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RevokeRoleArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("principal_type", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "principal_type", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.PrincipalType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "principal_type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "principal_type", p.ThriftName(), err); }
  return err
}

func (p *RevokeRoleArgs) WriteFieldPrincipalType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RevokeRoleArgs) TStructName() string {
  return "RevokeRoleArgs"
}

func (p *RevokeRoleArgs) ThriftName() string {
  return "revoke_role_args"
}

func (p *RevokeRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RevokeRoleArgs(%+v)", *p)
}

func (p *RevokeRoleArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RevokeRoleArgs)
  if !ok {
    return 0, false
  }
  if p.RoleName != data.RoleName {
    if p.RoleName < data.RoleName {
      return -1, true
    }
    return 1, true
  }
  if p.PrincipalName != data.PrincipalName {
    if p.PrincipalName < data.PrincipalName {
      return -1, true
    }
    return 1, true
  }
  if p.PrincipalType != data.PrincipalType {
    if p.PrincipalType < data.PrincipalType {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RevokeRoleArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.RoleName
  case 2: return p.PrincipalName
  case 3: return p.PrincipalType
  }
  return nil
}

func (p *RevokeRoleArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("role_name", thrift.STRING, 1),
    thrift.NewTField("principal_name", thrift.STRING, 2),
    thrift.NewTField("principal_type", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type RevokeRoleResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewRevokeRoleResult() *RevokeRoleResult {
  output := &RevokeRoleResult{
    TStruct:thrift.NewTStruct("revoke_role_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *RevokeRoleResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RevokeRoleResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1717, err1718 := iprot.ReadBool()
  if err1718 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1718); }
  p.Success = v1717
  return err
}

func (p *RevokeRoleResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RevokeRoleResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1721 := p.O1.Read(iprot)
  if err1721 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1721); }
  return err
}

func (p *RevokeRoleResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RevokeRoleResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("revoke_role_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RevokeRoleResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RevokeRoleResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RevokeRoleResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *RevokeRoleResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RevokeRoleResult) TStructName() string {
  return "RevokeRoleResult"
}

func (p *RevokeRoleResult) ThriftName() string {
  return "revoke_role_result"
}

func (p *RevokeRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RevokeRoleResult(%+v)", *p)
}

func (p *RevokeRoleResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RevokeRoleResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *RevokeRoleResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *RevokeRoleResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - PrincipalName
 *  - PrincipalType
 */
type ListRolesArgs struct {
  thrift.TStruct
  PrincipalName string "principal_name"; // 1
  PrincipalType PrincipalType "principal_type"; // 2
}

func NewListRolesArgs() *ListRolesArgs {
  output := &ListRolesArgs{
    TStruct:thrift.NewTStruct("list_roles_args", []thrift.TField{
    thrift.NewTField("principal_name", thrift.STRING, 1),
    thrift.NewTField("principal_type", thrift.I32, 2),
    }),
  }
  {
  }
  return output
}

func (p *ListRolesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "principal_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "principal_type" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ListRolesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1722, err1723 := iprot.ReadString()
  if err1723 != nil { return thrift.NewTProtocolExceptionReadField(1, "principal_name", p.ThriftName(), err1723); }
  p.PrincipalName = v1722
  return err
}

func (p *ListRolesArgs) ReadFieldPrincipalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ListRolesArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1724, err1725 := iprot.ReadI32()
  if err1725 != nil { return thrift.NewTProtocolExceptionReadField(2, "principal_type", p.ThriftName(), err1725); }
  p.PrincipalType = PrincipalType(v1724)
  return err
}

func (p *ListRolesArgs) ReadFieldPrincipalType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ListRolesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("list_roles_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ListRolesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.PrincipalName) < 1 { return nil}
  err = oprot.WriteFieldBegin("principal_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "principal_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PrincipalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "principal_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "principal_name", p.ThriftName(), err); }
  return err
}

func (p *ListRolesArgs) WriteFieldPrincipalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ListRolesArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("principal_type", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_type", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.PrincipalType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_type", p.ThriftName(), err); }
  return err
}

func (p *ListRolesArgs) WriteFieldPrincipalType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ListRolesArgs) TStructName() string {
  return "ListRolesArgs"
}

func (p *ListRolesArgs) ThriftName() string {
  return "list_roles_args"
}

func (p *ListRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListRolesArgs(%+v)", *p)
}

func (p *ListRolesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ListRolesArgs)
  if !ok {
    return 0, false
  }
  if p.PrincipalName != data.PrincipalName {
    if p.PrincipalName < data.PrincipalName {
      return -1, true
    }
    return 1, true
  }
  if p.PrincipalType != data.PrincipalType {
    if p.PrincipalType < data.PrincipalType {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ListRolesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.PrincipalName
  case 2: return p.PrincipalType
  }
  return nil
}

func (p *ListRolesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("principal_name", thrift.STRING, 1),
    thrift.NewTField("principal_type", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type ListRolesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewListRolesResult() *ListRolesResult {
  output := &ListRolesResult{
    TStruct:thrift.NewTStruct("list_roles_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ListRolesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ListRolesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1731, _size1728, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1731, _size1728)
  for _i1732:= 0; _i1732 < _size1728; _i1732++ {
    _elem1733 := NewRole()
    err1736 := _elem1733.Read(iprot)
    if err1736 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1733Role", err1736); }
    p.Success.Push(_elem1733)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ListRolesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ListRolesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1739 := p.O1.Read(iprot)
  if err1739 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1739); }
  return err
}

func (p *ListRolesResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ListRolesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("list_roles_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ListRolesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1740 := range p.Success.Iter() {
      Iter1741 := Iter1740.(*Role)
      err = Iter1741.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Role", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *ListRolesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ListRolesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *ListRolesResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ListRolesResult) TStructName() string {
  return "ListRolesResult"
}

func (p *ListRolesResult) ThriftName() string {
  return "list_roles_result"
}

func (p *ListRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListRolesResult(%+v)", *p)
}

func (p *ListRolesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ListRolesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ListRolesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *ListRolesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - HiveObject
 *  - UserName
 *  - GroupNames
 */
type GetPrivilegeSetArgs struct {
  thrift.TStruct
  HiveObject *HiveObjectRef "hiveObject"; // 1
  UserName string "user_name"; // 2
  GroupNames thrift.TList "group_names"; // 3
}

func NewGetPrivilegeSetArgs() *GetPrivilegeSetArgs {
  output := &GetPrivilegeSetArgs{
    TStruct:thrift.NewTStruct("get_privilege_set_args", []thrift.TField{
    thrift.NewTField("hiveObject", thrift.STRUCT, 1),
    thrift.NewTField("user_name", thrift.STRING, 2),
    thrift.NewTField("group_names", thrift.LIST, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetPrivilegeSetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "hiveObject" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "user_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "group_names" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPrivilegeSetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.HiveObject = NewHiveObjectRef()
  err1744 := p.HiveObject.Read(iprot)
  if err1744 != nil { return thrift.NewTProtocolExceptionReadStruct("p.HiveObjectHiveObjectRef", err1744); }
  return err
}

func (p *GetPrivilegeSetArgs) ReadFieldHiveObject(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPrivilegeSetArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1745, err1746 := iprot.ReadString()
  if err1746 != nil { return thrift.NewTProtocolExceptionReadField(2, "user_name", p.ThriftName(), err1746); }
  p.UserName = v1745
  return err
}

func (p *GetPrivilegeSetArgs) ReadFieldUserName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetPrivilegeSetArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1752, _size1749, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.GroupNames", "", err)
  }
  p.GroupNames = thrift.NewTList(_etype1752, _size1749)
  for _i1753:= 0; _i1753 < _size1749; _i1753++ {
    v1755, err1756 := iprot.ReadString()
    if err1756 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1754", "", err1756); }
    _elem1754 := v1755
    p.GroupNames.Push(_elem1754)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetPrivilegeSetArgs) ReadFieldGroupNames(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetPrivilegeSetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_privilege_set_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPrivilegeSetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.HiveObject != nil {
    err = oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "hiveObject", p.ThriftName(), err); }
    err = p.HiveObject.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveObjectRef", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "hiveObject", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPrivilegeSetArgs) WriteFieldHiveObject(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPrivilegeSetArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.UserName) < 1 { return nil}
  err = oprot.WriteFieldBegin("user_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "user_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.UserName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "user_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "user_name", p.ThriftName(), err); }
  return err
}

func (p *GetPrivilegeSetArgs) WriteFieldUserName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetPrivilegeSetArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.GroupNames != nil {
    err = oprot.WriteFieldBegin("group_names", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "group_names", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.GroupNames.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1757 := range p.GroupNames.Iter() {
      Iter1758 := Iter1757.(string)
      err = oprot.WriteString(string(Iter1758))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1758", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "group_names", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPrivilegeSetArgs) WriteFieldGroupNames(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetPrivilegeSetArgs) TStructName() string {
  return "GetPrivilegeSetArgs"
}

func (p *GetPrivilegeSetArgs) ThriftName() string {
  return "get_privilege_set_args"
}

func (p *GetPrivilegeSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPrivilegeSetArgs(%+v)", *p)
}

func (p *GetPrivilegeSetArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPrivilegeSetArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.HiveObject.CompareTo(data.HiveObject); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.UserName != data.UserName {
    if p.UserName < data.UserName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.GroupNames.CompareTo(data.GroupNames); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPrivilegeSetArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.HiveObject
  case 2: return p.UserName
  case 3: return p.GroupNames
  }
  return nil
}

func (p *GetPrivilegeSetArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("hiveObject", thrift.STRUCT, 1),
    thrift.NewTField("user_name", thrift.STRING, 2),
    thrift.NewTField("group_names", thrift.LIST, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetPrivilegeSetResult struct {
  thrift.TStruct
  Success *PrincipalPrivilegeSet "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGetPrivilegeSetResult() *GetPrivilegeSetResult {
  output := &GetPrivilegeSetResult{
    TStruct:thrift.NewTStruct("get_privilege_set_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetPrivilegeSetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPrivilegeSetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewPrincipalPrivilegeSet()
  err1761 := p.Success.Read(iprot)
  if err1761 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessPrincipalPrivilegeSet", err1761); }
  return err
}

func (p *GetPrivilegeSetResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetPrivilegeSetResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1764 := p.O1.Read(iprot)
  if err1764 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1764); }
  return err
}

func (p *GetPrivilegeSetResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetPrivilegeSetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_privilege_set_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetPrivilegeSetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PrincipalPrivilegeSet", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPrivilegeSetResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetPrivilegeSetResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetPrivilegeSetResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetPrivilegeSetResult) TStructName() string {
  return "GetPrivilegeSetResult"
}

func (p *GetPrivilegeSetResult) ThriftName() string {
  return "get_privilege_set_result"
}

func (p *GetPrivilegeSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPrivilegeSetResult(%+v)", *p)
}

func (p *GetPrivilegeSetResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetPrivilegeSetResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetPrivilegeSetResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetPrivilegeSetResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - PrincipalName
 *  - PrincipalType
 *  - HiveObject
 */
type ListPrivilegesArgs struct {
  thrift.TStruct
  PrincipalName string "principal_name"; // 1
  PrincipalType PrincipalType "principal_type"; // 2
  HiveObject *HiveObjectRef "hiveObject"; // 3
}

func NewListPrivilegesArgs() *ListPrivilegesArgs {
  output := &ListPrivilegesArgs{
    TStruct:thrift.NewTStruct("list_privileges_args", []thrift.TField{
    thrift.NewTField("principal_name", thrift.STRING, 1),
    thrift.NewTField("principal_type", thrift.I32, 2),
    thrift.NewTField("hiveObject", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ListPrivilegesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "principal_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "principal_type" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "hiveObject" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ListPrivilegesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1765, err1766 := iprot.ReadString()
  if err1766 != nil { return thrift.NewTProtocolExceptionReadField(1, "principal_name", p.ThriftName(), err1766); }
  p.PrincipalName = v1765
  return err
}

func (p *ListPrivilegesArgs) ReadFieldPrincipalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ListPrivilegesArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1767, err1768 := iprot.ReadI32()
  if err1768 != nil { return thrift.NewTProtocolExceptionReadField(2, "principal_type", p.ThriftName(), err1768); }
  p.PrincipalType = PrincipalType(v1767)
  return err
}

func (p *ListPrivilegesArgs) ReadFieldPrincipalType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ListPrivilegesArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.HiveObject = NewHiveObjectRef()
  err1771 := p.HiveObject.Read(iprot)
  if err1771 != nil { return thrift.NewTProtocolExceptionReadStruct("p.HiveObjectHiveObjectRef", err1771); }
  return err
}

func (p *ListPrivilegesArgs) ReadFieldHiveObject(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ListPrivilegesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("list_privileges_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ListPrivilegesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.PrincipalName) < 1 { return nil}
  err = oprot.WriteFieldBegin("principal_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "principal_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PrincipalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "principal_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "principal_name", p.ThriftName(), err); }
  return err
}

func (p *ListPrivilegesArgs) WriteFieldPrincipalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ListPrivilegesArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("principal_type", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_type", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.PrincipalType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "principal_type", p.ThriftName(), err); }
  return err
}

func (p *ListPrivilegesArgs) WriteFieldPrincipalType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ListPrivilegesArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.HiveObject != nil {
    err = oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "hiveObject", p.ThriftName(), err); }
    err = p.HiveObject.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveObjectRef", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "hiveObject", p.ThriftName(), err); }
  }
  return err
}

func (p *ListPrivilegesArgs) WriteFieldHiveObject(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ListPrivilegesArgs) TStructName() string {
  return "ListPrivilegesArgs"
}

func (p *ListPrivilegesArgs) ThriftName() string {
  return "list_privileges_args"
}

func (p *ListPrivilegesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListPrivilegesArgs(%+v)", *p)
}

func (p *ListPrivilegesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ListPrivilegesArgs)
  if !ok {
    return 0, false
  }
  if p.PrincipalName != data.PrincipalName {
    if p.PrincipalName < data.PrincipalName {
      return -1, true
    }
    return 1, true
  }
  if p.PrincipalType != data.PrincipalType {
    if p.PrincipalType < data.PrincipalType {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.HiveObject.CompareTo(data.HiveObject); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ListPrivilegesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.PrincipalName
  case 2: return p.PrincipalType
  case 3: return p.HiveObject
  }
  return nil
}

func (p *ListPrivilegesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("principal_name", thrift.STRING, 1),
    thrift.NewTField("principal_type", thrift.I32, 2),
    thrift.NewTField("hiveObject", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type ListPrivilegesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewListPrivilegesResult() *ListPrivilegesResult {
  output := &ListPrivilegesResult{
    TStruct:thrift.NewTStruct("list_privileges_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ListPrivilegesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ListPrivilegesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1777, _size1774, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1777, _size1774)
  for _i1778:= 0; _i1778 < _size1774; _i1778++ {
    _elem1779 := NewHiveObjectPrivilege()
    err1782 := _elem1779.Read(iprot)
    if err1782 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1779HiveObjectPrivilege", err1782); }
    p.Success.Push(_elem1779)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ListPrivilegesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ListPrivilegesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1785 := p.O1.Read(iprot)
  if err1785 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1785); }
  return err
}

func (p *ListPrivilegesResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ListPrivilegesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("list_privileges_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ListPrivilegesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1786 := range p.Success.Iter() {
      Iter1787 := Iter1786.(*HiveObjectPrivilege)
      err = Iter1787.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HiveObjectPrivilege", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *ListPrivilegesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ListPrivilegesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *ListPrivilegesResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ListPrivilegesResult) TStructName() string {
  return "ListPrivilegesResult"
}

func (p *ListPrivilegesResult) ThriftName() string {
  return "list_privileges_result"
}

func (p *ListPrivilegesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListPrivilegesResult(%+v)", *p)
}

func (p *ListPrivilegesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ListPrivilegesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ListPrivilegesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *ListPrivilegesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Privileges
 */
type GrantPrivilegesArgs struct {
  thrift.TStruct
  Privileges *PrivilegeBag "privileges"; // 1
}

func NewGrantPrivilegesArgs() *GrantPrivilegesArgs {
  output := &GrantPrivilegesArgs{
    TStruct:thrift.NewTStruct("grant_privileges_args", []thrift.TField{
    thrift.NewTField("privileges", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GrantPrivilegesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "privileges" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GrantPrivilegesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Privileges = NewPrivilegeBag()
  err1790 := p.Privileges.Read(iprot)
  if err1790 != nil { return thrift.NewTProtocolExceptionReadStruct("p.PrivilegesPrivilegeBag", err1790); }
  return err
}

func (p *GrantPrivilegesArgs) ReadFieldPrivileges(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GrantPrivilegesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("grant_privileges_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GrantPrivilegesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Privileges != nil {
    err = oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "privileges", p.ThriftName(), err); }
    err = p.Privileges.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PrivilegeBag", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "privileges", p.ThriftName(), err); }
  }
  return err
}

func (p *GrantPrivilegesArgs) WriteFieldPrivileges(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GrantPrivilegesArgs) TStructName() string {
  return "GrantPrivilegesArgs"
}

func (p *GrantPrivilegesArgs) ThriftName() string {
  return "grant_privileges_args"
}

func (p *GrantPrivilegesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantPrivilegesArgs(%+v)", *p)
}

func (p *GrantPrivilegesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GrantPrivilegesArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Privileges.CompareTo(data.Privileges); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GrantPrivilegesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Privileges
  }
  return nil
}

func (p *GrantPrivilegesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("privileges", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GrantPrivilegesResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGrantPrivilegesResult() *GrantPrivilegesResult {
  output := &GrantPrivilegesResult{
    TStruct:thrift.NewTStruct("grant_privileges_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GrantPrivilegesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GrantPrivilegesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1791, err1792 := iprot.ReadBool()
  if err1792 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1792); }
  p.Success = v1791
  return err
}

func (p *GrantPrivilegesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GrantPrivilegesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1795 := p.O1.Read(iprot)
  if err1795 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1795); }
  return err
}

func (p *GrantPrivilegesResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GrantPrivilegesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("grant_privileges_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GrantPrivilegesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GrantPrivilegesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GrantPrivilegesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GrantPrivilegesResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GrantPrivilegesResult) TStructName() string {
  return "GrantPrivilegesResult"
}

func (p *GrantPrivilegesResult) ThriftName() string {
  return "grant_privileges_result"
}

func (p *GrantPrivilegesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantPrivilegesResult(%+v)", *p)
}

func (p *GrantPrivilegesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GrantPrivilegesResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GrantPrivilegesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GrantPrivilegesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Privileges
 */
type RevokePrivilegesArgs struct {
  thrift.TStruct
  Privileges *PrivilegeBag "privileges"; // 1
}

func NewRevokePrivilegesArgs() *RevokePrivilegesArgs {
  output := &RevokePrivilegesArgs{
    TStruct:thrift.NewTStruct("revoke_privileges_args", []thrift.TField{
    thrift.NewTField("privileges", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *RevokePrivilegesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "privileges" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RevokePrivilegesArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Privileges = NewPrivilegeBag()
  err1798 := p.Privileges.Read(iprot)
  if err1798 != nil { return thrift.NewTProtocolExceptionReadStruct("p.PrivilegesPrivilegeBag", err1798); }
  return err
}

func (p *RevokePrivilegesArgs) ReadFieldPrivileges(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RevokePrivilegesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("revoke_privileges_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RevokePrivilegesArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Privileges != nil {
    err = oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "privileges", p.ThriftName(), err); }
    err = p.Privileges.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PrivilegeBag", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "privileges", p.ThriftName(), err); }
  }
  return err
}

func (p *RevokePrivilegesArgs) WriteFieldPrivileges(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RevokePrivilegesArgs) TStructName() string {
  return "RevokePrivilegesArgs"
}

func (p *RevokePrivilegesArgs) ThriftName() string {
  return "revoke_privileges_args"
}

func (p *RevokePrivilegesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RevokePrivilegesArgs(%+v)", *p)
}

func (p *RevokePrivilegesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RevokePrivilegesArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Privileges.CompareTo(data.Privileges); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *RevokePrivilegesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Privileges
  }
  return nil
}

func (p *RevokePrivilegesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("privileges", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type RevokePrivilegesResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewRevokePrivilegesResult() *RevokePrivilegesResult {
  output := &RevokePrivilegesResult{
    TStruct:thrift.NewTStruct("revoke_privileges_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *RevokePrivilegesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RevokePrivilegesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1799, err1800 := iprot.ReadBool()
  if err1800 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1800); }
  p.Success = v1799
  return err
}

func (p *RevokePrivilegesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RevokePrivilegesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1803 := p.O1.Read(iprot)
  if err1803 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1803); }
  return err
}

func (p *RevokePrivilegesResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RevokePrivilegesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("revoke_privileges_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RevokePrivilegesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RevokePrivilegesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RevokePrivilegesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *RevokePrivilegesResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RevokePrivilegesResult) TStructName() string {
  return "RevokePrivilegesResult"
}

func (p *RevokePrivilegesResult) ThriftName() string {
  return "revoke_privileges_result"
}

func (p *RevokePrivilegesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RevokePrivilegesResult(%+v)", *p)
}

func (p *RevokePrivilegesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RevokePrivilegesResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *RevokePrivilegesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *RevokePrivilegesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - RenewerKerberosPrincipalName
 */
type GetDelegationTokenArgs struct {
  thrift.TStruct
  RenewerKerberosPrincipalName string "renewer_kerberos_principal_name"; // 1
}

func NewGetDelegationTokenArgs() *GetDelegationTokenArgs {
  output := &GetDelegationTokenArgs{
    TStruct:thrift.NewTStruct("get_delegation_token_args", []thrift.TField{
    thrift.NewTField("renewer_kerberos_principal_name", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetDelegationTokenArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "renewer_kerberos_principal_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1804, err1805 := iprot.ReadString()
  if err1805 != nil { return thrift.NewTProtocolExceptionReadField(1, "renewer_kerberos_principal_name", p.ThriftName(), err1805); }
  p.RenewerKerberosPrincipalName = v1804
  return err
}

func (p *GetDelegationTokenArgs) ReadFieldRenewerKerberosPrincipalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetDelegationTokenArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_delegation_token_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.RenewerKerberosPrincipalName) < 1 { return nil}
  err = oprot.WriteFieldBegin("renewer_kerberos_principal_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "renewer_kerberos_principal_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.RenewerKerberosPrincipalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "renewer_kerberos_principal_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "renewer_kerberos_principal_name", p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenArgs) WriteFieldRenewerKerberosPrincipalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetDelegationTokenArgs) TStructName() string {
  return "GetDelegationTokenArgs"
}

func (p *GetDelegationTokenArgs) ThriftName() string {
  return "get_delegation_token_args"
}

func (p *GetDelegationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDelegationTokenArgs(%+v)", *p)
}

func (p *GetDelegationTokenArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDelegationTokenArgs)
  if !ok {
    return 0, false
  }
  if p.RenewerKerberosPrincipalName != data.RenewerKerberosPrincipalName {
    if p.RenewerKerberosPrincipalName < data.RenewerKerberosPrincipalName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetDelegationTokenArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.RenewerKerberosPrincipalName
  }
  return nil
}

func (p *GetDelegationTokenArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("renewer_kerberos_principal_name", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetDelegationTokenResult struct {
  thrift.TStruct
  Success string "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGetDelegationTokenResult() *GetDelegationTokenResult {
  output := &GetDelegationTokenResult{
    TStruct:thrift.NewTStruct("get_delegation_token_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetDelegationTokenResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1806, err1807 := iprot.ReadString()
  if err1807 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1807); }
  p.Success = v1806
  return err
}

func (p *GetDelegationTokenResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetDelegationTokenResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1810 := p.O1.Read(iprot)
  if err1810 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1810); }
  return err
}

func (p *GetDelegationTokenResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetDelegationTokenResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_delegation_token_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Success) < 1 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetDelegationTokenResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetDelegationTokenResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetDelegationTokenResult) TStructName() string {
  return "GetDelegationTokenResult"
}

func (p *GetDelegationTokenResult) ThriftName() string {
  return "get_delegation_token_result"
}

func (p *GetDelegationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDelegationTokenResult(%+v)", *p)
}

func (p *GetDelegationTokenResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDelegationTokenResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetDelegationTokenResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetDelegationTokenResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - RenewerKerberosPrincipalName
 *  - TokenSignature
 */
type GetDelegationTokenWithSignatureArgs struct {
  thrift.TStruct
  RenewerKerberosPrincipalName string "renewer_kerberos_principal_name"; // 1
  TokenSignature string "token_signature"; // 2
}

func NewGetDelegationTokenWithSignatureArgs() *GetDelegationTokenWithSignatureArgs {
  output := &GetDelegationTokenWithSignatureArgs{
    TStruct:thrift.NewTStruct("get_delegation_token_with_signature_args", []thrift.TField{
    thrift.NewTField("renewer_kerberos_principal_name", thrift.STRING, 1),
    thrift.NewTField("token_signature", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetDelegationTokenWithSignatureArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "renewer_kerberos_principal_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "token_signature" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenWithSignatureArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1811, err1812 := iprot.ReadString()
  if err1812 != nil { return thrift.NewTProtocolExceptionReadField(1, "renewer_kerberos_principal_name", p.ThriftName(), err1812); }
  p.RenewerKerberosPrincipalName = v1811
  return err
}

func (p *GetDelegationTokenWithSignatureArgs) ReadFieldRenewerKerberosPrincipalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetDelegationTokenWithSignatureArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1813, err1814 := iprot.ReadString()
  if err1814 != nil { return thrift.NewTProtocolExceptionReadField(2, "token_signature", p.ThriftName(), err1814); }
  p.TokenSignature = v1813
  return err
}

func (p *GetDelegationTokenWithSignatureArgs) ReadFieldTokenSignature(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetDelegationTokenWithSignatureArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_delegation_token_with_signature_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenWithSignatureArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.RenewerKerberosPrincipalName) < 1 { return nil}
  err = oprot.WriteFieldBegin("renewer_kerberos_principal_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "renewer_kerberos_principal_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.RenewerKerberosPrincipalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "renewer_kerberos_principal_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "renewer_kerberos_principal_name", p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenWithSignatureArgs) WriteFieldRenewerKerberosPrincipalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetDelegationTokenWithSignatureArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TokenSignature) < 1 { return nil}
  err = oprot.WriteFieldBegin("token_signature", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "token_signature", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TokenSignature))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "token_signature", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "token_signature", p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenWithSignatureArgs) WriteFieldTokenSignature(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetDelegationTokenWithSignatureArgs) TStructName() string {
  return "GetDelegationTokenWithSignatureArgs"
}

func (p *GetDelegationTokenWithSignatureArgs) ThriftName() string {
  return "get_delegation_token_with_signature_args"
}

func (p *GetDelegationTokenWithSignatureArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDelegationTokenWithSignatureArgs(%+v)", *p)
}

func (p *GetDelegationTokenWithSignatureArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDelegationTokenWithSignatureArgs)
  if !ok {
    return 0, false
  }
  if p.RenewerKerberosPrincipalName != data.RenewerKerberosPrincipalName {
    if p.RenewerKerberosPrincipalName < data.RenewerKerberosPrincipalName {
      return -1, true
    }
    return 1, true
  }
  if p.TokenSignature != data.TokenSignature {
    if p.TokenSignature < data.TokenSignature {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetDelegationTokenWithSignatureArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.RenewerKerberosPrincipalName
  case 2: return p.TokenSignature
  }
  return nil
}

func (p *GetDelegationTokenWithSignatureArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("renewer_kerberos_principal_name", thrift.STRING, 1),
    thrift.NewTField("token_signature", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type GetDelegationTokenWithSignatureResult struct {
  thrift.TStruct
  Success string "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewGetDelegationTokenWithSignatureResult() *GetDelegationTokenWithSignatureResult {
  output := &GetDelegationTokenWithSignatureResult{
    TStruct:thrift.NewTStruct("get_delegation_token_with_signature_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetDelegationTokenWithSignatureResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenWithSignatureResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1815, err1816 := iprot.ReadString()
  if err1816 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1816); }
  p.Success = v1815
  return err
}

func (p *GetDelegationTokenWithSignatureResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetDelegationTokenWithSignatureResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1819 := p.O1.Read(iprot)
  if err1819 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1819); }
  return err
}

func (p *GetDelegationTokenWithSignatureResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetDelegationTokenWithSignatureResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_delegation_token_with_signature_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenWithSignatureResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Success) < 1 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetDelegationTokenWithSignatureResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetDelegationTokenWithSignatureResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *GetDelegationTokenWithSignatureResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetDelegationTokenWithSignatureResult) TStructName() string {
  return "GetDelegationTokenWithSignatureResult"
}

func (p *GetDelegationTokenWithSignatureResult) ThriftName() string {
  return "get_delegation_token_with_signature_result"
}

func (p *GetDelegationTokenWithSignatureResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDelegationTokenWithSignatureResult(%+v)", *p)
}

func (p *GetDelegationTokenWithSignatureResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetDelegationTokenWithSignatureResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetDelegationTokenWithSignatureResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *GetDelegationTokenWithSignatureResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TokenStrForm
 */
type RenewDelegationTokenArgs struct {
  thrift.TStruct
  TokenStrForm string "token_str_form"; // 1
}

func NewRenewDelegationTokenArgs() *RenewDelegationTokenArgs {
  output := &RenewDelegationTokenArgs{
    TStruct:thrift.NewTStruct("renew_delegation_token_args", []thrift.TField{
    thrift.NewTField("token_str_form", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *RenewDelegationTokenArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "token_str_form" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RenewDelegationTokenArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1820, err1821 := iprot.ReadString()
  if err1821 != nil { return thrift.NewTProtocolExceptionReadField(1, "token_str_form", p.ThriftName(), err1821); }
  p.TokenStrForm = v1820
  return err
}

func (p *RenewDelegationTokenArgs) ReadFieldTokenStrForm(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RenewDelegationTokenArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("renew_delegation_token_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RenewDelegationTokenArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TokenStrForm) < 1 { return nil}
  err = oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "token_str_form", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TokenStrForm))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "token_str_form", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "token_str_form", p.ThriftName(), err); }
  return err
}

func (p *RenewDelegationTokenArgs) WriteFieldTokenStrForm(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RenewDelegationTokenArgs) TStructName() string {
  return "RenewDelegationTokenArgs"
}

func (p *RenewDelegationTokenArgs) ThriftName() string {
  return "renew_delegation_token_args"
}

func (p *RenewDelegationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RenewDelegationTokenArgs(%+v)", *p)
}

func (p *RenewDelegationTokenArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RenewDelegationTokenArgs)
  if !ok {
    return 0, false
  }
  if p.TokenStrForm != data.TokenStrForm {
    if p.TokenStrForm < data.TokenStrForm {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *RenewDelegationTokenArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TokenStrForm
  }
  return nil
}

func (p *RenewDelegationTokenArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("token_str_form", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - O1
 */
type RenewDelegationTokenResult struct {
  thrift.TStruct
  Success int64 "success"; // 0
  O1 *MetaException "o1"; // 1
}

func NewRenewDelegationTokenResult() *RenewDelegationTokenResult {
  output := &RenewDelegationTokenResult{
    TStruct:thrift.NewTStruct("renew_delegation_token_result", []thrift.TField{
    thrift.NewTField("success", thrift.I64, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *RenewDelegationTokenResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RenewDelegationTokenResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1822, err1823 := iprot.ReadI64()
  if err1823 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1823); }
  p.Success = v1822
  return err
}

func (p *RenewDelegationTokenResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *RenewDelegationTokenResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1826 := p.O1.Read(iprot)
  if err1826 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1826); }
  return err
}

func (p *RenewDelegationTokenResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RenewDelegationTokenResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("renew_delegation_token_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RenewDelegationTokenResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Success) == 0 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.I64, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *RenewDelegationTokenResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *RenewDelegationTokenResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *RenewDelegationTokenResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RenewDelegationTokenResult) TStructName() string {
  return "RenewDelegationTokenResult"
}

func (p *RenewDelegationTokenResult) ThriftName() string {
  return "renew_delegation_token_result"
}

func (p *RenewDelegationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RenewDelegationTokenResult(%+v)", *p)
}

func (p *RenewDelegationTokenResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RenewDelegationTokenResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *RenewDelegationTokenResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.O1
  }
  return nil
}

func (p *RenewDelegationTokenResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I64, 0),
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TokenStrForm
 */
type CancelDelegationTokenArgs struct {
  thrift.TStruct
  TokenStrForm string "token_str_form"; // 1
}

func NewCancelDelegationTokenArgs() *CancelDelegationTokenArgs {
  output := &CancelDelegationTokenArgs{
    TStruct:thrift.NewTStruct("cancel_delegation_token_args", []thrift.TField{
    thrift.NewTField("token_str_form", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *CancelDelegationTokenArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "token_str_form" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelDelegationTokenArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1827, err1828 := iprot.ReadString()
  if err1828 != nil { return thrift.NewTProtocolExceptionReadField(1, "token_str_form", p.ThriftName(), err1828); }
  p.TokenStrForm = v1827
  return err
}

func (p *CancelDelegationTokenArgs) ReadFieldTokenStrForm(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CancelDelegationTokenArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("cancel_delegation_token_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelDelegationTokenArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TokenStrForm) < 1 { return nil}
  err = oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "token_str_form", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TokenStrForm))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "token_str_form", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "token_str_form", p.ThriftName(), err); }
  return err
}

func (p *CancelDelegationTokenArgs) WriteFieldTokenStrForm(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CancelDelegationTokenArgs) TStructName() string {
  return "CancelDelegationTokenArgs"
}

func (p *CancelDelegationTokenArgs) ThriftName() string {
  return "cancel_delegation_token_args"
}

func (p *CancelDelegationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelDelegationTokenArgs(%+v)", *p)
}

func (p *CancelDelegationTokenArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CancelDelegationTokenArgs)
  if !ok {
    return 0, false
  }
  if p.TokenStrForm != data.TokenStrForm {
    if p.TokenStrForm < data.TokenStrForm {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *CancelDelegationTokenArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TokenStrForm
  }
  return nil
}

func (p *CancelDelegationTokenArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("token_str_form", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - O1
 */
type CancelDelegationTokenResult struct {
  thrift.TStruct
  O1 *MetaException "o1"; // 1
}

func NewCancelDelegationTokenResult() *CancelDelegationTokenResult {
  output := &CancelDelegationTokenResult{
    TStruct:thrift.NewTStruct("cancel_delegation_token_result", []thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *CancelDelegationTokenResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "o1" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelDelegationTokenResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.O1 = NewMetaException()
  err1831 := p.O1.Read(iprot)
  if err1831 != nil { return thrift.NewTProtocolExceptionReadStruct("p.O1MetaException", err1831); }
  return err
}

func (p *CancelDelegationTokenResult) ReadFieldO1(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CancelDelegationTokenResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("cancel_delegation_token_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.O1 != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CancelDelegationTokenResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.O1 != nil {
    err = oprot.WriteFieldBegin("o1", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
    err = p.O1.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "o1", p.ThriftName(), err); }
  }
  return err
}

func (p *CancelDelegationTokenResult) WriteFieldO1(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CancelDelegationTokenResult) TStructName() string {
  return "CancelDelegationTokenResult"
}

func (p *CancelDelegationTokenResult) ThriftName() string {
  return "cancel_delegation_token_result"
}

func (p *CancelDelegationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelDelegationTokenResult(%+v)", *p)
}

func (p *CancelDelegationTokenResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CancelDelegationTokenResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.O1.CompareTo(data.O1); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CancelDelegationTokenResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.O1
  }
  return nil
}

func (p *CancelDelegationTokenResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("o1", thrift.STRUCT, 1),
    })
}


